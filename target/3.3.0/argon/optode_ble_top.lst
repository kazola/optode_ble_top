
/home/kaz/git/optode_ble_core/optode_ble_top/target/3.3.0/argon/optode_ble_top.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005b64  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b9b80  000b9b80  00009b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b9ba4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  2003e610  000b9ba8  0001e610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000016c  2003e684  2003e684  0002e684  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b9c1c  000b9c1c  00029c1c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b9c44  000b9c44  00029c44  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001401ec  00000000  00000000  00029c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00014124  00000000  00000000  00169e34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00002d30  00000000  00000000  0017df58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  000384ac  00000000  00000000  00180c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   0003ee69  00000000  00000000  001b9134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    00142145  00000000  00000000  001f7f9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    0003ed42  00000000  00000000  0033a0e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 0000b428  00000000  00000000  00378e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00008398  00000000  00000000  0038424c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f004 ff57 	bl	b8ee0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f004 ff79 	bl	b8f30 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e610 	.word	0x2003e610
   b4048:	000b9ba8 	.word	0x000b9ba8
   b404c:	2003e684 	.word	0x2003e684
   b4050:	2003e684 	.word	0x2003e684
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f001 f9d5 	bl	b540c <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b9b54 	.word	0x000b9b54
   b407c:	000b9b7c 	.word	0x000b9b7c

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b918 	b.w	b42b4 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f001 f95b 	bl	b5340 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f001 b975 	b.w	b537c <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f000 bce1 	b.w	b4a58 <malloc>

000b4096 <_Znaj>:
   b4096:	f000 bcdf 	b.w	b4a58 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f000 bce5 	b.w	b4a68 <free>
	...

000b40a0 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a2:	4a03      	ldr	r2, [pc, #12]	; (b40b0 <__cxa_pure_virtual+0x10>)
   b40a4:	4903      	ldr	r1, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x14>)
   b40a6:	200c      	movs	r0, #12
   b40a8:	f000 fc1a 	bl	b48e0 <panic_>
  while (1);
   b40ac:	e7fe      	b.n	b40ac <__cxa_pure_virtual+0xc>
   b40ae:	bf00      	nop
   b40b0:	000b48a1 	.word	0x000b48a1
   b40b4:	000b9284 	.word	0x000b9284

000b40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b8:	7800      	ldrb	r0, [r0, #0]
   b40ba:	fab0 f080 	clz	r0, r0
   b40be:	0940      	lsrs	r0, r0, #5
   b40c0:	4770      	bx	lr

000b40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c2:	2301      	movs	r3, #1
   b40c4:	7003      	strb	r3, [r0, #0]
   b40c6:	4770      	bx	lr

000b40c8 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b40c8:	4770      	bx	lr

000b40ca <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   b40ca:	6a00      	ldr	r0, [r0, #32]
   b40cc:	6803      	ldr	r3, [r0, #0]
   b40ce:	68db      	ldr	r3, [r3, #12]
   b40d0:	4718      	bx	r3
	...

000b40d4 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b40d4:	4b0a      	ldr	r3, [pc, #40]	; (b4100 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b40d6:	b510      	push	{r4, lr}
   b40d8:	4604      	mov	r4, r0
   b40da:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b40dc:	f001 fb38 	bl	b5750 <_ZN5spark10LogManager8instanceEv>
   b40e0:	4621      	mov	r1, r4
   b40e2:	f001 fd82 	bl	b5bea <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b40e6:	f001 f875 	bl	b51d4 <_Z16_fetch_usbserialv>
   b40ea:	f001 f867 	bl	b51bc <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b40ee:	4620      	mov	r0, r4
   b40f0:	4b04      	ldr	r3, [pc, #16]	; (b4104 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b40f2:	f840 3b04 	str.w	r3, [r0], #4
   b40f6:	f001 fc13 	bl	b5920 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b40fa:	4620      	mov	r0, r4
   b40fc:	bd10      	pop	{r4, pc}
   b40fe:	bf00      	nop
   b4100:	000b931c 	.word	0x000b931c
   b4104:	000b9304 	.word	0x000b9304

000b4108 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b4108:	b510      	push	{r4, lr}
   b410a:	4604      	mov	r4, r0
    }
   b410c:	f7ff ffe2 	bl	b40d4 <_ZN5spark16SerialLogHandlerD1Ev>
   b4110:	4620      	mov	r0, r4
   b4112:	2124      	movs	r1, #36	; 0x24
   b4114:	f7ff ffc1 	bl	b409a <_ZdlPvj>
   b4118:	4620      	mov	r0, r4
   b411a:	bd10      	pop	{r4, pc}

000b411c <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b411c:	b40e      	push	{r1, r2, r3}
   b411e:	b500      	push	{lr}
   b4120:	b08c      	sub	sp, #48	; 0x30
   b4122:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b4124:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b4128:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b412c:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b412e:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b4132:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4134:	6801      	ldr	r1, [r0, #0]
   b4136:	aa04      	add	r2, sp, #16
   b4138:	201e      	movs	r0, #30
    attr.flags = 0;
   b413a:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b413e:	f000 fbdf 	bl	b4900 <log_message_v>
}
   b4142:	b00c      	add	sp, #48	; 0x30
   b4144:	f85d eb04 	ldr.w	lr, [sp], #4
   b4148:	b003      	add	sp, #12
   b414a:	4770      	bx	lr

000b414c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b414c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b414e:	e9d0 5300 	ldrd	r5, r3, [r0]
   b4152:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4154:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b4156:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b415a:	42ae      	cmp	r6, r5
   b415c:	d004      	beq.n	b4168 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b415e:	4628      	mov	r0, r5
   b4160:	f004 fc4e 	bl	b8a00 <_ZN6StringD1Ev>
   b4164:	3514      	adds	r5, #20
   b4166:	e7f8      	b.n	b415a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b4168:	6820      	ldr	r0, [r4, #0]
   b416a:	f000 fc7d 	bl	b4a68 <free>
    AllocatorT::free(data_);
}
   b416e:	4620      	mov	r0, r4
   b4170:	bd70      	pop	{r4, r5, r6, pc}

000b4172 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b4172:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b4174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4176:	4604      	mov	r4, r0
   b4178:	460d      	mov	r5, r1
   b417a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b417c:	d916      	bls.n	b41ac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b417e:	4290      	cmp	r0, r2
   b4180:	d215      	bcs.n	b41ae <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b4182:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b4186:	1a75      	subs	r5, r6, r1
   b4188:	f1a1 0714 	sub.w	r7, r1, #20
   b418c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b418e:	42b7      	cmp	r7, r6
   b4190:	d01c      	beq.n	b41cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b4192:	b12c      	cbz	r4, b41a0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b4194:	4631      	mov	r1, r6
   b4196:	4620      	mov	r0, r4
   b4198:	f004 fcae 	bl	b8af8 <_ZN6StringC1EOS_>
   b419c:	7c33      	ldrb	r3, [r6, #16]
   b419e:	7423      	strb	r3, [r4, #16]
   b41a0:	4630      	mov	r0, r6
   b41a2:	f004 fc2d 	bl	b8a00 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b41a6:	3e14      	subs	r6, #20
   b41a8:	3c14      	subs	r4, #20
   b41aa:	e7f0      	b.n	b418e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b41ac:	d00e      	beq.n	b41cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b41ae:	42b5      	cmp	r5, r6
   b41b0:	d00c      	beq.n	b41cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b41b2:	b12c      	cbz	r4, b41c0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b41b4:	4629      	mov	r1, r5
   b41b6:	4620      	mov	r0, r4
   b41b8:	f004 fc9e 	bl	b8af8 <_ZN6StringC1EOS_>
   b41bc:	7c2b      	ldrb	r3, [r5, #16]
   b41be:	7423      	strb	r3, [r4, #16]
   b41c0:	4628      	mov	r0, r5
   b41c2:	f004 fc1d 	bl	b8a00 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b41c6:	3514      	adds	r5, #20
   b41c8:	3414      	adds	r4, #20
   b41ca:	e7f0      	b.n	b41ae <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b41cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b41ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b41ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n > 0) {
   b41d0:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b41d2:	4605      	mov	r5, r0
        if (n > 0) {
   b41d4:	dd13      	ble.n	b41fe <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x30>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b41d6:	2714      	movs	r7, #20
    return ::malloc(size);
   b41d8:	fb07 f006 	mul.w	r0, r7, r6
   b41dc:	f000 fc3c 	bl	b4a58 <malloc>
            if (!d) {
   b41e0:	4604      	mov	r4, r0
   b41e2:	b158      	cbz	r0, b41fc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2e>
            move(d, data_, data_ + size_);
   b41e4:	e9d5 1200 	ldrd	r1, r2, [r5]
   b41e8:	fb07 1202 	mla	r2, r7, r2, r1
   b41ec:	f7ff ffc1 	bl	b4172 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b41f0:	6828      	ldr	r0, [r5, #0]
   b41f2:	f000 fc39 	bl	b4a68 <free>
        data_ = d;
   b41f6:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b41f8:	60ae      	str	r6, [r5, #8]
        return true;
   b41fa:	2001      	movs	r0, #1
    }
   b41fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        T* d = nullptr;
   b41fe:	2400      	movs	r4, #0
   b4200:	e7f6      	b.n	b41f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x22>

000b4202 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b4206:	2300      	movs	r3, #0
   b4208:	e9c0 3300 	strd	r3, r3, [r0]
   b420c:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b420e:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b4210:	6849      	ldr	r1, [r1, #4]
   b4212:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4214:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b4216:	dd17      	ble.n	b4248 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x46>
   b4218:	f7ff ffd9 	bl	b41ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b421c:	b1a0      	cbz	r0, b4248 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x46>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b421e:	e9d5 6300 	ldrd	r6, r3, [r5]
   b4222:	f04f 0814 	mov.w	r8, #20
   b4226:	6827      	ldr	r7, [r4, #0]
   b4228:	fb08 6803 	mla	r8, r8, r3, r6
        for (; it != end; ++it, ++dest) {
   b422c:	45b0      	cmp	r8, r6
   b422e:	d009      	beq.n	b4244 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x42>
            new(dest) T(*it);
   b4230:	b12f      	cbz	r7, b423e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x3c>
   b4232:	4631      	mov	r1, r6
   b4234:	4638      	mov	r0, r7
   b4236:	f004 fc79 	bl	b8b2c <_ZN6StringC1ERKS_>
   b423a:	7c33      	ldrb	r3, [r6, #16]
   b423c:	743b      	strb	r3, [r7, #16]
        for (; it != end; ++it, ++dest) {
   b423e:	3614      	adds	r6, #20
   b4240:	3714      	adds	r7, #20
   b4242:	e7f3      	b.n	b422c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x2a>
        size_ = vector.size_;
   b4244:	686b      	ldr	r3, [r5, #4]
   b4246:	6063      	str	r3, [r4, #4]
}
   b4248:	4620      	mov	r0, r4
   b424a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b424e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE6appendES1_.isra.0>:

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b424e:	b570      	push	{r4, r5, r6, lr}
   b4250:	460e      	mov	r6, r1
   b4252:	b086      	sub	sp, #24
    return insert(size_, std::move(value));
   b4254:	6845      	ldr	r5, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b4256:	4604      	mov	r4, r0
   b4258:	a801      	add	r0, sp, #4
   b425a:	f004 fc4d 	bl	b8af8 <_ZN6StringC1EOS_>
   b425e:	7c33      	ldrb	r3, [r6, #16]
   b4260:	f88d 3014 	strb.w	r3, [sp, #20]
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b4264:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b4268:	4299      	cmp	r1, r3
   b426a:	da10      	bge.n	b428e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE6appendES1_.isra.0+0x40>
        return false;
    }
    T* const p = data_ + i;
   b426c:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b426e:	6861      	ldr	r1, [r4, #4]
    T* const p = data_ + i;
   b4270:	2214      	movs	r2, #20
   b4272:	fb02 3505 	mla	r5, r2, r5, r3
    move(p + 1, p, data_ + size_);
   b4276:	f105 0014 	add.w	r0, r5, #20
   b427a:	fb02 3201 	mla	r2, r2, r1, r3
   b427e:	4629      	mov	r1, r5
   b4280:	f7ff ff77 	bl	b4172 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b4284:	b975      	cbnz	r5, b42a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE6appendES1_.isra.0+0x56>
    ++size_;
   b4286:	6863      	ldr	r3, [r4, #4]
   b4288:	3301      	adds	r3, #1
   b428a:	6063      	str	r3, [r4, #4]
    return true;
   b428c:	e005      	b.n	b429a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE6appendES1_.isra.0+0x4c>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b428e:	3101      	adds	r1, #1
   b4290:	4620      	mov	r0, r4
   b4292:	f7ff ff9c 	bl	b41ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b4296:	2800      	cmp	r0, #0
   b4298:	d1e8      	bne.n	b426c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE6appendES1_.isra.0+0x1e>
   b429a:	a801      	add	r0, sp, #4
   b429c:	f004 fbb0 	bl	b8a00 <_ZN6StringD1Ev>
}
   b42a0:	b006      	add	sp, #24
   b42a2:	bd70      	pop	{r4, r5, r6, pc}
   b42a4:	a901      	add	r1, sp, #4
   b42a6:	4628      	mov	r0, r5
   b42a8:	f004 fc26 	bl	b8af8 <_ZN6StringC1EOS_>
   b42ac:	f89d 3014 	ldrb.w	r3, [sp, #20]
   b42b0:	742b      	strb	r3, [r5, #16]
   b42b2:	e7e8      	b.n	b4286 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE6appendES1_.isra.0+0x38>

000b42b4 <setup>:
}



void setup()
{
   b42b4:	b500      	push	{lr}
    _DELAY_ATTACH_UART_MONITOR_
   b42b6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
{
   b42ba:	b099      	sub	sp, #100	; 0x64
    _DELAY_ATTACH_UART_MONITOR_
   b42bc:	f001 f8de 	bl	b547c <delay>
        capacity_(0) {
   b42c0:	2300      	movs	r3, #0
        level_(level) {
   b42c2:	494a      	ldr	r1, [pc, #296]	; (b43ec <setup+0x138>)
   b42c4:	9302      	str	r3, [sp, #8]
   b42c6:	a80f      	add	r0, sp, #60	; 0x3c
   b42c8:	e9cd 3300 	strd	r3, r3, [sp]
   b42cc:	251e      	movs	r5, #30
   b42ce:	f004 fbe2 	bl	b8a96 <_ZN6StringC1EPK19__FlashStringHelper>
    _LOG_INIT_WITH_FILTERS_(1)
   b42d2:	a90f      	add	r1, sp, #60	; 0x3c
   b42d4:	4668      	mov	r0, sp
   b42d6:	f88d 504c 	strb.w	r5, [sp, #76]	; 0x4c
   b42da:	f7ff ffb8 	bl	b424e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE6appendES1_.isra.0>
class LogCategoryFilter {
   b42de:	a80f      	add	r0, sp, #60	; 0x3c
   b42e0:	f004 fb8e 	bl	b8a00 <_ZN6StringD1Ev>
        level_(level) {
   b42e4:	4942      	ldr	r1, [pc, #264]	; (b43f0 <setup+0x13c>)
   b42e6:	a80f      	add	r0, sp, #60	; 0x3c
   b42e8:	f004 fbd5 	bl	b8a96 <_ZN6StringC1EPK19__FlashStringHelper>
   b42ec:	2428      	movs	r4, #40	; 0x28
   b42ee:	a90f      	add	r1, sp, #60	; 0x3c
   b42f0:	4668      	mov	r0, sp
   b42f2:	f88d 404c 	strb.w	r4, [sp, #76]	; 0x4c
   b42f6:	f7ff ffaa 	bl	b424e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE6appendES1_.isra.0>
class LogCategoryFilter {
   b42fa:	a80f      	add	r0, sp, #60	; 0x3c
   b42fc:	f004 fb80 	bl	b8a00 <_ZN6StringD1Ev>
        level_(level) {
   b4300:	493c      	ldr	r1, [pc, #240]	; (b43f4 <setup+0x140>)
   b4302:	a80f      	add	r0, sp, #60	; 0x3c
   b4304:	f004 fbc7 	bl	b8a96 <_ZN6StringC1EPK19__FlashStringHelper>
   b4308:	a90f      	add	r1, sp, #60	; 0x3c
   b430a:	4668      	mov	r0, sp
   b430c:	f88d 404c 	strb.w	r4, [sp, #76]	; 0x4c
   b4310:	f7ff ff9d 	bl	b424e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE6appendES1_.isra.0>
class LogCategoryFilter {
   b4314:	a80f      	add	r0, sp, #60	; 0x3c
   b4316:	f004 fb73 	bl	b8a00 <_ZN6StringD1Ev>
        level_(level) {
   b431a:	4937      	ldr	r1, [pc, #220]	; (b43f8 <setup+0x144>)
   b431c:	a80f      	add	r0, sp, #60	; 0x3c
   b431e:	f004 fbba 	bl	b8a96 <_ZN6StringC1EPK19__FlashStringHelper>
   b4322:	a90f      	add	r1, sp, #60	; 0x3c
   b4324:	4668      	mov	r0, sp
   b4326:	f88d 404c 	strb.w	r4, [sp, #76]	; 0x4c
   b432a:	f7ff ff90 	bl	b424e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE6appendES1_.isra.0>
class LogCategoryFilter {
   b432e:	a80f      	add	r0, sp, #60	; 0x3c
   b4330:	f004 fb66 	bl	b8a00 <_ZN6StringD1Ev>
        level_(level) {
   b4334:	4931      	ldr	r1, [pc, #196]	; (b43fc <setup+0x148>)
   b4336:	a80f      	add	r0, sp, #60	; 0x3c
   b4338:	f004 fbad 	bl	b8a96 <_ZN6StringC1EPK19__FlashStringHelper>
   b433c:	a90f      	add	r1, sp, #60	; 0x3c
   b433e:	4668      	mov	r0, sp
   b4340:	f88d 404c 	strb.w	r4, [sp, #76]	; 0x4c
   b4344:	f7ff ff83 	bl	b424e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE6appendES1_.isra.0>
class LogCategoryFilter {
   b4348:	a80f      	add	r0, sp, #60	; 0x3c
   b434a:	f004 fb59 	bl	b8a00 <_ZN6StringD1Ev>
   b434e:	4669      	mov	r1, sp
   b4350:	a803      	add	r0, sp, #12
   b4352:	f7ff ff56 	bl	b4202 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
            StreamLogHandler(Serial, level, filters) {
   b4356:	f000 ff3d 	bl	b51d4 <_Z16_fetch_usbserialv>
   b435a:	a903      	add	r1, sp, #12
   b435c:	4604      	mov	r4, r0
   b435e:	a806      	add	r0, sp, #24
   b4360:	f7ff ff4f 	bl	b4202 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
   b4364:	a906      	add	r1, sp, #24
   b4366:	a809      	add	r0, sp, #36	; 0x24
   b4368:	f7ff ff4b 	bl	b4202 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b436c:	4b24      	ldr	r3, [pc, #144]	; (b4400 <setup+0x14c>)
   b436e:	930f      	str	r3, [sp, #60]	; 0x3c
   b4370:	a909      	add	r1, sp, #36	; 0x24
   b4372:	a80c      	add	r0, sp, #48	; 0x30
   b4374:	f7ff ff45 	bl	b4202 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b4378:	aa0c      	add	r2, sp, #48	; 0x30
   b437a:	4629      	mov	r1, r5
   b437c:	a810      	add	r0, sp, #64	; 0x40
   b437e:	f001 fd17 	bl	b5db0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b4382:	a80c      	add	r0, sp, #48	; 0x30
   b4384:	f7ff fee2 	bl	b414c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b4388:	a809      	add	r0, sp, #36	; 0x24
   b438a:	f7ff fedf 	bl	b414c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b438e:	4b1d      	ldr	r3, [pc, #116]	; (b4404 <setup+0x150>)
   b4390:	930f      	str	r3, [sp, #60]	; 0x3c
   b4392:	a806      	add	r0, sp, #24
   b4394:	9417      	str	r4, [sp, #92]	; 0x5c
   b4396:	f7ff fed9 	bl	b414c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b439a:	4b1b      	ldr	r3, [pc, #108]	; (b4408 <setup+0x154>)
   b439c:	930f      	str	r3, [sp, #60]	; 0x3c
        Serial.begin();
   b439e:	f000 ff19 	bl	b51d4 <_Z16_fetch_usbserialv>
   b43a2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b43a6:	f000 ff05 	bl	b51b4 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b43aa:	f001 f9d1 	bl	b5750 <_ZN5spark10LogManager8instanceEv>
   b43ae:	a90f      	add	r1, sp, #60	; 0x3c
   b43b0:	f001 fbd4 	bl	b5b5c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
   b43b4:	a803      	add	r0, sp, #12
   b43b6:	f7ff fec9 	bl	b414c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    _LOG_ROOM_MAIN_
   b43ba:	4a14      	ldr	r2, [pc, #80]	; (b440c <setup+0x158>)
   b43bc:	4914      	ldr	r1, [pc, #80]	; (b4410 <setup+0x15c>)
   b43be:	4815      	ldr	r0, [pc, #84]	; (b4414 <setup+0x160>)
        ble_interact_optode_mini(mac);
   b43c0:	4c15      	ldr	r4, [pc, #84]	; (b4418 <setup+0x164>)
    _LOG_ROOM_MAIN_
   b43c2:	f7ff feab 	bl	b411c <_ZNK5spark6Logger4infoEPKcz>
    l_i_("[ BOOT ] running TESTS");
   b43c6:	4915      	ldr	r1, [pc, #84]	; (b441c <setup+0x168>)
   b43c8:	4812      	ldr	r0, [pc, #72]	; (b4414 <setup+0x160>)
   b43ca:	f7ff fea7 	bl	b411c <_ZNK5spark6Logger4infoEPKcz>
    l_i_("----------------------");
   b43ce:	4914      	ldr	r1, [pc, #80]	; (b4420 <setup+0x16c>)
   b43d0:	4810      	ldr	r0, [pc, #64]	; (b4414 <setup+0x160>)
   b43d2:	f7ff fea3 	bl	b411c <_ZNK5spark6Logger4infoEPKcz>
    BLE.on();
   b43d6:	f002 fd31 	bl	b6e3c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b43da:	f002 fd79 	bl	b6ed0 <_ZNK8particle14BleLocalDevice2onEv>
        ble_scan_for_loggers();
   b43de:	f000 f84f 	bl	b4480 <_Z20ble_scan_for_loggersv>
        ble_interact_optode_mini(mac);
   b43e2:	4620      	mov	r0, r4
   b43e4:	f000 f8e2 	bl	b45ac <_Z24ble_interact_optode_miniPKc>
    while (1)
   b43e8:	e7f9      	b.n	b43de <setup+0x12a>
   b43ea:	bf00      	nop
   b43ec:	000b9299 	.word	0x000b9299
   b43f0:	000b929d 	.word	0x000b929d
   b43f4:	000b92a1 	.word	0x000b92a1
   b43f8:	000b92a8 	.word	0x000b92a8
   b43fc:	000b92ac 	.word	0x000b92ac
   b4400:	000b9304 	.word	0x000b9304
   b4404:	000b957c 	.word	0x000b957c
   b4408:	000b931c 	.word	0x000b931c
   b440c:	000b92b3 	.word	0x000b92b3
   b4410:	000b9388 	.word	0x000b9388
   b4414:	2003e6f0 	.word	0x2003e6f0
   b4418:	000b92e8 	.word	0x000b92e8
   b441c:	000b92ba 	.word	0x000b92ba
   b4420:	000b92d1 	.word	0x000b92d1

000b4424 <_GLOBAL__sub_I_SystemMode>:
    
    #else
        l_e_("[ DDP ] choose _run_main or _run_tests!");
        assert(FALSE);
    #endif
}
   b4424:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4426:	4b07      	ldr	r3, [pc, #28]	; (b4444 <_GLOBAL__sub_I_SystemMode+0x20>)
    SleepResult() {}
   b4428:	4a07      	ldr	r2, [pc, #28]	; (b4448 <_GLOBAL__sub_I_SystemMode+0x24>)
   b442a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b442c:	2400      	movs	r4, #0
   b442e:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4432:	2003      	movs	r0, #3
   b4434:	f000 fae4 	bl	b4a00 <set_system_mode>
SYSTEM_THREAD(ENABLED);
   b4438:	4621      	mov	r1, r4
   b443a:	2001      	movs	r0, #1
}
   b443c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SYSTEM_THREAD(ENABLED);
   b4440:	f000 baee 	b.w	b4a20 <system_thread_set_state>
   b4444:	2003e684 	.word	0x2003e684
   b4448:	ffff0000 	.word	0xffff0000

000b444c <_ZL11_on_data_rxPKhjRKN8particle13BlePeerDeviceEPv>:
	//memcpy(s, data, len);
    // l_i_("[ BLE ] -> notif len %d, data %s", len, s);
    //assert(ble_data_i + len <= _APP_BLE_DATA_BUFFER_LEN_);
    //memcpy(&ble_data[ble_data_i], data, len);
    //ble_data_i += len;
}
   b444c:	4770      	bx	lr

000b444e <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   b444e:	b40e      	push	{r1, r2, r3}
   b4450:	b500      	push	{lr}
   b4452:	b08c      	sub	sp, #48	; 0x30
   b4454:	aa0d      	add	r2, sp, #52	; 0x34
    attr.flags = 0;
   b4456:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::error(const char *fmt, ...) const {
   b445a:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b445e:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4460:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b4464:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4466:	6801      	ldr	r1, [r0, #0]
   b4468:	aa04      	add	r2, sp, #16
   b446a:	2032      	movs	r0, #50	; 0x32
    attr.flags = 0;
   b446c:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4470:	f000 fa46 	bl	b4900 <log_message_v>
}
   b4474:	b00c      	add	sp, #48	; 0x30
   b4476:	f85d eb04 	ldr.w	lr, [sp], #4
   b447a:	b003      	add	sp, #12
   b447c:	4770      	bx	lr
	...

000b4480 <_Z20ble_scan_for_loggersv>:
{
   b4480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    l_i_("[ BLE ] scanning for devices during %d seconds...", t);
   b4484:	4946      	ldr	r1, [pc, #280]	; (b45a0 <_Z20ble_scan_for_loggersv+0x120>)
   b4486:	4847      	ldr	r0, [pc, #284]	; (b45a4 <_Z20ble_scan_for_loggersv+0x124>)
{
   b4488:	f6ad 6d7c 	subw	sp, sp, #3708	; 0xe7c
    l_i_("[ BLE ] scanning for devices during %d seconds...", t);
   b448c:	220a      	movs	r2, #10
   b448e:	f7ff fe45 	bl	b411c <_ZNK5spark6Logger4infoEPKcz>
    BLE.setScanTimeout(_APP_BLE_SCAN_TIMEOUT_S(t));
   b4492:	f002 fcd3 	bl	b6e3c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4496:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b449a:	f002 fd5f 	bl	b6f5c <_ZNK8particle14BleLocalDevice14setScanTimeoutEt>
    BleScanResult s_r[_APP_BLE_SCAN_RESULT_MAX_LEN_];
   b449e:	ac1a      	add	r4, sp, #104	; 0x68
    BLE.setScanTimeout(_APP_BLE_SCAN_TIMEOUT_S(t));
   b44a0:	4625      	mov	r5, r4
   b44a2:	2664      	movs	r6, #100	; 0x64
   b44a4:	46a1      	mov	r9, r4


class BleScanResult {
public:
    BleScanResult()
            : rssi_(BLE_RSSI_INVALID) {
   b44a6:	277f      	movs	r7, #127	; 0x7f
   b44a8:	4628      	mov	r0, r5
   b44aa:	f002 f9a4 	bl	b67f6 <_ZN8particle10BleAddressC1Ev>
   b44ae:	f105 0008 	add.w	r0, r5, #8
   b44b2:	f003 f8f9 	bl	b76a8 <_ZN8particle18BleAdvertisingDataC1Ev>
   b44b6:	f105 0014 	add.w	r0, r5, #20
   b44ba:	f003 f8f5 	bl	b76a8 <_ZN8particle18BleAdvertisingDataC1Ev>
    BleScanResult s_r[_APP_BLE_SCAN_RESULT_MAX_LEN_];
   b44be:	3e01      	subs	r6, #1
   b44c0:	f885 7020 	strb.w	r7, [r5, #32]
   b44c4:	f105 0524 	add.w	r5, r5, #36	; 0x24
   b44c8:	d1ee      	bne.n	b44a8 <_Z20ble_scan_for_loggersv+0x28>
    uint8_t n = BLE.scan(s_r, _APP_BLE_SCAN_RESULT_MAX_LEN_);
   b44ca:	f002 fcb7 	bl	b6e3c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b44ce:	2264      	movs	r2, #100	; 0x64
   b44d0:	4621      	mov	r1, r4
   b44d2:	f002 fd8d 	bl	b6ff0 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>
        l_i_("[ BLE ] device found %s - name %s - name2 %s", mac, _s, _r);
   b44d6:	f8df b0d0 	ldr.w	fp, [pc, #208]	; b45a8 <_Z20ble_scan_for_loggersv+0x128>
   b44da:	f8df a0c8 	ldr.w	sl, [pc, #200]	; b45a4 <_Z20ble_scan_for_loggersv+0x124>
    uint8_t n = BLE.scan(s_r, _APP_BLE_SCAN_RESULT_MAX_LEN_);
   b44de:	fa5f f880 	uxtb.w	r8, r0
    for (uint8_t i = 0; i < n; i++)
   b44e2:	b2f3      	uxtb	r3, r6
   b44e4:	4598      	cmp	r8, r3
   b44e6:	d94a      	bls.n	b457e <_Z20ble_scan_for_loggersv+0xfe>
        char _s[lnl] = {0};
   b44e8:	2500      	movs	r5, #0
   b44ea:	2218      	movs	r2, #24
   b44ec:	4629      	mov	r1, r5
   b44ee:	f10d 0031 	add.w	r0, sp, #49	; 0x31
   b44f2:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
   b44f6:	f004 fd1b 	bl	b8f30 <memset>
        char mac[lml] = {0};
   b44fa:	2211      	movs	r2, #17
   b44fc:	4629      	mov	r1, r5
   b44fe:	f10d 001d 	add.w	r0, sp, #29
   b4502:	f88d 501c 	strb.w	r5, [sp, #28]
   b4506:	f004 fd13 	bl	b8f30 <memset>
        char _r[lnl] = {0};
   b450a:	2218      	movs	r2, #24
   b450c:	4629      	mov	r1, r5
   b450e:	f10d 004d 	add.w	r0, sp, #77	; 0x4d
   b4512:	f88d 504c 	strb.w	r5, [sp, #76]	; 0x4c
   b4516:	f004 fd0b 	bl	b8f30 <memset>
        strncpy(_s, s_r[i].advertisingData().deviceName().c_str(), lnl - 1);
   b451a:	f104 0108 	add.w	r1, r4, #8
   b451e:	a803      	add	r0, sp, #12
   b4520:	f002 fafc 	bl	b6b1c <_ZNK8particle18BleAdvertisingData10deviceNameEv>
   b4524:	2218      	movs	r2, #24
   b4526:	9903      	ldr	r1, [sp, #12]
   b4528:	a80c      	add	r0, sp, #48	; 0x30
   b452a:	f004 fd7c 	bl	b9026 <strncpy>
   b452e:	a803      	add	r0, sp, #12
   b4530:	f004 fa66 	bl	b8a00 <_ZN6StringD1Ev>
        char _r[lnl] = {0};
   b4534:	af13      	add	r7, sp, #76	; 0x4c
        strncpy(_r, s_r[i].scanResponse().deviceName().c_str(), lnl - 1);
   b4536:	f104 0114 	add.w	r1, r4, #20
   b453a:	a803      	add	r0, sp, #12
   b453c:	f002 faee 	bl	b6b1c <_ZNK8particle18BleAdvertisingData10deviceNameEv>
   b4540:	9903      	ldr	r1, [sp, #12]
   b4542:	2218      	movs	r2, #24
   b4544:	4638      	mov	r0, r7
   b4546:	f004 fd6e 	bl	b9026 <strncpy>
   b454a:	a803      	add	r0, sp, #12
   b454c:	f004 fa58 	bl	b8a00 <_ZN6StringD1Ev>
        strncpy(mac, s_r[i].address().toString().c_str(), lml - 1);
   b4550:	4621      	mov	r1, r4
   b4552:	462a      	mov	r2, r5
   b4554:	a803      	add	r0, sp, #12
   b4556:	f002 f9b5 	bl	b68c4 <_ZNK8particle10BleAddress8toStringEb>
   b455a:	9903      	ldr	r1, [sp, #12]
   b455c:	2211      	movs	r2, #17
   b455e:	a807      	add	r0, sp, #28
   b4560:	f004 fd61 	bl	b9026 <strncpy>
   b4564:	a803      	add	r0, sp, #12
   b4566:	f004 fa4b 	bl	b8a00 <_ZN6StringD1Ev>
        l_i_("[ BLE ] device found %s - name %s - name2 %s", mac, _s, _r);
   b456a:	9700      	str	r7, [sp, #0]
   b456c:	ab0c      	add	r3, sp, #48	; 0x30
   b456e:	aa07      	add	r2, sp, #28
   b4570:	4659      	mov	r1, fp
   b4572:	4650      	mov	r0, sl
   b4574:	f7ff fdd2 	bl	b411c <_ZNK5spark6Logger4infoEPKcz>
    for (uint8_t i = 0; i < n; i++)
   b4578:	3601      	adds	r6, #1
   b457a:	3424      	adds	r4, #36	; 0x24
   b457c:	e7b1      	b.n	b44e2 <_Z20ble_scan_for_loggersv+0x62>
    BleScanResult s_r[_APP_BLE_SCAN_RESULT_MAX_LEN_];
   b457e:	f60d 6478 	addw	r4, sp, #3704	; 0xe78
    ::free(ptr);
   b4582:	f854 0c10 	ldr.w	r0, [r4, #-16]
   b4586:	f000 fa6f 	bl	b4a68 <free>
   b458a:	3c24      	subs	r4, #36	; 0x24
   b458c:	68a0      	ldr	r0, [r4, #8]
   b458e:	f000 fa6b 	bl	b4a68 <free>
   b4592:	454c      	cmp	r4, r9
   b4594:	d1f5      	bne.n	b4582 <_Z20ble_scan_for_loggersv+0x102>
}
   b4596:	f60d 6d7c 	addw	sp, sp, #3708	; 0xe7c
   b459a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b459e:	bf00      	nop
   b45a0:	000b932c 	.word	0x000b932c
   b45a4:	2003e6f0 	.word	0x2003e6f0
   b45a8:	000b935e 	.word	0x000b935e

000b45ac <_Z24ble_interact_optode_miniPKc>:



uint8_t ble_interact_optode_mini(const char * mac)
{
   b45ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    BleAddress _a = BleAddress(mac);
   b45ae:	4601      	mov	r1, r0
   b45b0:	2200      	movs	r2, #0
{
   b45b2:	4604      	mov	r4, r0
    BleAddress _a = BleAddress(mac);
   b45b4:	4668      	mov	r0, sp
   b45b6:	f002 f8f7 	bl	b67a8 <_ZN8particle10BleAddressC1EPKcNS_14BleAddressTypeE>
    BlePeerDevice _p = BLE.connect(_a);
   b45ba:	f002 fc3f 	bl	b6e3c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b45be:	466a      	mov	r2, sp
   b45c0:	4601      	mov	r1, r0
   b45c2:	2301      	movs	r3, #1
   b45c4:	a802      	add	r0, sp, #8
   b45c6:	f003 ff2b 	bl	b8420 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>


 	if (_p.connected())
   b45ca:	a802      	add	r0, sp, #8
   b45cc:	f002 fba8 	bl	b6d20 <_ZNK8particle13BlePeerDevice9connectedEv>
    {
        l_i_("[ BLE ] connected to BLE optode mini, mac = %s", mac);
   b45d0:	4622      	mov	r2, r4
 	if (_p.connected())
   b45d2:	b1e8      	cbz	r0, b4610 <_Z24ble_interact_optode_miniPKc+0x64>
        l_i_("[ BLE ] connected to BLE optode mini, mac = %s", mac);
   b45d4:	4911      	ldr	r1, [pc, #68]	; (b461c <_Z24ble_interact_optode_miniPKc+0x70>)
   b45d6:	4812      	ldr	r0, [pc, #72]	; (b4620 <_Z24ble_interact_optode_miniPKc+0x74>)
   b45d8:	f7ff fda0 	bl	b411c <_ZNK5spark6Logger4infoEPKcz>
        c_r.onDataReceived(_on_data_rx, NULL);
   b45dc:	2200      	movs	r2, #0
   b45de:	4911      	ldr	r1, [pc, #68]	; (b4624 <_Z24ble_interact_optode_miniPKc+0x78>)
   b45e0:	4811      	ldr	r0, [pc, #68]	; (b4628 <_Z24ble_interact_optode_miniPKc+0x7c>)
   b45e2:	f003 fbda 	bl	b7d9a <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
        //const char * UUID_R = "f0001132-0451-4000-b000-000000000000";
        //const char * UUID_W = "f0001131-0451-4000-b000-000000000000";
        //_p.getCharacteristicByUUID(c_r, BleUuid(UUID_R));
        //_p.getCharacteristicByUUID(c_w, BleUuid(UUID_W));

        delay(5000);
   b45e6:	f241 3088 	movw	r0, #5000	; 0x1388
   b45ea:	f000 ff47 	bl	b547c <delay>


        BLE.disconnect(_p);
   b45ee:	f002 fc25 	bl	b6e3c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b45f2:	a902      	add	r1, sp, #8
   b45f4:	f003 fa0f 	bl	b7a16 <_ZNK8particle14BleLocalDevice10disconnectERKNS_13BlePeerDeviceE>
        l_i_("[ BLE ] disconnected optode mini, mac = %s", mac);
   b45f8:	4622      	mov	r2, r4
   b45fa:	490c      	ldr	r1, [pc, #48]	; (b462c <_Z24ble_interact_optode_miniPKc+0x80>)
   b45fc:	4808      	ldr	r0, [pc, #32]	; (b4620 <_Z24ble_interact_optode_miniPKc+0x74>)
   b45fe:	f7ff fd8d 	bl	b411c <_ZNK5spark6Logger4infoEPKcz>
        return 0;
   b4602:	2400      	movs	r4, #0
    BlePeerDevice _p = BLE.connect(_a);
   b4604:	a802      	add	r0, sp, #8
   b4606:	f002 fd62 	bl	b70ce <_ZN8particle13BlePeerDeviceD1Ev>
    }

    l_e_("[ BLE ] failed connecting %s", mac);
    return 1;
   b460a:	4620      	mov	r0, r4
   b460c:	b004      	add	sp, #16
   b460e:	bd10      	pop	{r4, pc}
    l_e_("[ BLE ] failed connecting %s", mac);
   b4610:	4907      	ldr	r1, [pc, #28]	; (b4630 <_Z24ble_interact_optode_miniPKc+0x84>)
   b4612:	4803      	ldr	r0, [pc, #12]	; (b4620 <_Z24ble_interact_optode_miniPKc+0x74>)
   b4614:	f7ff ff1b 	bl	b444e <_ZNK5spark6Logger5errorEPKcz>
    return 1;
   b4618:	2401      	movs	r4, #1
   b461a:	e7f3      	b.n	b4604 <_Z24ble_interact_optode_miniPKc+0x58>
   b461c:	000b938b 	.word	0x000b938b
   b4620:	2003e6f0 	.word	0x2003e6f0
   b4624:	000b444d 	.word	0x000b444d
   b4628:	2003e690 	.word	0x2003e690
   b462c:	000b93ba 	.word	0x000b93ba
   b4630:	000b93e5 	.word	0x000b93e5

000b4634 <_GLOBAL__sub_I_c_r>:


BleCharacteristic c_r;
BleCharacteristic c_w;
uint8_t ble_data[_APP_BLE_DATA_BUFFER_LEN_];
uint16_t ble_data_i;
   b4634:	b508      	push	{r3, lr}
BleCharacteristic c_r;
   b4636:	4804      	ldr	r0, [pc, #16]	; (b4648 <_GLOBAL__sub_I_c_r+0x14>)
   b4638:	f002 fae0 	bl	b6bfc <_ZN8particle17BleCharacteristicC1Ev>
uint16_t ble_data_i;
   b463c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
BleCharacteristic c_w;
   b4640:	4802      	ldr	r0, [pc, #8]	; (b464c <_GLOBAL__sub_I_c_r+0x18>)
   b4642:	f002 badb 	b.w	b6bfc <_ZN8particle17BleCharacteristicC1Ev>
   b4646:	bf00      	nop
   b4648:	2003e690 	.word	0x2003e690
   b464c:	2003e698 	.word	0x2003e698

000b4650 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4650:	b508      	push	{r3, lr}
   b4652:	4b02      	ldr	r3, [pc, #8]	; (b465c <HAL_USB_USART_Init+0xc>)
   b4654:	681b      	ldr	r3, [r3, #0]
   b4656:	681b      	ldr	r3, [r3, #0]
   b4658:	9301      	str	r3, [sp, #4]
   b465a:	bd08      	pop	{r3, pc}
   b465c:	0003024c 	.word	0x0003024c

000b4660 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4660:	b508      	push	{r3, lr}
   b4662:	4b02      	ldr	r3, [pc, #8]	; (b466c <HAL_USB_USART_Begin+0xc>)
   b4664:	681b      	ldr	r3, [r3, #0]
   b4666:	685b      	ldr	r3, [r3, #4]
   b4668:	9301      	str	r3, [sp, #4]
   b466a:	bd08      	pop	{r3, pc}
   b466c:	0003024c 	.word	0x0003024c

000b4670 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b4670:	b508      	push	{r3, lr}
   b4672:	4b02      	ldr	r3, [pc, #8]	; (b467c <HAL_USB_USART_End+0xc>)
   b4674:	681b      	ldr	r3, [r3, #0]
   b4676:	689b      	ldr	r3, [r3, #8]
   b4678:	9301      	str	r3, [sp, #4]
   b467a:	bd08      	pop	{r3, pc}
   b467c:	0003024c 	.word	0x0003024c

000b4680 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4680:	b508      	push	{r3, lr}
   b4682:	4b02      	ldr	r3, [pc, #8]	; (b468c <HAL_USB_USART_Available_Data+0xc>)
   b4684:	681b      	ldr	r3, [r3, #0]
   b4686:	691b      	ldr	r3, [r3, #16]
   b4688:	9301      	str	r3, [sp, #4]
   b468a:	bd08      	pop	{r3, pc}
   b468c:	0003024c 	.word	0x0003024c

000b4690 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4690:	b508      	push	{r3, lr}
   b4692:	4b02      	ldr	r3, [pc, #8]	; (b469c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4694:	681b      	ldr	r3, [r3, #0]
   b4696:	695b      	ldr	r3, [r3, #20]
   b4698:	9301      	str	r3, [sp, #4]
   b469a:	bd08      	pop	{r3, pc}
   b469c:	0003024c 	.word	0x0003024c

000b46a0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b46a0:	b508      	push	{r3, lr}
   b46a2:	4b02      	ldr	r3, [pc, #8]	; (b46ac <HAL_USB_USART_Receive_Data+0xc>)
   b46a4:	681b      	ldr	r3, [r3, #0]
   b46a6:	699b      	ldr	r3, [r3, #24]
   b46a8:	9301      	str	r3, [sp, #4]
   b46aa:	bd08      	pop	{r3, pc}
   b46ac:	0003024c 	.word	0x0003024c

000b46b0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b46b0:	b508      	push	{r3, lr}
   b46b2:	4b02      	ldr	r3, [pc, #8]	; (b46bc <HAL_USB_USART_Send_Data+0xc>)
   b46b4:	681b      	ldr	r3, [r3, #0]
   b46b6:	69db      	ldr	r3, [r3, #28]
   b46b8:	9301      	str	r3, [sp, #4]
   b46ba:	bd08      	pop	{r3, pc}
   b46bc:	0003024c 	.word	0x0003024c

000b46c0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b46c0:	b508      	push	{r3, lr}
   b46c2:	4b02      	ldr	r3, [pc, #8]	; (b46cc <HAL_USB_USART_Flush_Data+0xc>)
   b46c4:	681b      	ldr	r3, [r3, #0]
   b46c6:	6a1b      	ldr	r3, [r3, #32]
   b46c8:	9301      	str	r3, [sp, #4]
   b46ca:	bd08      	pop	{r3, pc}
   b46cc:	0003024c 	.word	0x0003024c

000b46d0 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b46d0:	b508      	push	{r3, lr}
   b46d2:	4b02      	ldr	r3, [pc, #8]	; (b46dc <hal_usart_end+0xc>)
   b46d4:	681b      	ldr	r3, [r3, #0]
   b46d6:	689b      	ldr	r3, [r3, #8]
   b46d8:	9301      	str	r3, [sp, #4]
   b46da:	bd08      	pop	{r3, pc}
   b46dc:	0003023c 	.word	0x0003023c

000b46e0 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b46e0:	b508      	push	{r3, lr}
   b46e2:	4b02      	ldr	r3, [pc, #8]	; (b46ec <hal_usart_write+0xc>)
   b46e4:	681b      	ldr	r3, [r3, #0]
   b46e6:	68db      	ldr	r3, [r3, #12]
   b46e8:	9301      	str	r3, [sp, #4]
   b46ea:	bd08      	pop	{r3, pc}
   b46ec:	0003023c 	.word	0x0003023c

000b46f0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b46f0:	b508      	push	{r3, lr}
   b46f2:	4b02      	ldr	r3, [pc, #8]	; (b46fc <hal_usart_available+0xc>)
   b46f4:	681b      	ldr	r3, [r3, #0]
   b46f6:	691b      	ldr	r3, [r3, #16]
   b46f8:	9301      	str	r3, [sp, #4]
   b46fa:	bd08      	pop	{r3, pc}
   b46fc:	0003023c 	.word	0x0003023c

000b4700 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4700:	b508      	push	{r3, lr}
   b4702:	4b02      	ldr	r3, [pc, #8]	; (b470c <hal_usart_read+0xc>)
   b4704:	681b      	ldr	r3, [r3, #0]
   b4706:	695b      	ldr	r3, [r3, #20]
   b4708:	9301      	str	r3, [sp, #4]
   b470a:	bd08      	pop	{r3, pc}
   b470c:	0003023c 	.word	0x0003023c

000b4710 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4710:	b508      	push	{r3, lr}
   b4712:	4b02      	ldr	r3, [pc, #8]	; (b471c <hal_usart_peek+0xc>)
   b4714:	681b      	ldr	r3, [r3, #0]
   b4716:	699b      	ldr	r3, [r3, #24]
   b4718:	9301      	str	r3, [sp, #4]
   b471a:	bd08      	pop	{r3, pc}
   b471c:	0003023c 	.word	0x0003023c

000b4720 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4720:	b508      	push	{r3, lr}
   b4722:	4b02      	ldr	r3, [pc, #8]	; (b472c <hal_usart_flush+0xc>)
   b4724:	681b      	ldr	r3, [r3, #0]
   b4726:	69db      	ldr	r3, [r3, #28]
   b4728:	9301      	str	r3, [sp, #4]
   b472a:	bd08      	pop	{r3, pc}
   b472c:	0003023c 	.word	0x0003023c

000b4730 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4730:	b508      	push	{r3, lr}
   b4732:	4b02      	ldr	r3, [pc, #8]	; (b473c <hal_usart_available_data_for_write+0xc>)
   b4734:	681b      	ldr	r3, [r3, #0]
   b4736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4738:	9301      	str	r3, [sp, #4]
   b473a:	bd08      	pop	{r3, pc}
   b473c:	0003023c 	.word	0x0003023c

000b4740 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b4740:	b508      	push	{r3, lr}
   b4742:	4b02      	ldr	r3, [pc, #8]	; (b474c <hal_usart_begin_config+0xc>)
   b4744:	681b      	ldr	r3, [r3, #0]
   b4746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4748:	9301      	str	r3, [sp, #4]
   b474a:	bd08      	pop	{r3, pc}
   b474c:	0003023c 	.word	0x0003023c

000b4750 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4750:	b508      	push	{r3, lr}
   b4752:	4b02      	ldr	r3, [pc, #8]	; (b475c <hal_usart_init_ex+0xc>)
   b4754:	681b      	ldr	r3, [r3, #0]
   b4756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4758:	9301      	str	r3, [sp, #4]
   b475a:	bd08      	pop	{r3, pc}
   b475c:	0003023c 	.word	0x0003023c

000b4760 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4760:	b508      	push	{r3, lr}
   b4762:	4b02      	ldr	r3, [pc, #8]	; (b476c <inet_inet_ntop+0xc>)
   b4764:	681b      	ldr	r3, [r3, #0]
   b4766:	695b      	ldr	r3, [r3, #20]
   b4768:	9301      	str	r3, [sp, #4]
   b476a:	bd08      	pop	{r3, pc}
   b476c:	00030264 	.word	0x00030264

000b4770 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4770:	b508      	push	{r3, lr}
   b4772:	4b02      	ldr	r3, [pc, #8]	; (b477c <os_mutex_recursive_create+0xc>)
   b4774:	681b      	ldr	r3, [r3, #0]
   b4776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4778:	9301      	str	r3, [sp, #4]
   b477a:	bd08      	pop	{r3, pc}
   b477c:	00030248 	.word	0x00030248

000b4780 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b4780:	b508      	push	{r3, lr}
   b4782:	4b02      	ldr	r3, [pc, #8]	; (b478c <os_mutex_recursive_destroy+0xc>)
   b4784:	681b      	ldr	r3, [r3, #0]
   b4786:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b4788:	9301      	str	r3, [sp, #4]
   b478a:	bd08      	pop	{r3, pc}
   b478c:	00030248 	.word	0x00030248

000b4790 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b4790:	b508      	push	{r3, lr}
   b4792:	4b02      	ldr	r3, [pc, #8]	; (b479c <os_mutex_recursive_lock+0xc>)
   b4794:	681b      	ldr	r3, [r3, #0]
   b4796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4798:	9301      	str	r3, [sp, #4]
   b479a:	bd08      	pop	{r3, pc}
   b479c:	00030248 	.word	0x00030248

000b47a0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b47a0:	b508      	push	{r3, lr}
   b47a2:	4b02      	ldr	r3, [pc, #8]	; (b47ac <os_mutex_recursive_unlock+0xc>)
   b47a4:	681b      	ldr	r3, [r3, #0]
   b47a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b47a8:	9301      	str	r3, [sp, #4]
   b47aa:	bd08      	pop	{r3, pc}
   b47ac:	00030248 	.word	0x00030248

000b47b0 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b47b0:	b508      	push	{r3, lr}
   b47b2:	4b02      	ldr	r3, [pc, #8]	; (b47bc <hal_ble_stack_init+0xc>)
   b47b4:	681b      	ldr	r3, [r3, #0]
   b47b6:	689b      	ldr	r3, [r3, #8]
   b47b8:	9301      	str	r3, [sp, #4]
   b47ba:	bd08      	pop	{r3, pc}
   b47bc:	00030278 	.word	0x00030278

000b47c0 <hal_ble_gap_set_scan_parameters>:
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
DYNALIB_FN(25, hal_ble, hal_ble_gap_set_auto_advertise, int(hal_ble_auto_adv_cfg_t, void*))
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
   b47c0:	b508      	push	{r3, lr}
   b47c2:	4b02      	ldr	r3, [pc, #8]	; (b47cc <hal_ble_gap_set_scan_parameters+0xc>)
   b47c4:	681b      	ldr	r3, [r3, #0]
   b47c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   b47c8:	9301      	str	r3, [sp, #4]
   b47ca:	bd08      	pop	{r3, pc}
   b47cc:	00030278 	.word	0x00030278

000b47d0 <hal_ble_gap_get_scan_parameters>:
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
   b47d0:	b508      	push	{r3, lr}
   b47d2:	4b02      	ldr	r3, [pc, #8]	; (b47dc <hal_ble_gap_get_scan_parameters+0xc>)
   b47d4:	681b      	ldr	r3, [r3, #0]
   b47d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b47d8:	9301      	str	r3, [sp, #4]
   b47da:	bd08      	pop	{r3, pc}
   b47dc:	00030278 	.word	0x00030278

000b47e0 <hal_ble_gap_start_scan>:
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
   b47e0:	b508      	push	{r3, lr}
   b47e2:	4b02      	ldr	r3, [pc, #8]	; (b47ec <hal_ble_gap_start_scan+0xc>)
   b47e4:	681b      	ldr	r3, [r3, #0]
   b47e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b47e8:	9301      	str	r3, [sp, #4]
   b47ea:	bd08      	pop	{r3, pc}
   b47ec:	00030278 	.word	0x00030278

000b47f0 <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
   b47f0:	b508      	push	{r3, lr}
   b47f2:	4b03      	ldr	r3, [pc, #12]	; (b4800 <hal_ble_gap_stop_scan+0x10>)
   b47f4:	681b      	ldr	r3, [r3, #0]
   b47f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   b47fa:	9301      	str	r3, [sp, #4]
   b47fc:	bd08      	pop	{r3, pc}
   b47fe:	0000      	.short	0x0000
   b4800:	00030278 	.word	0x00030278

000b4804 <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b4804:	b508      	push	{r3, lr}
   b4806:	4b03      	ldr	r3, [pc, #12]	; (b4814 <hal_ble_gap_disconnect+0x10>)
   b4808:	681b      	ldr	r3, [r3, #0]
   b480a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b480e:	9301      	str	r3, [sp, #4]
   b4810:	bd08      	pop	{r3, pc}
   b4812:	0000      	.short	0x0000
   b4814:	00030278 	.word	0x00030278

000b4818 <hal_ble_gatt_client_discover_all_services>:
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
DYNALIB_FN(46, hal_ble, hal_ble_gatt_server_get_characteristic_value, ssize_t(hal_ble_attr_handle_t, uint8_t*, size_t, void*))
DYNALIB_FN(47, hal_ble, hal_ble_gatt_client_discover_all_services, int(hal_ble_conn_handle_t, hal_ble_on_disc_service_cb_t, void*, void*))
   b4818:	b508      	push	{r3, lr}
   b481a:	4b03      	ldr	r3, [pc, #12]	; (b4828 <hal_ble_gatt_client_discover_all_services+0x10>)
   b481c:	681b      	ldr	r3, [r3, #0]
   b481e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   b4822:	9301      	str	r3, [sp, #4]
   b4824:	bd08      	pop	{r3, pc}
   b4826:	0000      	.short	0x0000
   b4828:	00030278 	.word	0x00030278

000b482c <hal_ble_gatt_client_discover_characteristics>:
DYNALIB_FN(48, hal_ble, hal_ble_gatt_client_discover_service_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_uuid_t*, hal_ble_on_disc_service_cb_t, void*, void*))
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
   b482c:	b508      	push	{r3, lr}
   b482e:	4b03      	ldr	r3, [pc, #12]	; (b483c <hal_ble_gatt_client_discover_characteristics+0x10>)
   b4830:	681b      	ldr	r3, [r3, #0]
   b4832:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   b4836:	9301      	str	r3, [sp, #4]
   b4838:	bd08      	pop	{r3, pc}
   b483a:	0000      	.short	0x0000
   b483c:	00030278 	.word	0x00030278

000b4840 <hal_ble_gatt_client_read>:
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))
   b4840:	b508      	push	{r3, lr}
   b4842:	4b03      	ldr	r3, [pc, #12]	; (b4850 <hal_ble_gatt_client_read+0x10>)
   b4844:	681b      	ldr	r3, [r3, #0]
   b4846:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   b484a:	9301      	str	r3, [sp, #4]
   b484c:	bd08      	pop	{r3, pc}
   b484e:	0000      	.short	0x0000
   b4850:	00030278 	.word	0x00030278

000b4854 <hal_ble_gap_connect>:

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
   b4854:	b508      	push	{r3, lr}
   b4856:	4b03      	ldr	r3, [pc, #12]	; (b4864 <hal_ble_gap_connect+0x10>)
   b4858:	681b      	ldr	r3, [r3, #0]
   b485a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
   b485e:	9301      	str	r3, [sp, #4]
   b4860:	bd08      	pop	{r3, pc}
   b4862:	0000      	.short	0x0000
   b4864:	00030278 	.word	0x00030278

000b4868 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b4868:	b508      	push	{r3, lr}
   b486a:	4b03      	ldr	r3, [pc, #12]	; (b4878 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b486c:	681b      	ldr	r3, [r3, #0]
   b486e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b4872:	9301      	str	r3, [sp, #4]
   b4874:	bd08      	pop	{r3, pc}
   b4876:	0000      	.short	0x0000
   b4878:	00030278 	.word	0x00030278

000b487c <hal_ble_gatt_client_configure_cccd>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
   b487c:	b508      	push	{r3, lr}
   b487e:	4b03      	ldr	r3, [pc, #12]	; (b488c <hal_ble_gatt_client_configure_cccd+0x10>)
   b4880:	681b      	ldr	r3, [r3, #0]
   b4882:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
   b4886:	9301      	str	r3, [sp, #4]
   b4888:	bd08      	pop	{r3, pc}
   b488a:	0000      	.short	0x0000
   b488c:	00030278 	.word	0x00030278

000b4890 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4890:	b508      	push	{r3, lr}
   b4892:	4b02      	ldr	r3, [pc, #8]	; (b489c <HAL_RNG_GetRandomNumber+0xc>)
   b4894:	681b      	ldr	r3, [r3, #0]
   b4896:	685b      	ldr	r3, [r3, #4]
   b4898:	9301      	str	r3, [sp, #4]
   b489a:	bd08      	pop	{r3, pc}
   b489c:	00030218 	.word	0x00030218

000b48a0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b48a0:	b508      	push	{r3, lr}
   b48a2:	4b02      	ldr	r3, [pc, #8]	; (b48ac <HAL_Delay_Microseconds+0xc>)
   b48a4:	681b      	ldr	r3, [r3, #0]
   b48a6:	68db      	ldr	r3, [r3, #12]
   b48a8:	9301      	str	r3, [sp, #4]
   b48aa:	bd08      	pop	{r3, pc}
   b48ac:	00030218 	.word	0x00030218

000b48b0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b48b0:	b508      	push	{r3, lr}
   b48b2:	4b02      	ldr	r3, [pc, #8]	; (b48bc <HAL_Timer_Get_Milli_Seconds+0xc>)
   b48b4:	681b      	ldr	r3, [r3, #0]
   b48b6:	695b      	ldr	r3, [r3, #20]
   b48b8:	9301      	str	r3, [sp, #4]
   b48ba:	bd08      	pop	{r3, pc}
   b48bc:	00030218 	.word	0x00030218

000b48c0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b48c0:	b508      	push	{r3, lr}
   b48c2:	4b02      	ldr	r3, [pc, #8]	; (b48cc <netdb_freeaddrinfo+0xc>)
   b48c4:	681b      	ldr	r3, [r3, #0]
   b48c6:	689b      	ldr	r3, [r3, #8]
   b48c8:	9301      	str	r3, [sp, #4]
   b48ca:	bd08      	pop	{r3, pc}
   b48cc:	00030268 	.word	0x00030268

000b48d0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b48d0:	b508      	push	{r3, lr}
   b48d2:	4b02      	ldr	r3, [pc, #8]	; (b48dc <netdb_getaddrinfo+0xc>)
   b48d4:	681b      	ldr	r3, [r3, #0]
   b48d6:	68db      	ldr	r3, [r3, #12]
   b48d8:	9301      	str	r3, [sp, #4]
   b48da:	bd08      	pop	{r3, pc}
   b48dc:	00030268 	.word	0x00030268

000b48e0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b48e0:	b508      	push	{r3, lr}
   b48e2:	4b02      	ldr	r3, [pc, #8]	; (b48ec <panic_+0xc>)
   b48e4:	681b      	ldr	r3, [r3, #0]
   b48e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b48e8:	9301      	str	r3, [sp, #4]
   b48ea:	bd08      	pop	{r3, pc}
   b48ec:	00030260 	.word	0x00030260

000b48f0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b48f0:	b508      	push	{r3, lr}
   b48f2:	4b02      	ldr	r3, [pc, #8]	; (b48fc <log_message+0xc>)
   b48f4:	681b      	ldr	r3, [r3, #0]
   b48f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b48f8:	9301      	str	r3, [sp, #4]
   b48fa:	bd08      	pop	{r3, pc}
   b48fc:	00030260 	.word	0x00030260

000b4900 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b4900:	b508      	push	{r3, lr}
   b4902:	4b02      	ldr	r3, [pc, #8]	; (b490c <log_message_v+0xc>)
   b4904:	681b      	ldr	r3, [r3, #0]
   b4906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4908:	9301      	str	r3, [sp, #4]
   b490a:	bd08      	pop	{r3, pc}
   b490c:	00030260 	.word	0x00030260

000b4910 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b4910:	b508      	push	{r3, lr}
   b4912:	4b02      	ldr	r3, [pc, #8]	; (b491c <log_level_name+0xc>)
   b4914:	681b      	ldr	r3, [r3, #0]
   b4916:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b4918:	9301      	str	r3, [sp, #4]
   b491a:	bd08      	pop	{r3, pc}
   b491c:	00030260 	.word	0x00030260

000b4920 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b4920:	b508      	push	{r3, lr}
   b4922:	4b02      	ldr	r3, [pc, #8]	; (b492c <log_set_callbacks+0xc>)
   b4924:	681b      	ldr	r3, [r3, #0]
   b4926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b4928:	9301      	str	r3, [sp, #4]
   b492a:	bd08      	pop	{r3, pc}
   b492c:	00030260 	.word	0x00030260

000b4930 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4930:	b508      	push	{r3, lr}
   b4932:	4b02      	ldr	r3, [pc, #8]	; (b493c <spark_set_random_seed_from_cloud_handler+0xc>)
   b4934:	681b      	ldr	r3, [r3, #0]
   b4936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4938:	9301      	str	r3, [sp, #4]
   b493a:	bd08      	pop	{r3, pc}
   b493c:	00030244 	.word	0x00030244

000b4940 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4940:	b508      	push	{r3, lr}
   b4942:	4b02      	ldr	r3, [pc, #8]	; (b494c <network_connect+0xc>)
   b4944:	681b      	ldr	r3, [r3, #0]
   b4946:	685b      	ldr	r3, [r3, #4]
   b4948:	9301      	str	r3, [sp, #4]
   b494a:	bd08      	pop	{r3, pc}
   b494c:	00030240 	.word	0x00030240

000b4950 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4950:	b508      	push	{r3, lr}
   b4952:	4b02      	ldr	r3, [pc, #8]	; (b495c <network_connecting+0xc>)
   b4954:	681b      	ldr	r3, [r3, #0]
   b4956:	689b      	ldr	r3, [r3, #8]
   b4958:	9301      	str	r3, [sp, #4]
   b495a:	bd08      	pop	{r3, pc}
   b495c:	00030240 	.word	0x00030240

000b4960 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4960:	b508      	push	{r3, lr}
   b4962:	4b02      	ldr	r3, [pc, #8]	; (b496c <network_disconnect+0xc>)
   b4964:	681b      	ldr	r3, [r3, #0]
   b4966:	68db      	ldr	r3, [r3, #12]
   b4968:	9301      	str	r3, [sp, #4]
   b496a:	bd08      	pop	{r3, pc}
   b496c:	00030240 	.word	0x00030240

000b4970 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4970:	b508      	push	{r3, lr}
   b4972:	4b02      	ldr	r3, [pc, #8]	; (b497c <network_ready+0xc>)
   b4974:	681b      	ldr	r3, [r3, #0]
   b4976:	691b      	ldr	r3, [r3, #16]
   b4978:	9301      	str	r3, [sp, #4]
   b497a:	bd08      	pop	{r3, pc}
   b497c:	00030240 	.word	0x00030240

000b4980 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4980:	b508      	push	{r3, lr}
   b4982:	4b02      	ldr	r3, [pc, #8]	; (b498c <network_on+0xc>)
   b4984:	681b      	ldr	r3, [r3, #0]
   b4986:	695b      	ldr	r3, [r3, #20]
   b4988:	9301      	str	r3, [sp, #4]
   b498a:	bd08      	pop	{r3, pc}
   b498c:	00030240 	.word	0x00030240

000b4990 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4990:	b508      	push	{r3, lr}
   b4992:	4b02      	ldr	r3, [pc, #8]	; (b499c <network_off+0xc>)
   b4994:	681b      	ldr	r3, [r3, #0]
   b4996:	699b      	ldr	r3, [r3, #24]
   b4998:	9301      	str	r3, [sp, #4]
   b499a:	bd08      	pop	{r3, pc}
   b499c:	00030240 	.word	0x00030240

000b49a0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b49a0:	b508      	push	{r3, lr}
   b49a2:	4b02      	ldr	r3, [pc, #8]	; (b49ac <network_listen+0xc>)
   b49a4:	681b      	ldr	r3, [r3, #0]
   b49a6:	69db      	ldr	r3, [r3, #28]
   b49a8:	9301      	str	r3, [sp, #4]
   b49aa:	bd08      	pop	{r3, pc}
   b49ac:	00030240 	.word	0x00030240

000b49b0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b49b0:	b508      	push	{r3, lr}
   b49b2:	4b02      	ldr	r3, [pc, #8]	; (b49bc <network_listening+0xc>)
   b49b4:	681b      	ldr	r3, [r3, #0]
   b49b6:	6a1b      	ldr	r3, [r3, #32]
   b49b8:	9301      	str	r3, [sp, #4]
   b49ba:	bd08      	pop	{r3, pc}
   b49bc:	00030240 	.word	0x00030240

000b49c0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b49c0:	b508      	push	{r3, lr}
   b49c2:	4b02      	ldr	r3, [pc, #8]	; (b49cc <network_set_listen_timeout+0xc>)
   b49c4:	681b      	ldr	r3, [r3, #0]
   b49c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b49c8:	9301      	str	r3, [sp, #4]
   b49ca:	bd08      	pop	{r3, pc}
   b49cc:	00030240 	.word	0x00030240

000b49d0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b49d0:	b508      	push	{r3, lr}
   b49d2:	4b02      	ldr	r3, [pc, #8]	; (b49dc <network_get_listen_timeout+0xc>)
   b49d4:	681b      	ldr	r3, [r3, #0]
   b49d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b49d8:	9301      	str	r3, [sp, #4]
   b49da:	bd08      	pop	{r3, pc}
   b49dc:	00030240 	.word	0x00030240

000b49e0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b49e0:	b508      	push	{r3, lr}
   b49e2:	4b02      	ldr	r3, [pc, #8]	; (b49ec <network_is_on+0xc>)
   b49e4:	681b      	ldr	r3, [r3, #0]
   b49e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b49e8:	9301      	str	r3, [sp, #4]
   b49ea:	bd08      	pop	{r3, pc}
   b49ec:	00030240 	.word	0x00030240

000b49f0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b49f0:	b508      	push	{r3, lr}
   b49f2:	4b02      	ldr	r3, [pc, #8]	; (b49fc <network_is_off+0xc>)
   b49f4:	681b      	ldr	r3, [r3, #0]
   b49f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b49f8:	9301      	str	r3, [sp, #4]
   b49fa:	bd08      	pop	{r3, pc}
   b49fc:	00030240 	.word	0x00030240

000b4a00 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4a00:	b508      	push	{r3, lr}
   b4a02:	4b02      	ldr	r3, [pc, #8]	; (b4a0c <set_system_mode+0xc>)
   b4a04:	681b      	ldr	r3, [r3, #0]
   b4a06:	685b      	ldr	r3, [r3, #4]
   b4a08:	9301      	str	r3, [sp, #4]
   b4a0a:	bd08      	pop	{r3, pc}
   b4a0c:	00030220 	.word	0x00030220

000b4a10 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4a10:	b508      	push	{r3, lr}
   b4a12:	4b02      	ldr	r3, [pc, #8]	; (b4a1c <system_delay_ms+0xc>)
   b4a14:	681b      	ldr	r3, [r3, #0]
   b4a16:	695b      	ldr	r3, [r3, #20]
   b4a18:	9301      	str	r3, [sp, #4]
   b4a1a:	bd08      	pop	{r3, pc}
   b4a1c:	00030220 	.word	0x00030220

000b4a20 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b4a20:	b508      	push	{r3, lr}
   b4a22:	4b02      	ldr	r3, [pc, #8]	; (b4a2c <system_thread_set_state+0xc>)
   b4a24:	681b      	ldr	r3, [r3, #0]
   b4a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4a28:	9301      	str	r3, [sp, #4]
   b4a2a:	bd08      	pop	{r3, pc}
   b4a2c:	00030220 	.word	0x00030220

000b4a30 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4a30:	b508      	push	{r3, lr}
   b4a32:	4b03      	ldr	r3, [pc, #12]	; (b4a40 <system_ctrl_set_app_request_handler+0x10>)
   b4a34:	681b      	ldr	r3, [r3, #0]
   b4a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4a3a:	9301      	str	r3, [sp, #4]
   b4a3c:	bd08      	pop	{r3, pc}
   b4a3e:	0000      	.short	0x0000
   b4a40:	00030220 	.word	0x00030220

000b4a44 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4a44:	b508      	push	{r3, lr}
   b4a46:	4b03      	ldr	r3, [pc, #12]	; (b4a54 <system_ctrl_set_result+0x10>)
   b4a48:	681b      	ldr	r3, [r3, #0]
   b4a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4a4e:	9301      	str	r3, [sp, #4]
   b4a50:	bd08      	pop	{r3, pc}
   b4a52:	0000      	.short	0x0000
   b4a54:	00030220 	.word	0x00030220

000b4a58 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4a58:	b508      	push	{r3, lr}
   b4a5a:	4b02      	ldr	r3, [pc, #8]	; (b4a64 <malloc+0xc>)
   b4a5c:	681b      	ldr	r3, [r3, #0]
   b4a5e:	681b      	ldr	r3, [r3, #0]
   b4a60:	9301      	str	r3, [sp, #4]
   b4a62:	bd08      	pop	{r3, pc}
   b4a64:	0003021c 	.word	0x0003021c

000b4a68 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4a68:	b508      	push	{r3, lr}
   b4a6a:	4b02      	ldr	r3, [pc, #8]	; (b4a74 <free+0xc>)
   b4a6c:	681b      	ldr	r3, [r3, #0]
   b4a6e:	685b      	ldr	r3, [r3, #4]
   b4a70:	9301      	str	r3, [sp, #4]
   b4a72:	bd08      	pop	{r3, pc}
   b4a74:	0003021c 	.word	0x0003021c

000b4a78 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b4a78:	b508      	push	{r3, lr}
   b4a7a:	4b02      	ldr	r3, [pc, #8]	; (b4a84 <realloc+0xc>)
   b4a7c:	681b      	ldr	r3, [r3, #0]
   b4a7e:	689b      	ldr	r3, [r3, #8]
   b4a80:	9301      	str	r3, [sp, #4]
   b4a82:	bd08      	pop	{r3, pc}
   b4a84:	0003021c 	.word	0x0003021c

000b4a88 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b4a88:	b508      	push	{r3, lr}
   b4a8a:	4b02      	ldr	r3, [pc, #8]	; (b4a94 <vsnprintf+0xc>)
   b4a8c:	681b      	ldr	r3, [r3, #0]
   b4a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4a90:	9301      	str	r3, [sp, #4]
   b4a92:	bd08      	pop	{r3, pc}
   b4a94:	0003021c 	.word	0x0003021c

000b4a98 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b4a98:	b508      	push	{r3, lr}
   b4a9a:	4b02      	ldr	r3, [pc, #8]	; (b4aa4 <abort+0xc>)
   b4a9c:	681b      	ldr	r3, [r3, #0]
   b4a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4aa0:	9301      	str	r3, [sp, #4]
   b4aa2:	bd08      	pop	{r3, pc}
   b4aa4:	0003021c 	.word	0x0003021c

000b4aa8 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b4aa8:	b508      	push	{r3, lr}
   b4aaa:	4b02      	ldr	r3, [pc, #8]	; (b4ab4 <__errno+0xc>)
   b4aac:	681b      	ldr	r3, [r3, #0]
   b4aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4ab0:	9301      	str	r3, [sp, #4]
   b4ab2:	bd08      	pop	{r3, pc}
   b4ab4:	0003021c 	.word	0x0003021c

000b4ab8 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4ab8:	b508      	push	{r3, lr}
   b4aba:	4b02      	ldr	r3, [pc, #8]	; (b4ac4 <__assert_func+0xc>)
   b4abc:	681b      	ldr	r3, [r3, #0]
   b4abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4ac0:	9301      	str	r3, [sp, #4]
   b4ac2:	bd08      	pop	{r3, pc}
   b4ac4:	0003021c 	.word	0x0003021c

000b4ac8 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4ac8:	b508      	push	{r3, lr}
   b4aca:	4b02      	ldr	r3, [pc, #8]	; (b4ad4 <newlib_impure_ptr_callback+0xc>)
   b4acc:	681b      	ldr	r3, [r3, #0]
   b4ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4ad0:	9301      	str	r3, [sp, #4]
   b4ad2:	bd08      	pop	{r3, pc}
   b4ad4:	0003021c 	.word	0x0003021c

000b4ad8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b4ad8:	f100 0310 	add.w	r3, r0, #16
   b4adc:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b4ade:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b4ae2:	2901      	cmp	r1, #1
   b4ae4:	4618      	mov	r0, r3
   b4ae6:	d108      	bne.n	b4afa <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b4ae8:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b4aec:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b4af0:	3a01      	subs	r2, #1
   b4af2:	f103 0310 	add.w	r3, r3, #16
   b4af6:	d1f2      	bne.n	b4ade <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b4af8:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b4afa:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b4afc:	bf04      	itt	eq
   b4afe:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b4b02:	1852      	addeq	r2, r2, r1
   b4b04:	e7f4      	b.n	b4af0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b4b06 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b4b06:	b40e      	push	{r1, r2, r3}
   b4b08:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4b0a:	b088      	sub	sp, #32
   b4b0c:	af00      	add	r7, sp, #0
   b4b0e:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b4b12:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b4b14:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b4b18:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b4b1a:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b4b1c:	462b      	mov	r3, r5
   b4b1e:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b4b20:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b4b22:	f7ff ffb1 	bl	b4a88 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b4b26:	280f      	cmp	r0, #15
   b4b28:	687a      	ldr	r2, [r7, #4]
   b4b2a:	d91a      	bls.n	b4b62 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b4b2c:	f100 0308 	add.w	r3, r0, #8
   b4b30:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b4b34:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b4b36:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b4b3a:	1c41      	adds	r1, r0, #1
   b4b3c:	462b      	mov	r3, r5
   b4b3e:	4668      	mov	r0, sp
        va_start(args, fmt);
   b4b40:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b4b42:	f7ff ffa1 	bl	b4a88 <vsnprintf>
        if (n > 0) {
   b4b46:	1e02      	subs	r2, r0, #0
   b4b48:	dd04      	ble.n	b4b54 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b4b4a:	6823      	ldr	r3, [r4, #0]
   b4b4c:	4669      	mov	r1, sp
   b4b4e:	689b      	ldr	r3, [r3, #8]
   b4b50:	4620      	mov	r0, r4
   b4b52:	4798      	blx	r3
   b4b54:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b4b56:	3720      	adds	r7, #32
   b4b58:	46bd      	mov	sp, r7
   b4b5a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b4b5e:	b003      	add	sp, #12
   b4b60:	4770      	bx	lr
    } else if (n > 0) {
   b4b62:	2800      	cmp	r0, #0
   b4b64:	d0f7      	beq.n	b4b56 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b4b66:	6823      	ldr	r3, [r4, #0]
   b4b68:	4602      	mov	r2, r0
   b4b6a:	689b      	ldr	r3, [r3, #8]
   b4b6c:	f107 0110 	add.w	r1, r7, #16
   b4b70:	4620      	mov	r0, r4
   b4b72:	4798      	blx	r3
}
   b4b74:	e7ef      	b.n	b4b56 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b4b76 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b4b76:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b4b78:	6843      	ldr	r3, [r0, #4]
   b4b7a:	3b01      	subs	r3, #1
    {
   b4b7c:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b4b7e:	6043      	str	r3, [r0, #4]
   b4b80:	b963      	cbnz	r3, b4b9c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b4b82:	6803      	ldr	r3, [r0, #0]
   b4b84:	689b      	ldr	r3, [r3, #8]
   b4b86:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4b88:	68a3      	ldr	r3, [r4, #8]
   b4b8a:	3b01      	subs	r3, #1
   b4b8c:	60a3      	str	r3, [r4, #8]
   b4b8e:	b92b      	cbnz	r3, b4b9c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b4b90:	6823      	ldr	r3, [r4, #0]
   b4b92:	4620      	mov	r0, r4
   b4b94:	68db      	ldr	r3, [r3, #12]
        }
    }
   b4b96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b4b9a:	4718      	bx	r3
    }
   b4b9c:	bd10      	pop	{r4, pc}

000b4b9e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b4b9e:	b538      	push	{r3, r4, r5, lr}
   b4ba0:	680b      	ldr	r3, [r1, #0]
   b4ba2:	6003      	str	r3, [r0, #0]
   b4ba4:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b4ba6:	6843      	ldr	r3, [r0, #4]
   b4ba8:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b4baa:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b4bac:	d008      	beq.n	b4bc0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b4bae:	b115      	cbz	r5, b4bb6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b4bb0:	686b      	ldr	r3, [r5, #4]
   b4bb2:	3301      	adds	r3, #1
   b4bb4:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b4bb6:	6860      	ldr	r0, [r4, #4]
   b4bb8:	b108      	cbz	r0, b4bbe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b4bba:	f7ff ffdc 	bl	b4b76 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b4bbe:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b4bc0:	bd38      	pop	{r3, r4, r5, pc}

000b4bc2 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   b4bc2:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b4bc4:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b4bc6:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b4bca:	689b      	ldr	r3, [r3, #8]
   b4bcc:	2201      	movs	r2, #1
   b4bce:	f10d 0107 	add.w	r1, sp, #7
   b4bd2:	4798      	blx	r3
}
   b4bd4:	b003      	add	sp, #12
   b4bd6:	f85d fb04 	ldr.w	pc, [sp], #4

000b4bda <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b4bda:	460b      	mov	r3, r1
   b4bdc:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b4bde:	2200      	movs	r2, #0
   b4be0:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b4be2:	e9c0 2200 	strd	r2, r2, [r0]
   b4be6:	4604      	mov	r4, r0
        t_ = t;
   b4be8:	6083      	str	r3, [r0, #8]
    if (t) {
   b4bea:	b90b      	cbnz	r3, b4bf0 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b4bec:	4620      	mov	r0, r4
   b4bee:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b4bf0:	f7ff ffd5 	bl	b4b9e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b4bf4:	e7fa      	b.n	b4bec <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b4bf6 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b4bf6:	6883      	ldr	r3, [r0, #8]
   b4bf8:	b1eb      	cbz	r3, b4c36 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b4bfa:	781a      	ldrb	r2, [r3, #0]
   b4bfc:	2a03      	cmp	r2, #3
   b4bfe:	d81a      	bhi.n	b4c36 <_ZNK5spark9JSONValue4typeEv+0x40>
   b4c00:	e8df f002 	tbb	[pc, r2]
   b4c04:	1b021704 	.word	0x1b021704
   b4c08:	2005      	movs	r0, #5
   b4c0a:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b4c0c:	6802      	ldr	r2, [r0, #0]
   b4c0e:	685b      	ldr	r3, [r3, #4]
   b4c10:	6852      	ldr	r2, [r2, #4]
   b4c12:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b4c14:	282d      	cmp	r0, #45	; 0x2d
   b4c16:	d012      	beq.n	b4c3e <_ZNK5spark9JSONValue4typeEv+0x48>
   b4c18:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b4c1c:	2b09      	cmp	r3, #9
   b4c1e:	d90e      	bls.n	b4c3e <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b4c20:	2874      	cmp	r0, #116	; 0x74
   b4c22:	d00e      	beq.n	b4c42 <_ZNK5spark9JSONValue4typeEv+0x4c>
   b4c24:	2866      	cmp	r0, #102	; 0x66
   b4c26:	d00c      	beq.n	b4c42 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b4c28:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b4c2c:	4258      	negs	r0, r3
   b4c2e:	4158      	adcs	r0, r3
   b4c30:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b4c32:	2006      	movs	r0, #6
   b4c34:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b4c36:	2000      	movs	r0, #0
   b4c38:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b4c3a:	2004      	movs	r0, #4
   b4c3c:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b4c3e:	2003      	movs	r0, #3
   b4c40:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b4c42:	2002      	movs	r0, #2
}
   b4c44:	4770      	bx	lr

000b4c46 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b4c46:	b510      	push	{r4, lr}
   b4c48:	4604      	mov	r4, r0
    switch (type()) {
   b4c4a:	f7ff ffd4 	bl	b4bf6 <_ZNK5spark9JSONValue4typeEv>
   b4c4e:	2802      	cmp	r0, #2
   b4c50:	d00e      	beq.n	b4c70 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b4c52:	1ec3      	subs	r3, r0, #3
   b4c54:	b2db      	uxtb	r3, r3
   b4c56:	2b01      	cmp	r3, #1
   b4c58:	d814      	bhi.n	b4c84 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b4c5a:	6822      	ldr	r2, [r4, #0]
   b4c5c:	68a3      	ldr	r3, [r4, #8]
   b4c5e:	6850      	ldr	r0, [r2, #4]
   b4c60:	685b      	ldr	r3, [r3, #4]
}
   b4c62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b4c66:	220a      	movs	r2, #10
   b4c68:	2100      	movs	r1, #0
   b4c6a:	4418      	add	r0, r3
   b4c6c:	f004 ba90 	b.w	b9190 <strtol>
        const char* const s = d_->json + t_->start;
   b4c70:	6822      	ldr	r2, [r4, #0]
   b4c72:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b4c74:	6852      	ldr	r2, [r2, #4]
   b4c76:	685b      	ldr	r3, [r3, #4]
   b4c78:	5cd0      	ldrb	r0, [r2, r3]
   b4c7a:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b4c7e:	4258      	negs	r0, r3
   b4c80:	4158      	adcs	r0, r3
}
   b4c82:	bd10      	pop	{r4, pc}
    switch (type()) {
   b4c84:	2000      	movs	r0, #0
   b4c86:	e7fc      	b.n	b4c82 <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b4c88 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b4c88:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b4c8a:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b4c8c:	e9c0 3300 	strd	r3, r3, [r0]
   b4c90:	4604      	mov	r4, r0
        n_(0) {
   b4c92:	480e      	ldr	r0, [pc, #56]	; (b4ccc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b4c94:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b4c98:	b1a9      	cbz	r1, b4cc6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b4c9a:	780b      	ldrb	r3, [r1, #0]
   b4c9c:	2b03      	cmp	r3, #3
   b4c9e:	d006      	beq.n	b4cae <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b4ca0:	b98b      	cbnz	r3, b4cc6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b4ca2:	6813      	ldr	r3, [r2, #0]
   b4ca4:	6858      	ldr	r0, [r3, #4]
   b4ca6:	684b      	ldr	r3, [r1, #4]
   b4ca8:	5cc3      	ldrb	r3, [r0, r3]
   b4caa:	2b6e      	cmp	r3, #110	; 0x6e
   b4cac:	d007      	beq.n	b4cbe <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b4cae:	6813      	ldr	r3, [r2, #0]
   b4cb0:	684d      	ldr	r5, [r1, #4]
   b4cb2:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b4cb4:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b4cb6:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b4cb8:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b4cba:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b4cbc:	60e3      	str	r3, [r4, #12]
   b4cbe:	4611      	mov	r1, r2
   b4cc0:	4620      	mov	r0, r4
   b4cc2:	f7ff ff6c 	bl	b4b9e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b4cc6:	4620      	mov	r0, r4
   b4cc8:	bd38      	pop	{r3, r4, r5, pc}
   b4cca:	bf00      	nop
   b4ccc:	000b92b9 	.word	0x000b92b9

000b4cd0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b4cd0:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b4cd2:	2500      	movs	r5, #0
   b4cd4:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b4cd6:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b4cda:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b4cde:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b4ce2:	4604      	mov	r4, r0
   b4ce4:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b4ce6:	b14b      	cbz	r3, b4cfc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b4ce8:	781a      	ldrb	r2, [r3, #0]
   b4cea:	2a01      	cmp	r2, #1
   b4cec:	d106      	bne.n	b4cfc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b4cee:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b4cf2:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b4cf4:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b4cf6:	6143      	str	r3, [r0, #20]
   b4cf8:	f7ff ff51 	bl	b4b9e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b4cfc:	4620      	mov	r0, r4
   b4cfe:	bd38      	pop	{r3, r4, r5, pc}

000b4d00 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b4d00:	b510      	push	{r4, lr}
    if (!n_) {
   b4d02:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b4d04:	4604      	mov	r4, r0
    if (!n_) {
   b4d06:	b163      	cbz	r3, b4d22 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b4d08:	6880      	ldr	r0, [r0, #8]
   b4d0a:	60e0      	str	r0, [r4, #12]
    --n_;
   b4d0c:	3b01      	subs	r3, #1
    ++t_;
   b4d0e:	3010      	adds	r0, #16
   b4d10:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b4d12:	6120      	str	r0, [r4, #16]
    --n_;
   b4d14:	6163      	str	r3, [r4, #20]
    if (n_) {
   b4d16:	b113      	cbz	r3, b4d1e <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b4d18:	f7ff fede 	bl	b4ad8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b4d1c:	60a0      	str	r0, [r4, #8]
    return true;
   b4d1e:	2001      	movs	r0, #1
   b4d20:	e000      	b.n	b4d24 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b4d22:	4618      	mov	r0, r3
}
   b4d24:	bd10      	pop	{r4, pc}

000b4d26 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b4d26:	b510      	push	{r4, lr}
    write('}');
   b4d28:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b4d2a:	4604      	mov	r4, r0
    write('}');
   b4d2c:	f7ff ff49 	bl	b4bc2 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b4d30:	2301      	movs	r3, #1
   b4d32:	7123      	strb	r3, [r4, #4]
}
   b4d34:	4620      	mov	r0, r4
   b4d36:	bd10      	pop	{r4, pc}

000b4d38 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b4d38:	b508      	push	{r3, lr}
    switch (state_) {
   b4d3a:	7903      	ldrb	r3, [r0, #4]
   b4d3c:	2b01      	cmp	r3, #1
   b4d3e:	d002      	beq.n	b4d46 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b4d40:	2b02      	cmp	r3, #2
   b4d42:	d004      	beq.n	b4d4e <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b4d44:	bd08      	pop	{r3, pc}
        write(',');
   b4d46:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b4d48:	f7ff ff3b 	bl	b4bc2 <_ZN5spark10JSONWriter5writeEc>
}
   b4d4c:	e7fa      	b.n	b4d44 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b4d4e:	213a      	movs	r1, #58	; 0x3a
   b4d50:	e7fa      	b.n	b4d48 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b4d52 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b4d52:	b510      	push	{r4, lr}
   b4d54:	4604      	mov	r4, r0
    writeSeparator();
   b4d56:	f7ff ffef 	bl	b4d38 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b4d5a:	4620      	mov	r0, r4
   b4d5c:	217b      	movs	r1, #123	; 0x7b
   b4d5e:	f7ff ff30 	bl	b4bc2 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b4d62:	2300      	movs	r3, #0
   b4d64:	7123      	strb	r3, [r4, #4]
}
   b4d66:	4620      	mov	r0, r4
   b4d68:	bd10      	pop	{r4, pc}
	...

000b4d6c <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b4d6c:	b513      	push	{r0, r1, r4, lr}
   b4d6e:	4604      	mov	r4, r0
   b4d70:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b4d72:	f7ff ffe1 	bl	b4d38 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b4d76:	6823      	ldr	r3, [r4, #0]
   b4d78:	9a01      	ldr	r2, [sp, #4]
   b4d7a:	68db      	ldr	r3, [r3, #12]
   b4d7c:	4903      	ldr	r1, [pc, #12]	; (b4d8c <_ZN5spark10JSONWriter5valueEi+0x20>)
   b4d7e:	4620      	mov	r0, r4
   b4d80:	4798      	blx	r3
    state_ = NEXT;
   b4d82:	2301      	movs	r3, #1
}
   b4d84:	4620      	mov	r0, r4
    state_ = NEXT;
   b4d86:	7123      	strb	r3, [r4, #4]
}
   b4d88:	b002      	add	sp, #8
   b4d8a:	bd10      	pop	{r4, pc}
   b4d8c:	000b9402 	.word	0x000b9402

000b4d90 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b4d90:	b513      	push	{r0, r1, r4, lr}
   b4d92:	4604      	mov	r4, r0
   b4d94:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b4d96:	f7ff ffcf 	bl	b4d38 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b4d9a:	6823      	ldr	r3, [r4, #0]
   b4d9c:	9a01      	ldr	r2, [sp, #4]
   b4d9e:	68db      	ldr	r3, [r3, #12]
   b4da0:	4903      	ldr	r1, [pc, #12]	; (b4db0 <_ZN5spark10JSONWriter5valueEj+0x20>)
   b4da2:	4620      	mov	r0, r4
   b4da4:	4798      	blx	r3
    state_ = NEXT;
   b4da6:	2301      	movs	r3, #1
}
   b4da8:	4620      	mov	r0, r4
    state_ = NEXT;
   b4daa:	7123      	strb	r3, [r4, #4]
}
   b4dac:	b002      	add	sp, #8
   b4dae:	bd10      	pop	{r4, pc}
   b4db0:	000b9405 	.word	0x000b9405

000b4db4 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b4db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4db8:	460d      	mov	r5, r1
    write('"');
   b4dba:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b4dbc:	4690      	mov	r8, r2
   b4dbe:	4604      	mov	r4, r0
    write('"');
   b4dc0:	f7ff feff 	bl	b4bc2 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b4dc4:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b4e6c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b4dc8:	44a8      	add	r8, r5
    const char *s = str;
   b4dca:	462f      	mov	r7, r5
    while (s != end) {
   b4dcc:	4547      	cmp	r7, r8
   b4dce:	46ba      	mov	sl, r7
   b4dd0:	d03d      	beq.n	b4e4e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b4dd2:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b4dd6:	2e22      	cmp	r6, #34	; 0x22
   b4dd8:	d006      	beq.n	b4de8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b4dda:	2e5c      	cmp	r6, #92	; 0x5c
   b4ddc:	d004      	beq.n	b4de8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b4dde:	4630      	mov	r0, r6
   b4de0:	f004 f866 	bl	b8eb0 <isprint>
   b4de4:	2800      	cmp	r0, #0
   b4de6:	d1f1      	bne.n	b4dcc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b4de8:	6823      	ldr	r3, [r4, #0]
   b4dea:	ebaa 0205 	sub.w	r2, sl, r5
   b4dee:	689b      	ldr	r3, [r3, #8]
   b4df0:	4629      	mov	r1, r5
   b4df2:	4620      	mov	r0, r4
   b4df4:	4798      	blx	r3
            write('\\');
   b4df6:	215c      	movs	r1, #92	; 0x5c
   b4df8:	4620      	mov	r0, r4
   b4dfa:	f7ff fee2 	bl	b4bc2 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b4dfe:	2e0d      	cmp	r6, #13
   b4e00:	d80a      	bhi.n	b4e18 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b4e02:	2e07      	cmp	r6, #7
   b4e04:	d91c      	bls.n	b4e40 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b4e06:	f1a6 0308 	sub.w	r3, r6, #8
   b4e0a:	2b05      	cmp	r3, #5
   b4e0c:	d818      	bhi.n	b4e40 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b4e0e:	e8df f003 	tbb	[pc, r3]
   b4e12:	0f0d      	.short	0x0f0d
   b4e14:	15131711 	.word	0x15131711
   b4e18:	2e22      	cmp	r6, #34	; 0x22
   b4e1a:	d001      	beq.n	b4e20 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b4e1c:	2e5c      	cmp	r6, #92	; 0x5c
   b4e1e:	d10f      	bne.n	b4e40 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b4e20:	4631      	mov	r1, r6
                write('b');
   b4e22:	4620      	mov	r0, r4
   b4e24:	f7ff fecd 	bl	b4bc2 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b4e28:	463d      	mov	r5, r7
    while (s != end) {
   b4e2a:	e7cf      	b.n	b4dcc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b4e2c:	2162      	movs	r1, #98	; 0x62
   b4e2e:	e7f8      	b.n	b4e22 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b4e30:	2174      	movs	r1, #116	; 0x74
   b4e32:	e7f6      	b.n	b4e22 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b4e34:	216e      	movs	r1, #110	; 0x6e
   b4e36:	e7f4      	b.n	b4e22 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b4e38:	2166      	movs	r1, #102	; 0x66
   b4e3a:	e7f2      	b.n	b4e22 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b4e3c:	2172      	movs	r1, #114	; 0x72
   b4e3e:	e7f0      	b.n	b4e22 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b4e40:	6823      	ldr	r3, [r4, #0]
   b4e42:	4632      	mov	r2, r6
   b4e44:	68db      	ldr	r3, [r3, #12]
   b4e46:	4649      	mov	r1, r9
   b4e48:	4620      	mov	r0, r4
   b4e4a:	4798      	blx	r3
                break;
   b4e4c:	e7ec      	b.n	b4e28 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b4e4e:	42bd      	cmp	r5, r7
   b4e50:	d005      	beq.n	b4e5e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b4e52:	6823      	ldr	r3, [r4, #0]
   b4e54:	1b7a      	subs	r2, r7, r5
   b4e56:	689b      	ldr	r3, [r3, #8]
   b4e58:	4629      	mov	r1, r5
   b4e5a:	4620      	mov	r0, r4
   b4e5c:	4798      	blx	r3
    }
    write('"');
   b4e5e:	2122      	movs	r1, #34	; 0x22
   b4e60:	4620      	mov	r0, r4
   b4e62:	f7ff feae 	bl	b4bc2 <_ZN5spark10JSONWriter5writeEc>
}
   b4e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4e6a:	bf00      	nop
   b4e6c:	000b9408 	.word	0x000b9408

000b4e70 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b4e70:	b513      	push	{r0, r1, r4, lr}
   b4e72:	4604      	mov	r4, r0
   b4e74:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b4e78:	f7ff ff5e 	bl	b4d38 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b4e7c:	4620      	mov	r0, r4
   b4e7e:	e9dd 2100 	ldrd	r2, r1, [sp]
   b4e82:	f7ff ff97 	bl	b4db4 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b4e86:	2302      	movs	r3, #2
}
   b4e88:	4620      	mov	r0, r4
    state_ = VALUE;
   b4e8a:	7123      	strb	r3, [r4, #4]
}
   b4e8c:	b002      	add	sp, #8
   b4e8e:	bd10      	pop	{r4, pc}

000b4e90 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b4e90:	b513      	push	{r0, r1, r4, lr}
   b4e92:	4604      	mov	r4, r0
   b4e94:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b4e98:	f7ff ff4e 	bl	b4d38 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b4e9c:	4620      	mov	r0, r4
   b4e9e:	e9dd 2100 	ldrd	r2, r1, [sp]
   b4ea2:	f7ff ff87 	bl	b4db4 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b4ea6:	2301      	movs	r3, #1
}
   b4ea8:	4620      	mov	r0, r4
    state_ = NEXT;
   b4eaa:	7123      	strb	r3, [r4, #4]
}
   b4eac:	b002      	add	sp, #8
   b4eae:	bd10      	pop	{r4, pc}

000b4eb0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b4eb0:	b510      	push	{r4, lr}
   b4eb2:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b4eb4:	6800      	ldr	r0, [r0, #0]
   b4eb6:	b108      	cbz	r0, b4ebc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b4eb8:	f7ff fe5d 	bl	b4b76 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b4ebc:	4620      	mov	r0, r4
   b4ebe:	bd10      	pop	{r4, pc}

000b4ec0 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b4ec0:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b4ec2:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4ec4:	4604      	mov	r4, r0
      if (_M_manager)
   b4ec6:	b113      	cbz	r3, b4ece <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4ec8:	2203      	movs	r2, #3
   b4eca:	4601      	mov	r1, r0
   b4ecc:	4798      	blx	r3
    }
   b4ece:	4620      	mov	r0, r4
   b4ed0:	bd10      	pop	{r4, pc}

000b4ed2 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b4ed2:	2300      	movs	r3, #0
   b4ed4:	6840      	ldr	r0, [r0, #4]
   b4ed6:	461a      	mov	r2, r3
   b4ed8:	f7ff bd32 	b.w	b4940 <network_connect>

000b4edc <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b4edc:	6840      	ldr	r0, [r0, #4]
   b4ede:	2200      	movs	r2, #0
   b4ee0:	2102      	movs	r1, #2
   b4ee2:	f7ff bd3d 	b.w	b4960 <network_disconnect>

000b4ee6 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b4ee6:	2200      	movs	r2, #0
   b4ee8:	6840      	ldr	r0, [r0, #4]
   b4eea:	4611      	mov	r1, r2
   b4eec:	f7ff bd30 	b.w	b4950 <network_connecting>

000b4ef0 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b4ef0:	2200      	movs	r2, #0
   b4ef2:	6840      	ldr	r0, [r0, #4]
   b4ef4:	4611      	mov	r1, r2
   b4ef6:	f7ff bd3b 	b.w	b4970 <network_ready>

000b4efa <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b4efa:	2300      	movs	r3, #0
   b4efc:	6840      	ldr	r0, [r0, #4]
   b4efe:	461a      	mov	r2, r3
   b4f00:	4619      	mov	r1, r3
   b4f02:	f7ff bd3d 	b.w	b4980 <network_on>

000b4f06 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b4f06:	2300      	movs	r3, #0
   b4f08:	6840      	ldr	r0, [r0, #4]
   b4f0a:	461a      	mov	r2, r3
   b4f0c:	4619      	mov	r1, r3
   b4f0e:	f7ff bd3f 	b.w	b4990 <network_off>

000b4f12 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b4f12:	6840      	ldr	r0, [r0, #4]
   b4f14:	2100      	movs	r1, #0
   b4f16:	f7ff bd63 	b.w	b49e0 <network_is_on>

000b4f1a <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b4f1a:	6840      	ldr	r0, [r0, #4]
   b4f1c:	2100      	movs	r1, #0
   b4f1e:	f7ff bd67 	b.w	b49f0 <network_is_off>

000b4f22 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b4f22:	6840      	ldr	r0, [r0, #4]
   b4f24:	2200      	movs	r2, #0
   b4f26:	f081 0101 	eor.w	r1, r1, #1
   b4f2a:	f7ff bd39 	b.w	b49a0 <network_listen>

000b4f2e <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b4f2e:	6840      	ldr	r0, [r0, #4]
   b4f30:	2200      	movs	r2, #0
   b4f32:	f7ff bd45 	b.w	b49c0 <network_set_listen_timeout>

000b4f36 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b4f36:	2200      	movs	r2, #0
   b4f38:	6840      	ldr	r0, [r0, #4]
   b4f3a:	4611      	mov	r1, r2
   b4f3c:	f7ff bd48 	b.w	b49d0 <network_get_listen_timeout>

000b4f40 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b4f40:	2200      	movs	r2, #0
   b4f42:	6840      	ldr	r0, [r0, #4]
   b4f44:	4611      	mov	r1, r2
   b4f46:	f7ff bd33 	b.w	b49b0 <network_listening>

000b4f4a <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b4f4a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4f4e:	b095      	sub	sp, #84	; 0x54
   b4f50:	4614      	mov	r4, r2
   b4f52:	460d      	mov	r5, r1
   b4f54:	4607      	mov	r7, r0
    IPAddress addr;
   b4f56:	f000 f99d 	bl	b5294 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b4f5a:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b4f5c:	221c      	movs	r2, #28
   b4f5e:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b4f60:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b4f62:	f003 ffe5 	bl	b8f30 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b4f66:	2340      	movs	r3, #64	; 0x40
   b4f68:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b4f6a:	4620      	mov	r0, r4
   b4f6c:	466b      	mov	r3, sp
   b4f6e:	aa0c      	add	r2, sp, #48	; 0x30
   b4f70:	2100      	movs	r1, #0
   b4f72:	f7ff fcad 	bl	b48d0 <netdb_getaddrinfo>
    if (!r) {
   b4f76:	4604      	mov	r4, r0
   b4f78:	2800      	cmp	r0, #0
   b4f7a:	d14b      	bne.n	b5014 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b4f7c:	4602      	mov	r2, r0
   b4f7e:	2101      	movs	r1, #1
   b4f80:	6868      	ldr	r0, [r5, #4]
   b4f82:	f7ff fcf5 	bl	b4970 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4f86:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b4f88:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4f8a:	4622      	mov	r2, r4
   b4f8c:	6868      	ldr	r0, [r5, #4]
   b4f8e:	f7ff fcef 	bl	b4970 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4f92:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4f94:	4681      	mov	r9, r0
        bool ok = false;
   b4f96:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4f98:	2e00      	cmp	r6, #0
   b4f9a:	d03b      	beq.n	b5014 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b4f9c:	2900      	cmp	r1, #0
   b4f9e:	d139      	bne.n	b5014 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b4fa0:	6873      	ldr	r3, [r6, #4]
   b4fa2:	2b02      	cmp	r3, #2
   b4fa4:	d003      	beq.n	b4fae <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b4fa6:	2b0a      	cmp	r3, #10
   b4fa8:	d011      	beq.n	b4fce <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4faa:	69f6      	ldr	r6, [r6, #28]
   b4fac:	e7f4      	b.n	b4f98 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b4fae:	f1b8 0f00 	cmp.w	r8, #0
   b4fb2:	d0fa      	beq.n	b4faa <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b4fb4:	6971      	ldr	r1, [r6, #20]


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
        return *this = IPAddress(address);
   b4fb6:	a806      	add	r0, sp, #24
   b4fb8:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b4fba:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b4fbc:	f000 f998 	bl	b52f0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b4fc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4fc2:	1d3c      	adds	r4, r7, #4
   b4fc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4fc6:	682b      	ldr	r3, [r5, #0]
   b4fc8:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4fca:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b4fcc:	e7ed      	b.n	b4faa <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b4fce:	f1b9 0f00 	cmp.w	r9, #0
   b4fd2:	d0ea      	beq.n	b4faa <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b4fd4:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b4fd6:	2210      	movs	r2, #16
   b4fd8:	a801      	add	r0, sp, #4
   b4fda:	f003 ffa9 	bl	b8f30 <memset>
                    a.v = 6;
   b4fde:	2306      	movs	r3, #6
   b4fe0:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b4fe4:	ad01      	add	r5, sp, #4
   b4fe6:	f104 0308 	add.w	r3, r4, #8
   b4fea:	3418      	adds	r4, #24
   b4fec:	6818      	ldr	r0, [r3, #0]
   b4fee:	6859      	ldr	r1, [r3, #4]
   b4ff0:	462a      	mov	r2, r5
   b4ff2:	c203      	stmia	r2!, {r0, r1}
   b4ff4:	3308      	adds	r3, #8
   b4ff6:	42a3      	cmp	r3, r4
   b4ff8:	4615      	mov	r5, r2
   b4ffa:	d1f7      	bne.n	b4fec <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b4ffc:	a901      	add	r1, sp, #4
   b4ffe:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b5000:	ad07      	add	r5, sp, #28
   b5002:	f000 f955 	bl	b52b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5006:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5008:	1d3c      	adds	r4, r7, #4
   b500a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b500c:	682b      	ldr	r3, [r5, #0]
   b500e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5010:	4649      	mov	r1, r9
   b5012:	e7ca      	b.n	b4faa <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b5014:	9800      	ldr	r0, [sp, #0]
   b5016:	f7ff fc53 	bl	b48c0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b501a:	4638      	mov	r0, r7
   b501c:	b015      	add	sp, #84	; 0x54
   b501e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000b5024 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5024:	4b02      	ldr	r3, [pc, #8]	; (b5030 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b5026:	4a03      	ldr	r2, [pc, #12]	; (b5034 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5028:	601a      	str	r2, [r3, #0]
   b502a:	2200      	movs	r2, #0
   b502c:	605a      	str	r2, [r3, #4]

} // spark
   b502e:	4770      	bx	lr
   b5030:	2003e6a0 	.word	0x2003e6a0
   b5034:	000b9418 	.word	0x000b9418

000b5038 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b5038:	2200      	movs	r2, #0
   b503a:	6840      	ldr	r0, [r0, #4]
   b503c:	4611      	mov	r1, r2
   b503e:	f7ff bc97 	b.w	b4970 <network_ready>

000b5042 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5042:	2200      	movs	r2, #0
   b5044:	6840      	ldr	r0, [r0, #4]
   b5046:	4611      	mov	r1, r2
   b5048:	f7ff bcb2 	b.w	b49b0 <network_listening>

000b504c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b504c:	2200      	movs	r2, #0
   b504e:	6840      	ldr	r0, [r0, #4]
   b5050:	4611      	mov	r1, r2
   b5052:	f7ff bcbd 	b.w	b49d0 <network_get_listen_timeout>

000b5056 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5056:	6840      	ldr	r0, [r0, #4]
   b5058:	2200      	movs	r2, #0
   b505a:	f7ff bcb1 	b.w	b49c0 <network_set_listen_timeout>

000b505e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b505e:	6840      	ldr	r0, [r0, #4]
   b5060:	2200      	movs	r2, #0
   b5062:	f081 0101 	eor.w	r1, r1, #1
   b5066:	f7ff bc9b 	b.w	b49a0 <network_listen>

000b506a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b506a:	2300      	movs	r3, #0
   b506c:	6840      	ldr	r0, [r0, #4]
   b506e:	461a      	mov	r2, r3
   b5070:	4619      	mov	r1, r3
   b5072:	f7ff bc8d 	b.w	b4990 <network_off>

000b5076 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5076:	2300      	movs	r3, #0
   b5078:	6840      	ldr	r0, [r0, #4]
   b507a:	461a      	mov	r2, r3
   b507c:	4619      	mov	r1, r3
   b507e:	f7ff bc7f 	b.w	b4980 <network_on>

000b5082 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5082:	2200      	movs	r2, #0
   b5084:	6840      	ldr	r0, [r0, #4]
   b5086:	4611      	mov	r1, r2
   b5088:	f7ff bc62 	b.w	b4950 <network_connecting>

000b508c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b508c:	6840      	ldr	r0, [r0, #4]
   b508e:	2200      	movs	r2, #0
   b5090:	2102      	movs	r1, #2
   b5092:	f7ff bc65 	b.w	b4960 <network_disconnect>

000b5096 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5096:	2300      	movs	r3, #0
   b5098:	6840      	ldr	r0, [r0, #4]
   b509a:	461a      	mov	r2, r3
   b509c:	f7ff bc50 	b.w	b4940 <network_connect>

000b50a0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b50a0:	4b02      	ldr	r3, [pc, #8]	; (b50ac <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b50a2:	2204      	movs	r2, #4
   b50a4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b50a6:	4a02      	ldr	r2, [pc, #8]	; (b50b0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b50a8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b50aa:	4770      	bx	lr
   b50ac:	2003e6a8 	.word	0x2003e6a8
   b50b0:	000b9454 	.word	0x000b9454

000b50b4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
private:
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   b50b4:	b538      	push	{r3, r4, r5, lr}
        T* d = nullptr;
        if (n > 0) {
   b50b6:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b50b8:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b50ba:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b50bc:	dd03      	ble.n	b50c6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   b50be:	f7ff fcdb 	bl	b4a78 <realloc>
            if (!d) {
   b50c2:	b918      	cbnz	r0, b50cc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b50c4:	bd38      	pop	{r3, r4, r5, pc}
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b50c6:	f7ff fccf 	bl	b4a68 <free>
        T* d = nullptr;
   b50ca:	2000      	movs	r0, #0
        data_ = d;
   b50cc:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b50ce:	60a5      	str	r5, [r4, #8]
        return true;
   b50d0:	2001      	movs	r0, #1
   b50d2:	e7f7      	b.n	b50c4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b50d4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b50d4:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b50d6:	2300      	movs	r3, #0
   b50d8:	e9c0 3300 	strd	r3, r3, [r0]
   b50dc:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b50de:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b50e0:	6849      	ldr	r1, [r1, #4]
   b50e2:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b50e4:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b50e6:	dd10      	ble.n	b510a <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
   b50e8:	f7ff ffe4 	bl	b50b4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b50ec:	b168      	cbz	r0, b510a <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b50ee:	e9d5 3100 	ldrd	r3, r1, [r5]
   b50f2:	6822      	ldr	r2, [r4, #0]
   b50f4:	4419      	add	r1, r3
        for (; it != end; ++it, ++dest) {
   b50f6:	4299      	cmp	r1, r3
   b50f8:	d005      	beq.n	b5106 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x32>
            new(dest) T(*it);
   b50fa:	b10a      	cbz	r2, b5100 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x2c>
   b50fc:	7818      	ldrb	r0, [r3, #0]
   b50fe:	7010      	strb	r0, [r2, #0]
        for (; it != end; ++it, ++dest) {
   b5100:	3301      	adds	r3, #1
   b5102:	3201      	adds	r2, #1
   b5104:	e7f7      	b.n	b50f6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x22>
        size_ = vector.size_;
   b5106:	686b      	ldr	r3, [r5, #4]
   b5108:	6063      	str	r3, [r4, #4]
    }
}
   b510a:	4620      	mov	r0, r4
   b510c:	bd38      	pop	{r3, r4, r5, pc}

000b510e <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b510e:	7441      	strb	r1, [r0, #17]
}
   b5110:	4770      	bx	lr

000b5112 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5112:	4770      	bx	lr

000b5114 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b5114:	4770      	bx	lr

000b5116 <_ZN9USBSerial4readEv>:
{
   b5116:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b5118:	2100      	movs	r1, #0
   b511a:	7c00      	ldrb	r0, [r0, #16]
   b511c:	f7ff fac0 	bl	b46a0 <HAL_USB_USART_Receive_Data>
}
   b5120:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5124:	bd08      	pop	{r3, pc}

000b5126 <_ZN9USBSerial4peekEv>:
{
   b5126:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b5128:	2101      	movs	r1, #1
   b512a:	7c00      	ldrb	r0, [r0, #16]
   b512c:	f7ff fab8 	bl	b46a0 <HAL_USB_USART_Receive_Data>
}
   b5130:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5134:	bd08      	pop	{r3, pc}

000b5136 <_ZN9USBSerial17availableForWriteEv>:
{
   b5136:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b5138:	7c00      	ldrb	r0, [r0, #16]
   b513a:	f7ff faa9 	bl	b4690 <HAL_USB_USART_Available_Data_For_Write>
}
   b513e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5142:	bd08      	pop	{r3, pc}

000b5144 <_ZN9USBSerial9availableEv>:
{
   b5144:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5146:	7c00      	ldrb	r0, [r0, #16]
   b5148:	f7ff fa9a 	bl	b4680 <HAL_USB_USART_Available_Data>
}
   b514c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5150:	bd08      	pop	{r3, pc}

000b5152 <_ZN9USBSerial5writeEh>:
{
   b5152:	b513      	push	{r0, r1, r4, lr}
   b5154:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5156:	7c00      	ldrb	r0, [r0, #16]
{
   b5158:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b515a:	f7ff fa99 	bl	b4690 <HAL_USB_USART_Available_Data_For_Write>
   b515e:	2800      	cmp	r0, #0
   b5160:	9901      	ldr	r1, [sp, #4]
   b5162:	dc01      	bgt.n	b5168 <_ZN9USBSerial5writeEh+0x16>
   b5164:	7c60      	ldrb	r0, [r4, #17]
   b5166:	b120      	cbz	r0, b5172 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b5168:	7c20      	ldrb	r0, [r4, #16]
   b516a:	f7ff faa1 	bl	b46b0 <HAL_USB_USART_Send_Data>
   b516e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5172:	b002      	add	sp, #8
   b5174:	bd10      	pop	{r4, pc}

000b5176 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5176:	7c00      	ldrb	r0, [r0, #16]
   b5178:	f7ff baa2 	b.w	b46c0 <HAL_USB_USART_Flush_Data>

000b517c <_ZN9USBSerialD0Ev>:
   b517c:	b510      	push	{r4, lr}
   b517e:	2114      	movs	r1, #20
   b5180:	4604      	mov	r4, r0
   b5182:	f7fe ff8a 	bl	b409a <_ZdlPvj>
   b5186:	4620      	mov	r0, r4
   b5188:	bd10      	pop	{r4, pc}
	...

000b518c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b518c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b518e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5192:	4604      	mov	r4, r0
   b5194:	4608      	mov	r0, r1
   b5196:	2100      	movs	r1, #0
   b5198:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b519c:	4b04      	ldr	r3, [pc, #16]	; (b51b0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b519e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b51a0:	2301      	movs	r3, #1
  _serial = serial;
   b51a2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b51a4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b51a6:	4611      	mov	r1, r2
   b51a8:	f7ff fa52 	bl	b4650 <HAL_USB_USART_Init>
}
   b51ac:	4620      	mov	r0, r4
   b51ae:	bd10      	pop	{r4, pc}
   b51b0:	000b9498 	.word	0x000b9498

000b51b4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b51b4:	7c00      	ldrb	r0, [r0, #16]
   b51b6:	2200      	movs	r2, #0
   b51b8:	f7ff ba52 	b.w	b4660 <HAL_USB_USART_Begin>

000b51bc <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   b51bc:	7c00      	ldrb	r0, [r0, #16]
   b51be:	f7ff ba57 	b.w	b4670 <HAL_USB_USART_End>

000b51c2 <_Z19acquireSerialBufferv>:
{
   b51c2:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b51c4:	2214      	movs	r2, #20
{
   b51c6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b51c8:	2100      	movs	r1, #0
   b51ca:	f003 feb1 	bl	b8f30 <memset>
}
   b51ce:	4620      	mov	r0, r4
   b51d0:	bd10      	pop	{r4, pc}
	...

000b51d4 <_Z16_fetch_usbserialv>:
{
   b51d4:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b51d6:	4c0f      	ldr	r4, [pc, #60]	; (b5214 <_Z16_fetch_usbserialv+0x40>)
{
   b51d8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b51da:	a803      	add	r0, sp, #12
   b51dc:	f7ff fff1 	bl	b51c2 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b51e0:	7821      	ldrb	r1, [r4, #0]
   b51e2:	f3bf 8f5b 	dmb	ish
   b51e6:	f011 0101 	ands.w	r1, r1, #1
   b51ea:	d10f      	bne.n	b520c <_Z16_fetch_usbserialv+0x38>
   b51ec:	4620      	mov	r0, r4
   b51ee:	9101      	str	r1, [sp, #4]
   b51f0:	f7fe ff62 	bl	b40b8 <__cxa_guard_acquire>
   b51f4:	9901      	ldr	r1, [sp, #4]
   b51f6:	b148      	cbz	r0, b520c <_Z16_fetch_usbserialv+0x38>
   b51f8:	aa03      	add	r2, sp, #12
   b51fa:	4807      	ldr	r0, [pc, #28]	; (b5218 <_Z16_fetch_usbserialv+0x44>)
   b51fc:	f7ff ffc6 	bl	b518c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5200:	4620      	mov	r0, r4
   b5202:	f7fe ff5e 	bl	b40c2 <__cxa_guard_release>
   b5206:	4805      	ldr	r0, [pc, #20]	; (b521c <_Z16_fetch_usbserialv+0x48>)
   b5208:	f003 fe4c 	bl	b8ea4 <atexit>
	return _usbserial;
}
   b520c:	4802      	ldr	r0, [pc, #8]	; (b5218 <_Z16_fetch_usbserialv+0x44>)
   b520e:	b008      	add	sp, #32
   b5210:	bd10      	pop	{r4, pc}
   b5212:	bf00      	nop
   b5214:	2003e6b0 	.word	0x2003e6b0
   b5218:	2003e6b4 	.word	0x2003e6b4
   b521c:	000b5113 	.word	0x000b5113

000b5220 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   b5220:	4770      	bx	lr

000b5222 <_ZN9IPAddressD0Ev>:
   b5222:	b510      	push	{r4, lr}
   b5224:	2118      	movs	r1, #24
   b5226:	4604      	mov	r4, r0
   b5228:	f7fe ff37 	bl	b409a <_ZdlPvj>
   b522c:	4620      	mov	r0, r4
   b522e:	bd10      	pop	{r4, pc}

000b5230 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5230:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b5232:	7d03      	ldrb	r3, [r0, #20]
   b5234:	2b06      	cmp	r3, #6
{
   b5236:	b08d      	sub	sp, #52	; 0x34
   b5238:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b523a:	f100 0704 	add.w	r7, r0, #4
   b523e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b5242:	d012      	beq.n	b526a <_ZNK9IPAddress7printToER5Print+0x3a>
   b5244:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5248:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b524c:	220a      	movs	r2, #10
   b524e:	4630      	mov	r0, r6
   b5250:	f001 f8df 	bl	b6412 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b5254:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b5256:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b5258:	d019      	beq.n	b528e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b525a:	2c00      	cmp	r4, #0
   b525c:	d0f4      	beq.n	b5248 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b525e:	212e      	movs	r1, #46	; 0x2e
   b5260:	4630      	mov	r0, r6
   b5262:	f001 f8c7 	bl	b63f4 <_ZN5Print5printEc>
   b5266:	4404      	add	r4, r0
   b5268:	e7ee      	b.n	b5248 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b526a:	232f      	movs	r3, #47	; 0x2f
   b526c:	466a      	mov	r2, sp
   b526e:	4639      	mov	r1, r7
   b5270:	200a      	movs	r0, #10
		buf[0] = 0;
   b5272:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5276:	f7ff fa73 	bl	b4760 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b527a:	4668      	mov	r0, sp
   b527c:	f003 feb7 	bl	b8fee <strlen>
   b5280:	6833      	ldr	r3, [r6, #0]
   b5282:	4602      	mov	r2, r0
   b5284:	68db      	ldr	r3, [r3, #12]
   b5286:	4669      	mov	r1, sp
   b5288:	4630      	mov	r0, r6
   b528a:	4798      	blx	r3
   b528c:	4604      	mov	r4, r0
    }
    return n;
}
   b528e:	4620      	mov	r0, r4
   b5290:	b00d      	add	sp, #52	; 0x34
   b5292:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5294 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b5294:	b510      	push	{r4, lr}
   b5296:	4b05      	ldr	r3, [pc, #20]	; (b52ac <_ZN9IPAddressC1Ev+0x18>)
   b5298:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b529a:	2211      	movs	r2, #17
   b529c:	f840 3b04 	str.w	r3, [r0], #4
   b52a0:	2100      	movs	r1, #0
   b52a2:	f003 fe45 	bl	b8f30 <memset>
}
   b52a6:	4620      	mov	r0, r4
   b52a8:	bd10      	pop	{r4, pc}
   b52aa:	bf00      	nop
   b52ac:	000b94c8 	.word	0x000b94c8

000b52b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b52b0:	4603      	mov	r3, r0
   b52b2:	4a07      	ldr	r2, [pc, #28]	; (b52d0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b52b4:	b510      	push	{r4, lr}
   b52b6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b52ba:	f101 0210 	add.w	r2, r1, #16
   b52be:	f851 4b04 	ldr.w	r4, [r1], #4
   b52c2:	f843 4b04 	str.w	r4, [r3], #4
   b52c6:	4291      	cmp	r1, r2
   b52c8:	d1f9      	bne.n	b52be <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b52ca:	780a      	ldrb	r2, [r1, #0]
   b52cc:	701a      	strb	r2, [r3, #0]
}
   b52ce:	bd10      	pop	{r4, pc}
   b52d0:	000b94c8 	.word	0x000b94c8

000b52d4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b52d4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b52d6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b52da:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b52de:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b52e2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b52e6:	2304      	movs	r3, #4
   b52e8:	6041      	str	r1, [r0, #4]
   b52ea:	7503      	strb	r3, [r0, #20]
}
   b52ec:	bd10      	pop	{r4, pc}
	...

000b52f0 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b52f0:	b507      	push	{r0, r1, r2, lr}
   b52f2:	4b06      	ldr	r3, [pc, #24]	; (b530c <_ZN9IPAddressC1EPKh+0x1c>)
   b52f4:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b52f6:	78cb      	ldrb	r3, [r1, #3]
   b52f8:	9300      	str	r3, [sp, #0]
   b52fa:	788b      	ldrb	r3, [r1, #2]
   b52fc:	784a      	ldrb	r2, [r1, #1]
   b52fe:	7809      	ldrb	r1, [r1, #0]
   b5300:	f7ff ffe8 	bl	b52d4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5304:	b003      	add	sp, #12
   b5306:	f85d fb04 	ldr.w	pc, [sp], #4
   b530a:	bf00      	nop
   b530c:	000b94c8 	.word	0x000b94c8

000b5310 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b5310:	b513      	push	{r0, r1, r4, lr}
   b5312:	460b      	mov	r3, r1
   b5314:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5316:	e9d0 0100 	ldrd	r0, r1, [r0]
   b531a:	466c      	mov	r4, sp
   b531c:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b5320:	e893 0003 	ldmia.w	r3, {r0, r1}
   b5324:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b5328:	e894 0003 	ldmia.w	r4, {r0, r1}
   b532c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b5330:	b002      	add	sp, #8
   b5332:	bd10      	pop	{r4, pc}

000b5334 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5334:	4b01      	ldr	r3, [pc, #4]	; (b533c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b5336:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5338:	4770      	bx	lr
   b533a:	bf00      	nop
   b533c:	2003e61c 	.word	0x2003e61c

000b5340 <loop>:
   b5340:	4770      	bx	lr
	...

000b5344 <serialEventRun>:
{
   b5344:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b5346:	4b0b      	ldr	r3, [pc, #44]	; (b5374 <serialEventRun+0x30>)
   b5348:	b143      	cbz	r3, b535c <serialEventRun+0x18>
   b534a:	f7ff ff43 	bl	b51d4 <_Z16_fetch_usbserialv>
   b534e:	6803      	ldr	r3, [r0, #0]
   b5350:	691b      	ldr	r3, [r3, #16]
   b5352:	4798      	blx	r3
   b5354:	2800      	cmp	r0, #0
   b5356:	dd01      	ble.n	b535c <serialEventRun+0x18>
        serialEvent();
   b5358:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b535c:	4b06      	ldr	r3, [pc, #24]	; (b5378 <serialEventRun+0x34>)
   b535e:	b143      	cbz	r3, b5372 <serialEventRun+0x2e>
   b5360:	f003 fc62 	bl	b8c28 <_Z22__fetch_global_Serial1v>
   b5364:	6803      	ldr	r3, [r0, #0]
   b5366:	691b      	ldr	r3, [r3, #16]
   b5368:	4798      	blx	r3
   b536a:	2800      	cmp	r0, #0
   b536c:	dd01      	ble.n	b5372 <serialEventRun+0x2e>
        serialEvent1();
   b536e:	f3af 8000 	nop.w
}
   b5372:	bd08      	pop	{r3, pc}
	...

000b537c <_post_loop>:
{
   b537c:	b508      	push	{r3, lr}
	serialEventRun();
   b537e:	f7ff ffe1 	bl	b5344 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5382:	f7ff fa95 	bl	b48b0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5386:	4b01      	ldr	r3, [pc, #4]	; (b538c <_post_loop+0x10>)
   b5388:	6018      	str	r0, [r3, #0]
}
   b538a:	bd08      	pop	{r3, pc}
   b538c:	2003e740 	.word	0x2003e740

000b5390 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5390:	4805      	ldr	r0, [pc, #20]	; (b53a8 <_Z33system_initialize_user_backup_ramv+0x18>)
   b5392:	4a06      	ldr	r2, [pc, #24]	; (b53ac <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5394:	4906      	ldr	r1, [pc, #24]	; (b53b0 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b5396:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5398:	1a12      	subs	r2, r2, r0
   b539a:	f003 fda1 	bl	b8ee0 <memcpy>
    __backup_sram_signature = signature;
   b539e:	4b05      	ldr	r3, [pc, #20]	; (b53b4 <_Z33system_initialize_user_backup_ramv+0x24>)
   b53a0:	4a05      	ldr	r2, [pc, #20]	; (b53b8 <_Z33system_initialize_user_backup_ramv+0x28>)
   b53a2:	601a      	str	r2, [r3, #0]
}
   b53a4:	bd08      	pop	{r3, pc}
   b53a6:	bf00      	nop
   b53a8:	2003f400 	.word	0x2003f400
   b53ac:	2003f404 	.word	0x2003f404
   b53b0:	000b9ba4 	.word	0x000b9ba4
   b53b4:	2003f400 	.word	0x2003f400
   b53b8:	9a271c1e 	.word	0x9a271c1e

000b53bc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b53bc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b53be:	2300      	movs	r3, #0
   b53c0:	9300      	str	r3, [sp, #0]
   b53c2:	461a      	mov	r2, r3
   b53c4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b53c8:	f7ff fb3c 	bl	b4a44 <system_ctrl_set_result>
}
   b53cc:	b003      	add	sp, #12
   b53ce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b53d4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b53d4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b53d6:	8843      	ldrh	r3, [r0, #2]
   b53d8:	2b0a      	cmp	r3, #10
   b53da:	d008      	beq.n	b53ee <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b53dc:	2b50      	cmp	r3, #80	; 0x50
   b53de:	d10b      	bne.n	b53f8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b53e0:	4b09      	ldr	r3, [pc, #36]	; (b5408 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b53e2:	681b      	ldr	r3, [r3, #0]
   b53e4:	b14b      	cbz	r3, b53fa <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b53e6:	b003      	add	sp, #12
   b53e8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b53ec:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b53ee:	f7ff ffe5 	bl	b53bc <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b53f2:	b003      	add	sp, #12
   b53f4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b53f8:	2300      	movs	r3, #0
   b53fa:	9300      	str	r3, [sp, #0]
   b53fc:	461a      	mov	r2, r3
   b53fe:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5402:	f7ff fb1f 	bl	b4a44 <system_ctrl_set_result>
}
   b5406:	e7f4      	b.n	b53f2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b5408:	2003e6cc 	.word	0x2003e6cc

000b540c <module_user_init_hook>:
{
   b540c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b540e:	4812      	ldr	r0, [pc, #72]	; (b5458 <module_user_init_hook+0x4c>)
   b5410:	2100      	movs	r1, #0
   b5412:	f7ff fb59 	bl	b4ac8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b5416:	4b11      	ldr	r3, [pc, #68]	; (b545c <module_user_init_hook+0x50>)
   b5418:	681a      	ldr	r2, [r3, #0]
   b541a:	4b11      	ldr	r3, [pc, #68]	; (b5460 <module_user_init_hook+0x54>)
   b541c:	429a      	cmp	r2, r3
   b541e:	4b11      	ldr	r3, [pc, #68]	; (b5464 <module_user_init_hook+0x58>)
   b5420:	bf0c      	ite	eq
   b5422:	2201      	moveq	r2, #1
   b5424:	2200      	movne	r2, #0
   b5426:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b5428:	d001      	beq.n	b542e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b542a:	f7ff ffb1 	bl	b5390 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b542e:	f7ff fa2f 	bl	b4890 <HAL_RNG_GetRandomNumber>
   b5432:	4604      	mov	r4, r0
    srand(seed);
   b5434:	f003 fd84 	bl	b8f40 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b5438:	4b0b      	ldr	r3, [pc, #44]	; (b5468 <module_user_init_hook+0x5c>)
   b543a:	b113      	cbz	r3, b5442 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b543c:	4620      	mov	r0, r4
   b543e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b5442:	2100      	movs	r1, #0
   b5444:	4808      	ldr	r0, [pc, #32]	; (b5468 <module_user_init_hook+0x5c>)
   b5446:	f7ff fa73 	bl	b4930 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b544a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b544e:	4807      	ldr	r0, [pc, #28]	; (b546c <module_user_init_hook+0x60>)
   b5450:	2100      	movs	r1, #0
   b5452:	f7ff baed 	b.w	b4a30 <system_ctrl_set_app_request_handler>
   b5456:	bf00      	nop
   b5458:	000b5335 	.word	0x000b5335
   b545c:	2003f400 	.word	0x2003f400
   b5460:	9a271c1e 	.word	0x9a271c1e
   b5464:	2003e6c8 	.word	0x2003e6c8
   b5468:	00000000 	.word	0x00000000
   b546c:	000b53d5 	.word	0x000b53d5

000b5470 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b5470:	4b01      	ldr	r3, [pc, #4]	; (b5478 <_GLOBAL__sub_I_RGB+0x8>)
   b5472:	2200      	movs	r2, #0
   b5474:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b5476:	4770      	bx	lr
   b5478:	2003e6d0 	.word	0x2003e6d0

000b547c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b547c:	2100      	movs	r1, #0
   b547e:	f7ff bac7 	b.w	b4a10 <system_delay_ms>
	...

000b5484 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5484:	4b02      	ldr	r3, [pc, #8]	; (b5490 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b5486:	681a      	ldr	r2, [r3, #0]
   b5488:	4b02      	ldr	r3, [pc, #8]	; (b5494 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b548a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b548c:	4770      	bx	lr
   b548e:	bf00      	nop
   b5490:	2003e610 	.word	0x2003e610
   b5494:	2003e6e0 	.word	0x2003e6e0

000b5498 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b5498:	6880      	ldr	r0, [r0, #8]
   b549a:	6803      	ldr	r3, [r0, #0]
   b549c:	68db      	ldr	r3, [r3, #12]
   b549e:	4718      	bx	r3

000b54a0 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b54a0:	4770      	bx	lr

000b54a2 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b54a2:	4608      	mov	r0, r1
   b54a4:	b111      	cbz	r1, b54ac <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b54a6:	680b      	ldr	r3, [r1, #0]
   b54a8:	685b      	ldr	r3, [r3, #4]
   b54aa:	4718      	bx	r3
}
   b54ac:	4770      	bx	lr

000b54ae <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b54ae:	4770      	bx	lr

000b54b0 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b54b0:	4770      	bx	lr

000b54b2 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b54b2:	4770      	bx	lr

000b54b4 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b54b4:	4770      	bx	lr

000b54b6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b54b6:	b538      	push	{r3, r4, r5, lr}
   b54b8:	4604      	mov	r4, r0
   b54ba:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b54bc:	6800      	ldr	r0, [r0, #0]
   b54be:	212e      	movs	r1, #46	; 0x2e
   b54c0:	f003 fd79 	bl	b8fb6 <strchrnul>
    size = s - category;
   b54c4:	6823      	ldr	r3, [r4, #0]
   b54c6:	1ac3      	subs	r3, r0, r3
   b54c8:	602b      	str	r3, [r5, #0]
    if (size) {
   b54ca:	b123      	cbz	r3, b54d6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b54cc:	7803      	ldrb	r3, [r0, #0]
   b54ce:	b103      	cbz	r3, b54d2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b54d0:	3001      	adds	r0, #1
      __a = _GLIBCXX_MOVE(__b);
   b54d2:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b54d4:	6020      	str	r0, [r4, #0]
}
   b54d6:	4618      	mov	r0, r3
   b54d8:	bd38      	pop	{r3, r4, r5, pc}

000b54da <_ZN5spark16JSONStreamWriterD0Ev>:
   b54da:	b510      	push	{r4, lr}
   b54dc:	210c      	movs	r1, #12
   b54de:	4604      	mov	r4, r0
   b54e0:	f7fe fddb 	bl	b409a <_ZdlPvj>
   b54e4:	4620      	mov	r0, r4
   b54e6:	bd10      	pop	{r4, pc}

000b54e8 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b54e8:	b510      	push	{r4, lr}
   b54ea:	2104      	movs	r1, #4
   b54ec:	4604      	mov	r4, r0
   b54ee:	f7fe fdd4 	bl	b409a <_ZdlPvj>
   b54f2:	4620      	mov	r0, r4
   b54f4:	bd10      	pop	{r4, pc}

000b54f6 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b54f6:	b510      	push	{r4, lr}
   b54f8:	2104      	movs	r1, #4
   b54fa:	4604      	mov	r4, r0
   b54fc:	f7fe fdcd 	bl	b409a <_ZdlPvj>
   b5500:	4620      	mov	r0, r4
   b5502:	bd10      	pop	{r4, pc}

000b5504 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b5504:	f7ff b944 	b.w	b4790 <os_mutex_recursive_lock>

000b5508 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b5508:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b550a:	f003 fd5e 	bl	b8fca <strcmp>
}
   b550e:	fab0 f080 	clz	r0, r0
   b5512:	0940      	lsrs	r0, r0, #5
   b5514:	bd08      	pop	{r3, pc}

000b5516 <__tcf_1>:
   b5516:	4770      	bx	lr

000b5518 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b5518:	b510      	push	{r4, lr}
   b551a:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   b551c:	f7ff fe5a 	bl	b51d4 <_Z16_fetch_usbserialv>
   b5520:	4284      	cmp	r4, r0
   b5522:	d010      	beq.n	b5546 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b5524:	f003 fb80 	bl	b8c28 <_Z22__fetch_global_Serial1v>
   b5528:	4284      	cmp	r4, r0
   b552a:	d105      	bne.n	b5538 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b552c:	f003 fb7c 	bl	b8c28 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   b5530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b5534:	f003 ba11 	b.w	b895a <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b5538:	b12c      	cbz	r4, b5546 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b553a:	6823      	ldr	r3, [r4, #0]
   b553c:	4620      	mov	r0, r4
   b553e:	685b      	ldr	r3, [r3, #4]
}
   b5540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5544:	4718      	bx	r3
   b5546:	bd10      	pop	{r4, pc}

000b5548 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5548:	680b      	ldr	r3, [r1, #0]
   b554a:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b554c:	684b      	ldr	r3, [r1, #4]
   b554e:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b5550:	b113      	cbz	r3, b5558 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b5552:	685a      	ldr	r2, [r3, #4]
   b5554:	3201      	adds	r2, #1
   b5556:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5558:	4770      	bx	lr

000b555a <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b555a:	b513      	push	{r0, r1, r4, lr}
   b555c:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b555e:	4608      	mov	r0, r1
   b5560:	9101      	str	r1, [sp, #4]
   b5562:	f003 fd44 	bl	b8fee <strlen>
   b5566:	9901      	ldr	r1, [sp, #4]
   b5568:	4602      	mov	r2, r0
   b556a:	4620      	mov	r0, r4
}
   b556c:	b002      	add	sp, #8
   b556e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b5572:	f7ff bc8d 	b.w	b4e90 <_ZN5spark10JSONWriter5valueEPKcj>

000b5576 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b5576:	b513      	push	{r0, r1, r4, lr}
   b5578:	4604      	mov	r4, r0
    write(str, strlen(str));
   b557a:	4608      	mov	r0, r1
   b557c:	9101      	str	r1, [sp, #4]
   b557e:	f003 fd36 	bl	b8fee <strlen>
   b5582:	6823      	ldr	r3, [r4, #0]
   b5584:	9901      	ldr	r1, [sp, #4]
   b5586:	68db      	ldr	r3, [r3, #12]
   b5588:	4602      	mov	r2, r0
   b558a:	4620      	mov	r0, r4
}
   b558c:	b002      	add	sp, #8
   b558e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b5592:	4718      	bx	r3

000b5594 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b5594:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b5596:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b5598:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b559c:	68db      	ldr	r3, [r3, #12]
   b559e:	2201      	movs	r2, #1
   b55a0:	f10d 0107 	add.w	r1, sp, #7
   b55a4:	4798      	blx	r3
}
   b55a6:	b003      	add	sp, #12
   b55a8:	f85d fb04 	ldr.w	pc, [sp], #4

000b55ac <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b55ac:	b40e      	push	{r1, r2, r3}
   b55ae:	b503      	push	{r0, r1, lr}
   b55b0:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   b55b2:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b55b4:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   b55b8:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   b55ba:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   b55bc:	f000 ff47 	bl	b644e <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   b55c0:	b002      	add	sp, #8
   b55c2:	f85d eb04 	ldr.w	lr, [sp], #4
   b55c6:	b003      	add	sp, #12
   b55c8:	4770      	bx	lr

000b55ca <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b55ca:	680a      	ldr	r2, [r1, #0]
   b55cc:	6002      	str	r2, [r0, #0]
   b55ce:	684a      	ldr	r2, [r1, #4]
   b55d0:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b55d2:	2200      	movs	r2, #0
   b55d4:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b55d8:	b510      	push	{r4, lr}
   b55da:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b55dc:	688c      	ldr	r4, [r1, #8]
   b55de:	6084      	str	r4, [r0, #8]
   b55e0:	68cc      	ldr	r4, [r1, #12]
   b55e2:	60c4      	str	r4, [r0, #12]
   b55e4:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b55e6:	608a      	str	r2, [r1, #8]
   b55e8:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b55ea:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b55ec:	610a      	str	r2, [r1, #16]
   b55ee:	bd10      	pop	{r4, pc}

000b55f0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b55f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b55f4:	e9d0 8400 	ldrd	r8, r4, [r0]
   b55f8:	f04f 0a14 	mov.w	sl, #20
   b55fc:	9300      	str	r3, [sp, #0]
   b55fe:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b5602:	4b18      	ldr	r3, [pc, #96]	; (b5664 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b5604:	10a4      	asrs	r4, r4, #2
   b5606:	4617      	mov	r7, r2
   b5608:	435c      	muls	r4, r3
   b560a:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b560c:	2c00      	cmp	r4, #0
   b560e:	dd21      	ble.n	b5654 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b5610:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b5612:	fb0a f006 	mul.w	r0, sl, r6
   b5616:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b561a:	463a      	mov	r2, r7
   b561c:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b5620:	5828      	ldr	r0, [r5, r0]
   b5622:	9101      	str	r1, [sp, #4]
   b5624:	455f      	cmp	r7, fp
   b5626:	bf28      	it	cs
   b5628:	465a      	movcs	r2, fp
   b562a:	f003 fce8 	bl	b8ffe <strncmp>
                if (cmp == 0) {
   b562e:	2800      	cmp	r0, #0
   b5630:	9901      	ldr	r1, [sp, #4]
   b5632:	f04f 0301 	mov.w	r3, #1
   b5636:	d10b      	bne.n	b5650 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b5638:	455f      	cmp	r7, fp
   b563a:	d103      	bne.n	b5644 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b563c:	9a00      	ldr	r2, [sp, #0]
   b563e:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b5640:	4634      	mov	r4, r6
   b5642:	e7e3      	b.n	b560c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b5644:	d9fc      	bls.n	b5640 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b5646:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b5648:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b564c:	3e01      	subs	r6, #1
   b564e:	e7f7      	b.n	b5640 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b5650:	dbf9      	blt.n	b5646 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b5652:	e7f5      	b.n	b5640 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b5654:	eba5 0508 	sub.w	r5, r5, r8
}
   b5658:	4802      	ldr	r0, [pc, #8]	; (b5664 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b565a:	10ad      	asrs	r5, r5, #2
   b565c:	4368      	muls	r0, r5
   b565e:	b003      	add	sp, #12
   b5660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5664:	cccccccd 	.word	0xcccccccd

000b5668 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b5668:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b566a:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b566c:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b566e:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b5670:	b303      	cbz	r3, b56b4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b5672:	b1f9      	cbz	r1, b56b4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b5674:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b5676:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b567a:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b567c:	a903      	add	r1, sp, #12
   b567e:	a801      	add	r0, sp, #4
   b5680:	f7ff ff19 	bl	b54b6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b5684:	4601      	mov	r1, r0
   b5686:	b1a8      	cbz	r0, b56b4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b5688:	f10d 030b 	add.w	r3, sp, #11
   b568c:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b568e:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b5692:	4620      	mov	r0, r4
   b5694:	f7ff ffac 	bl	b55f0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b5698:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b569c:	b153      	cbz	r3, b56b4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b569e:	6823      	ldr	r3, [r4, #0]
   b56a0:	2414      	movs	r4, #20
   b56a2:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b56a6:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b56a8:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b56ac:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b56ae:	bfa8      	it	ge
   b56b0:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b56b2:	e7e3      	b.n	b567c <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b56b4:	4628      	mov	r0, r5
   b56b6:	b004      	add	sp, #16
   b56b8:	bd70      	pop	{r4, r5, r6, pc}
	...

000b56bc <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b56bc:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b56be:	4c09      	ldr	r4, [pc, #36]	; (b56e4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b56c0:	7823      	ldrb	r3, [r4, #0]
   b56c2:	f3bf 8f5b 	dmb	ish
   b56c6:	07db      	lsls	r3, r3, #31
   b56c8:	d409      	bmi.n	b56de <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b56ca:	4620      	mov	r0, r4
   b56cc:	f7fe fcf4 	bl	b40b8 <__cxa_guard_acquire>
   b56d0:	b128      	cbz	r0, b56de <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b56d2:	4620      	mov	r0, r4
   b56d4:	f7fe fcf5 	bl	b40c2 <__cxa_guard_release>
   b56d8:	4803      	ldr	r0, [pc, #12]	; (b56e8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b56da:	f003 fbe3 	bl	b8ea4 <atexit>
}
   b56de:	4803      	ldr	r0, [pc, #12]	; (b56ec <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b56e0:	bd10      	pop	{r4, pc}
   b56e2:	bf00      	nop
   b56e4:	2003e6e8 	.word	0x2003e6e8
   b56e8:	000b54af 	.word	0x000b54af
   b56ec:	2003e614 	.word	0x2003e614

000b56f0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b56f0:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b56f2:	4c09      	ldr	r4, [pc, #36]	; (b5718 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b56f4:	7823      	ldrb	r3, [r4, #0]
   b56f6:	f3bf 8f5b 	dmb	ish
   b56fa:	07db      	lsls	r3, r3, #31
   b56fc:	d409      	bmi.n	b5712 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b56fe:	4620      	mov	r0, r4
   b5700:	f7fe fcda 	bl	b40b8 <__cxa_guard_acquire>
   b5704:	b128      	cbz	r0, b5712 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b5706:	4620      	mov	r0, r4
   b5708:	f7fe fcdb 	bl	b40c2 <__cxa_guard_release>
   b570c:	4803      	ldr	r0, [pc, #12]	; (b571c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b570e:	f003 fbc9 	bl	b8ea4 <atexit>
    return &factory;
}
   b5712:	4803      	ldr	r0, [pc, #12]	; (b5720 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b5714:	bd10      	pop	{r4, pc}
   b5716:	bf00      	nop
   b5718:	2003e6ec 	.word	0x2003e6ec
   b571c:	000b5517 	.word	0x000b5517
   b5720:	2003e618 	.word	0x2003e618

000b5724 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b5724:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b5726:	2500      	movs	r5, #0
   b5728:	4604      	mov	r4, r0
   b572a:	e9c0 5500 	strd	r5, r5, [r0]
   b572e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b5732:	6085      	str	r5, [r0, #8]
   b5734:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b5736:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b573a:	f7ff f819 	bl	b4770 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b573e:	f7ff ffbd 	bl	b56bc <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b5742:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b5744:	f7ff ffd4 	bl	b56f0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b5748:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b574a:	6220      	str	r0, [r4, #32]
}
   b574c:	4620      	mov	r0, r4
   b574e:	bd38      	pop	{r3, r4, r5, pc}

000b5750 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b5750:	b510      	push	{r4, lr}
    static LogManager mgr;
   b5752:	4c0a      	ldr	r4, [pc, #40]	; (b577c <_ZN5spark10LogManager8instanceEv+0x2c>)
   b5754:	7823      	ldrb	r3, [r4, #0]
   b5756:	f3bf 8f5b 	dmb	ish
   b575a:	07db      	lsls	r3, r3, #31
   b575c:	d40c      	bmi.n	b5778 <_ZN5spark10LogManager8instanceEv+0x28>
   b575e:	4620      	mov	r0, r4
   b5760:	f7fe fcaa 	bl	b40b8 <__cxa_guard_acquire>
   b5764:	b140      	cbz	r0, b5778 <_ZN5spark10LogManager8instanceEv+0x28>
   b5766:	4806      	ldr	r0, [pc, #24]	; (b5780 <_ZN5spark10LogManager8instanceEv+0x30>)
   b5768:	f7ff ffdc 	bl	b5724 <_ZN5spark10LogManagerC1Ev>
   b576c:	4620      	mov	r0, r4
   b576e:	f7fe fca8 	bl	b40c2 <__cxa_guard_release>
   b5772:	4804      	ldr	r0, [pc, #16]	; (b5784 <_ZN5spark10LogManager8instanceEv+0x34>)
   b5774:	f003 fb96 	bl	b8ea4 <atexit>
    return &mgr;
}
   b5778:	4801      	ldr	r0, [pc, #4]	; (b5780 <_ZN5spark10LogManager8instanceEv+0x30>)
   b577a:	bd10      	pop	{r4, pc}
   b577c:	2003e6e4 	.word	0x2003e6e4
   b5780:	2003e6f4 	.word	0x2003e6f4
   b5784:	000b5cc9 	.word	0x000b5cc9

000b5788 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b5788:	4a02      	ldr	r2, [pc, #8]	; (b5794 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b578a:	4903      	ldr	r1, [pc, #12]	; (b5798 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b578c:	4803      	ldr	r0, [pc, #12]	; (b579c <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b578e:	2300      	movs	r3, #0
   b5790:	f7ff b8c6 	b.w	b4920 <log_set_callbacks>
   b5794:	000b5aad 	.word	0x000b5aad
   b5798:	000b5a39 	.word	0x000b5a39
   b579c:	000b59b9 	.word	0x000b59b9

000b57a0 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b57a0:	2300      	movs	r3, #0
   b57a2:	461a      	mov	r2, r3
   b57a4:	4619      	mov	r1, r3
   b57a6:	4618      	mov	r0, r3
   b57a8:	f7ff b8ba 	b.w	b4920 <log_set_callbacks>

000b57ac <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b57ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b57ae:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b57b0:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b57b2:	4668      	mov	r0, sp
   b57b4:	f7ff fec8 	bl	b5548 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b57b8:	466a      	mov	r2, sp
   b57ba:	4629      	mov	r1, r5
   b57bc:	4620      	mov	r0, r4
   b57be:	f7ff fa87 	bl	b4cd0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b57c2:	a801      	add	r0, sp, #4
   b57c4:	f7ff fb74 	bl	b4eb0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b57c8:	4620      	mov	r0, r4
   b57ca:	b003      	add	sp, #12
   b57cc:	bd30      	pop	{r4, r5, pc}

000b57ce <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b57ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b57d0:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b57d2:	4604      	mov	r4, r0
   b57d4:	4668      	mov	r0, sp
   b57d6:	f7ff feb7 	bl	b5548 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b57da:	466a      	mov	r2, sp
   b57dc:	4629      	mov	r1, r5
   b57de:	4620      	mov	r0, r4
   b57e0:	f7ff fa52 	bl	b4c88 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b57e4:	a801      	add	r0, sp, #4
   b57e6:	f7ff fb63 	bl	b4eb0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b57ea:	4620      	mov	r0, r4
   b57ec:	b003      	add	sp, #12
   b57ee:	bd30      	pop	{r4, r5, pc}

000b57f0 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b57f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b57f2:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b57f4:	4604      	mov	r4, r0
   b57f6:	4668      	mov	r0, sp
   b57f8:	f7ff fea6 	bl	b5548 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b57fc:	466a      	mov	r2, sp
   b57fe:	4629      	mov	r1, r5
   b5800:	4620      	mov	r0, r4
   b5802:	f7ff f9ea 	bl	b4bda <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b5806:	a801      	add	r0, sp, #4
   b5808:	f7ff fb52 	bl	b4eb0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b580c:	4620      	mov	r0, r4
   b580e:	b003      	add	sp, #12
   b5810:	bd30      	pop	{r4, r5, pc}
	...

000b5814 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b5814:	b570      	push	{r4, r5, r6, lr}
   b5816:	b08a      	sub	sp, #40	; 0x28
   b5818:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b581a:	4601      	mov	r1, r0
   b581c:	a804      	add	r0, sp, #16
   b581e:	f7ff ffc5 	bl	b57ac <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b5822:	4e14      	ldr	r6, [pc, #80]	; (b5874 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b5824:	a804      	add	r0, sp, #16
   b5826:	f7ff fa6b 	bl	b4d00 <_ZN5spark18JSONObjectIterator4nextEv>
   b582a:	b1e8      	cbz	r0, b5868 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b582c:	a904      	add	r1, sp, #16
   b582e:	4668      	mov	r0, sp
   b5830:	f7ff ffcd 	bl	b57ce <_ZNK5spark18JSONObjectIterator4nameEv>
   b5834:	9802      	ldr	r0, [sp, #8]
   b5836:	4631      	mov	r1, r6
   b5838:	f7ff fe66 	bl	b5508 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b583c:	4604      	mov	r4, r0
   b583e:	b110      	cbz	r0, b5846 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b5840:	1e2c      	subs	r4, r5, #0
   b5842:	bf18      	it	ne
   b5844:	2401      	movne	r4, #1
   b5846:	a801      	add	r0, sp, #4
   b5848:	f7ff fb32 	bl	b4eb0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b584c:	2c00      	cmp	r4, #0
   b584e:	d0e9      	beq.n	b5824 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b5850:	a904      	add	r1, sp, #16
   b5852:	4668      	mov	r0, sp
   b5854:	f7ff ffcc 	bl	b57f0 <_ZNK5spark18JSONObjectIterator5valueEv>
   b5858:	4668      	mov	r0, sp
   b585a:	f7ff f9f4 	bl	b4c46 <_ZNK5spark9JSONValue5toIntEv>
   b585e:	6028      	str	r0, [r5, #0]
   b5860:	a801      	add	r0, sp, #4
   b5862:	f7ff fb25 	bl	b4eb0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5866:	e7dd      	b.n	b5824 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b5868:	a805      	add	r0, sp, #20
   b586a:	f7ff fb21 	bl	b4eb0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b586e:	b00a      	add	sp, #40	; 0x28
   b5870:	bd70      	pop	{r4, r5, r6, pc}
   b5872:	bf00      	nop
   b5874:	000b94f0 	.word	0x000b94f0

000b5878 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b5878:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b587a:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b587c:	4620      	mov	r0, r4
   b587e:	4913      	ldr	r1, [pc, #76]	; (b58cc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b5880:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b5882:	f003 fba2 	bl	b8fca <strcmp>
   b5886:	b950      	cbnz	r0, b589e <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b5888:	f7ff fca4 	bl	b51d4 <_Z16_fetch_usbserialv>
   b588c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5890:	f7ff fc90 	bl	b51b4 <_ZN9USBSerial5beginEl>
}
   b5894:	b003      	add	sp, #12
   b5896:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b589a:	f7ff bc9b 	b.w	b51d4 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b589e:	490c      	ldr	r1, [pc, #48]	; (b58d0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b58a0:	4620      	mov	r0, r4
   b58a2:	f003 fb92 	bl	b8fca <strcmp>
   b58a6:	b978      	cbnz	r0, b58c8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b58a8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b58ac:	a901      	add	r1, sp, #4
   b58ae:	4628      	mov	r0, r5
        int baud = 9600;
   b58b0:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b58b2:	f7ff ffaf 	bl	b5814 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b58b6:	f003 f9b7 	bl	b8c28 <_Z22__fetch_global_Serial1v>
   b58ba:	9901      	ldr	r1, [sp, #4]
   b58bc:	f003 f84a 	bl	b8954 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b58c0:	f003 f9b2 	bl	b8c28 <_Z22__fetch_global_Serial1v>
}
   b58c4:	b003      	add	sp, #12
   b58c6:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b58c8:	2000      	movs	r0, #0
   b58ca:	e7fb      	b.n	b58c4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b58cc:	000b94f5 	.word	0x000b94f5
   b58d0:	000b94fc 	.word	0x000b94fc

000b58d4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b58d4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b58d6:	e9d0 5300 	ldrd	r5, r3, [r0]
   b58da:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b58dc:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b58de:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b58e2:	42ae      	cmp	r6, r5
   b58e4:	d005      	beq.n	b58f2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b58e6:	f105 0008 	add.w	r0, r5, #8
   b58ea:	f7ff fff3 	bl	b58d4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b58ee:	3514      	adds	r5, #20
   b58f0:	e7f7      	b.n	b58e2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b58f2:	6820      	ldr	r0, [r4, #0]
   b58f4:	f7ff f8b8 	bl	b4a68 <free>
}
   b58f8:	4620      	mov	r0, r4
   b58fa:	bd70      	pop	{r4, r5, r6, pc}

000b58fc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b58fc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b58fe:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5902:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b5904:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b5908:	42ae      	cmp	r6, r5
   b590a:	d004      	beq.n	b5916 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b590c:	4628      	mov	r0, r5
   b590e:	f003 f877 	bl	b8a00 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b5912:	3510      	adds	r5, #16
   b5914:	e7f8      	b.n	b5908 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b5916:	6820      	ldr	r0, [r4, #0]
   b5918:	f7ff f8a6 	bl	b4a68 <free>
}
   b591c:	4620      	mov	r0, r4
   b591e:	bd70      	pop	{r4, r5, r6, pc}

000b5920 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b5920:	b510      	push	{r4, lr}
   b5922:	4604      	mov	r4, r0
   b5924:	300c      	adds	r0, #12
   b5926:	f7ff ffd5 	bl	b58d4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b592a:	4620      	mov	r0, r4
   b592c:	f7ff ffe6 	bl	b58fc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b5930:	4620      	mov	r0, r4
   b5932:	bd10      	pop	{r4, pc}

000b5934 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b5934:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b5936:	4b04      	ldr	r3, [pc, #16]	; (b5948 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b5938:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b593a:	f840 3b04 	str.w	r3, [r0], #4
   b593e:	f7ff ffef 	bl	b5920 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b5942:	4620      	mov	r0, r4
   b5944:	bd10      	pop	{r4, pc}
   b5946:	bf00      	nop
   b5948:	000b9304 	.word	0x000b9304

000b594c <_ZN5spark16StreamLogHandlerD0Ev>:
   b594c:	b510      	push	{r4, lr}
   b594e:	4604      	mov	r4, r0
   b5950:	f7ff fff0 	bl	b5934 <_ZN5spark16StreamLogHandlerD1Ev>
   b5954:	4620      	mov	r0, r4
   b5956:	2124      	movs	r1, #36	; 0x24
   b5958:	f7fe fb9f 	bl	b409a <_ZdlPvj>
   b595c:	4620      	mov	r0, r4
   b595e:	bd10      	pop	{r4, pc}

000b5960 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b5960:	b510      	push	{r4, lr}
   b5962:	4b03      	ldr	r3, [pc, #12]	; (b5970 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b5964:	6003      	str	r3, [r0, #0]
   b5966:	4604      	mov	r4, r0
   b5968:	f7ff ffe4 	bl	b5934 <_ZN5spark16StreamLogHandlerD1Ev>
   b596c:	4620      	mov	r0, r4
   b596e:	bd10      	pop	{r4, pc}
   b5970:	000b9594 	.word	0x000b9594

000b5974 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b5974:	b510      	push	{r4, lr}
   b5976:	4604      	mov	r4, r0
   b5978:	f7ff fff2 	bl	b5960 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b597c:	4620      	mov	r0, r4
   b597e:	2124      	movs	r1, #36	; 0x24
   b5980:	f7fe fb8b 	bl	b409a <_ZdlPvj>
   b5984:	4620      	mov	r0, r4
   b5986:	bd10      	pop	{r4, pc}

000b5988 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   b5988:	2200      	movs	r2, #0
   b598a:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b598e:	b510      	push	{r4, lr}
        capacity_(0) {
   b5990:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b5992:	680c      	ldr	r4, [r1, #0]
   b5994:	6004      	str	r4, [r0, #0]
   b5996:	684c      	ldr	r4, [r1, #4]
   b5998:	6044      	str	r4, [r0, #4]
   b599a:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b599c:	600a      	str	r2, [r1, #0]
   b599e:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b59a0:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b59a2:	608a      	str	r2, [r1, #8]
}
   b59a4:	bd10      	pop	{r4, pc}

000b59a6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b59a6:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b59a8:	6803      	ldr	r3, [r0, #0]
   b59aa:	4604      	mov	r4, r0
   b59ac:	6818      	ldr	r0, [r3, #0]
   b59ae:	f7fe fef7 	bl	b47a0 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b59b2:	4620      	mov	r0, r4
   b59b4:	bd10      	pop	{r4, pc}
	...

000b59b8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b59b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b59bc:	b087      	sub	sp, #28
   b59be:	4680      	mov	r8, r0
   b59c0:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b59c2:	4b1c      	ldr	r3, [pc, #112]	; (b5a34 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b59c4:	685b      	ldr	r3, [r3, #4]
   b59c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b59ca:	4689      	mov	r9, r1
   b59cc:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   b59ce:	b96b      	cbnz	r3, b59ec <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b59d0:	f7ff febe 	bl	b5750 <_ZN5spark10LogManager8instanceEv>
   b59d4:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b59d6:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b59da:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b59dc:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b59de:	f7ff fd91 	bl	b5504 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b59e2:	7b23      	ldrb	r3, [r4, #12]
   b59e4:	b12b      	cbz	r3, b59f2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b59e6:	a805      	add	r0, sp, #20
   b59e8:	f7ff ffdd 	bl	b59a6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b59ec:	b007      	add	sp, #28
   b59ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b59f2:	2301      	movs	r3, #1
   b59f4:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b59f6:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b59fa:	fa5f f989 	uxtb.w	r9, r9
   b59fe:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b5a02:	45aa      	cmp	sl, r5
   b5a04:	d012      	beq.n	b5a2c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b5a06:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b5a0a:	4631      	mov	r1, r6
   b5a0c:	1d38      	adds	r0, r7, #4
   b5a0e:	f7ff fe2b 	bl	b5668 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b5a12:	4581      	cmp	r9, r0
   b5a14:	d3f5      	bcc.n	b5a02 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b5a16:	683b      	ldr	r3, [r7, #0]
   b5a18:	9a03      	ldr	r2, [sp, #12]
   b5a1a:	9200      	str	r2, [sp, #0]
   b5a1c:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b5a20:	464a      	mov	r2, r9
   b5a22:	4633      	mov	r3, r6
   b5a24:	4641      	mov	r1, r8
   b5a26:	4638      	mov	r0, r7
   b5a28:	47d8      	blx	fp
   b5a2a:	e7ea      	b.n	b5a02 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b5a2c:	2300      	movs	r3, #0
   b5a2e:	7323      	strb	r3, [r4, #12]
   b5a30:	e7d9      	b.n	b59e6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b5a32:	bf00      	nop
   b5a34:	e000ed00 	.word	0xe000ed00

000b5a38 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b5a38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5a3c:	469b      	mov	fp, r3
   b5a3e:	4b1a      	ldr	r3, [pc, #104]	; (b5aa8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b5a40:	685b      	ldr	r3, [r3, #4]
   b5a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b5a46:	4680      	mov	r8, r0
   b5a48:	4689      	mov	r9, r1
   b5a4a:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   b5a4c:	b96b      	cbnz	r3, b5a6a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b5a4e:	f7ff fe7f 	bl	b5750 <_ZN5spark10LogManager8instanceEv>
   b5a52:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b5a54:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b5a58:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5a5a:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b5a5c:	f7ff fd52 	bl	b5504 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b5a60:	7b23      	ldrb	r3, [r4, #12]
   b5a62:	b12b      	cbz	r3, b5a70 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b5a64:	a801      	add	r0, sp, #4
   b5a66:	f7ff ff9e 	bl	b59a6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b5a6a:	b003      	add	sp, #12
   b5a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b5a70:	2301      	movs	r3, #1
   b5a72:	7323      	strb	r3, [r4, #12]
   b5a74:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b5a78:	b2f6      	uxtb	r6, r6
   b5a7a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b5a7e:	4555      	cmp	r5, sl
   b5a80:	d00e      	beq.n	b5aa0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b5a82:	f855 7b04 	ldr.w	r7, [r5], #4
   b5a86:	4659      	mov	r1, fp
   b5a88:	1d38      	adds	r0, r7, #4
   b5a8a:	f7ff fded 	bl	b5668 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b5a8e:	4286      	cmp	r6, r0
   b5a90:	d3f5      	bcc.n	b5a7e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b5a92:	683b      	ldr	r3, [r7, #0]
   b5a94:	464a      	mov	r2, r9
   b5a96:	68db      	ldr	r3, [r3, #12]
   b5a98:	4641      	mov	r1, r8
   b5a9a:	4638      	mov	r0, r7
   b5a9c:	4798      	blx	r3
   b5a9e:	e7ee      	b.n	b5a7e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b5aa0:	2300      	movs	r3, #0
   b5aa2:	7323      	strb	r3, [r4, #12]
   b5aa4:	e7de      	b.n	b5a64 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b5aa6:	bf00      	nop
   b5aa8:	e000ed00 	.word	0xe000ed00

000b5aac <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b5aac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5ab0:	4b16      	ldr	r3, [pc, #88]	; (b5b0c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b5ab2:	685b      	ldr	r3, [r3, #4]
   b5ab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b5ab8:	4605      	mov	r5, r0
   b5aba:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   b5abc:	bb1b      	cbnz	r3, b5b06 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b5abe:	f7ff fe47 	bl	b5750 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b5ac2:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b5ac6:	4604      	mov	r4, r0
   b5ac8:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5aca:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b5acc:	f7ff fd1a 	bl	b5504 <_ZN14RecursiveMutex4lockEv.isra.0>
   b5ad0:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b5ad4:	2446      	movs	r4, #70	; 0x46
   b5ad6:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b5ada:	45b0      	cmp	r8, r6
   b5adc:	d109      	bne.n	b5af2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b5ade:	a801      	add	r0, sp, #4
   b5ae0:	f7ff ff61 	bl	b59a6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b5ae4:	42a5      	cmp	r5, r4
   b5ae6:	bfb4      	ite	lt
   b5ae8:	2000      	movlt	r0, #0
   b5aea:	2001      	movge	r0, #1
}
   b5aec:	b002      	add	sp, #8
   b5aee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b5af2:	f856 0b04 	ldr.w	r0, [r6], #4
   b5af6:	4639      	mov	r1, r7
   b5af8:	3004      	adds	r0, #4
   b5afa:	f7ff fdb5 	bl	b5668 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b5afe:	4284      	cmp	r4, r0
   b5b00:	bfa8      	it	ge
   b5b02:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b5b04:	e7e9      	b.n	b5ada <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b5b06:	2000      	movs	r0, #0
   b5b08:	e7f0      	b.n	b5aec <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b5b0a:	bf00      	nop
   b5b0c:	e000ed00 	.word	0xe000ed00

000b5b10 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5b12:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b5b16:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5b18:	4604      	mov	r4, r0
   b5b1a:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5b1c:	db0d      	blt.n	b5b3a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b5b1e:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b5b20:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b5b22:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b5b24:	dd04      	ble.n	b5b30 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b5b26:	00b9      	lsls	r1, r7, #2
   b5b28:	f7fe ffa6 	bl	b4a78 <realloc>
            if (!d) {
   b5b2c:	b918      	cbnz	r0, b5b36 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b5b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b5b30:	f7fe ff9a 	bl	b4a68 <free>
        T* d = nullptr;
   b5b34:	2000      	movs	r0, #0
        data_ = d;
   b5b36:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b5b38:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b5b3a:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b5b3c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b5b3e:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b5b42:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5b44:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b5b48:	1d08      	adds	r0, r1, #4
   b5b4a:	f003 f9d7 	bl	b8efc <memmove>
    new(p) T(std::move(value));
   b5b4e:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b5b52:	6863      	ldr	r3, [r4, #4]
   b5b54:	3301      	adds	r3, #1
   b5b56:	6063      	str	r3, [r4, #4]
    return true;
   b5b58:	2001      	movs	r0, #1
   b5b5a:	e7e8      	b.n	b5b2e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b5b5c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b5b5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b5b5e:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b5b62:	4604      	mov	r4, r0
   b5b64:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5b66:	9301      	str	r3, [sp, #4]
   b5b68:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b5b6a:	f7ff fccb 	bl	b5504 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b5b6e:	e9d4 3200 	ldrd	r3, r2, [r4]
   b5b72:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b5b76:	4293      	cmp	r3, r2
   b5b78:	4619      	mov	r1, r3
   b5b7a:	d00b      	beq.n	b5b94 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b5b7c:	6809      	ldr	r1, [r1, #0]
   b5b7e:	42a9      	cmp	r1, r5
   b5b80:	f103 0304 	add.w	r3, r3, #4
   b5b84:	d1f7      	bne.n	b5b76 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b5b86:	a801      	add	r0, sp, #4
   b5b88:	f7ff ff0d 	bl	b59a6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b5b8c:	2500      	movs	r5, #0
}
   b5b8e:	4628      	mov	r0, r5
   b5b90:	b003      	add	sp, #12
   b5b92:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b5b94:	4629      	mov	r1, r5
   b5b96:	4620      	mov	r0, r4
   b5b98:	f7ff ffba 	bl	b5b10 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b5b9c:	4605      	mov	r5, r0
   b5b9e:	2800      	cmp	r0, #0
   b5ba0:	d0f1      	beq.n	b5b86 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b5ba2:	6863      	ldr	r3, [r4, #4]
   b5ba4:	2b01      	cmp	r3, #1
   b5ba6:	d101      	bne.n	b5bac <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b5ba8:	f7ff fdee 	bl	b5788 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b5bac:	a801      	add	r0, sp, #4
   b5bae:	f7ff fefa 	bl	b59a6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b5bb2:	e7ec      	b.n	b5b8e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b5bb4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b5bb4:	b570      	push	{r4, r5, r6, lr}
   b5bb6:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b5bb8:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b5bbc:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b5bbe:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b5bc2:	4282      	cmp	r2, r0
   b5bc4:	d00f      	beq.n	b5be6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b5bc6:	4601      	mov	r1, r0
            if (*p == value) {
   b5bc8:	681d      	ldr	r5, [r3, #0]
   b5bca:	f851 6b04 	ldr.w	r6, [r1], #4
   b5bce:	42ae      	cmp	r6, r5
   b5bd0:	d107      	bne.n	b5be2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5bd2:	1a52      	subs	r2, r2, r1
   b5bd4:	f003 f992 	bl	b8efc <memmove>
    --size_;
   b5bd8:	6863      	ldr	r3, [r4, #4]
   b5bda:	3b01      	subs	r3, #1
   b5bdc:	6063      	str	r3, [r4, #4]
    return true;
   b5bde:	2001      	movs	r0, #1
}
   b5be0:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b5be2:	4608      	mov	r0, r1
   b5be4:	e7ed      	b.n	b5bc2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b5be6:	2000      	movs	r0, #0
   b5be8:	e7fa      	b.n	b5be0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b5bea <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b5bea:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b5bec:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b5bf0:	4604      	mov	r4, r0
   b5bf2:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b5bf4:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5bf6:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b5bf8:	f7ff fc84 	bl	b5504 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b5bfc:	a901      	add	r1, sp, #4
   b5bfe:	4620      	mov	r0, r4
   b5c00:	f7ff ffd8 	bl	b5bb4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b5c04:	b118      	cbz	r0, b5c0e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b5c06:	6863      	ldr	r3, [r4, #4]
   b5c08:	b90b      	cbnz	r3, b5c0e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b5c0a:	f7ff fdc9 	bl	b57a0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b5c0e:	a803      	add	r0, sp, #12
   b5c10:	f7ff fec9 	bl	b59a6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b5c14:	b004      	add	sp, #16
   b5c16:	bd10      	pop	{r4, pc}

000b5c18 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   b5c18:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   b5c1a:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   b5c1e:	2318      	movs	r3, #24
   b5c20:	4604      	mov	r4, r0
   b5c22:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   b5c26:	42ae      	cmp	r6, r5
   b5c28:	d015      	beq.n	b5c56 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   b5c2a:	f105 0110 	add.w	r1, r5, #16
   b5c2e:	4620      	mov	r0, r4
   b5c30:	f7ff ffc0 	bl	b5bb4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   b5c34:	6863      	ldr	r3, [r4, #4]
   b5c36:	b90b      	cbnz	r3, b5c3c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   b5c38:	f7ff fdb2 	bl	b57a0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   b5c3c:	69e0      	ldr	r0, [r4, #28]
   b5c3e:	6929      	ldr	r1, [r5, #16]
   b5c40:	6803      	ldr	r3, [r0, #0]
   b5c42:	68db      	ldr	r3, [r3, #12]
   b5c44:	4798      	blx	r3
        if (h.stream) {
   b5c46:	6969      	ldr	r1, [r5, #20]
   b5c48:	b119      	cbz	r1, b5c52 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   b5c4a:	6a20      	ldr	r0, [r4, #32]
   b5c4c:	6803      	ldr	r3, [r0, #0]
   b5c4e:	68db      	ldr	r3, [r3, #12]
   b5c50:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   b5c52:	3518      	adds	r5, #24
   b5c54:	e7e7      	b.n	b5c26 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   b5c56:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b5c5a:	2618      	movs	r6, #24
   b5c5c:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b5c60:	42ae      	cmp	r6, r5
   b5c62:	d004      	beq.n	b5c6e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   b5c64:	4628      	mov	r0, r5
   b5c66:	f002 fecb 	bl	b8a00 <_ZN6StringD1Ev>
   b5c6a:	3518      	adds	r5, #24
   b5c6c:	e7f8      	b.n	b5c60 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   b5c6e:	2300      	movs	r3, #0
   b5c70:	6163      	str	r3, [r4, #20]
}
   b5c72:	bd70      	pop	{r4, r5, r6, pc}

000b5c74 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   b5c74:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5c76:	4604      	mov	r4, r0
    resetSystemCallbacks();
   b5c78:	f7ff fd92 	bl	b57a0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b5c7c:	f104 0324 	add.w	r3, r4, #36	; 0x24
   b5c80:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5c82:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b5c84:	f7ff fc3e 	bl	b5504 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   b5c88:	4620      	mov	r0, r4
   b5c8a:	f7ff ffc5 	bl	b5c18 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   b5c8e:	a801      	add	r0, sp, #4
   b5c90:	f7ff fe89 	bl	b59a6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   b5c94:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5c96:	b108      	cbz	r0, b5c9c <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   b5c98:	f7fe fd72 	bl	b4780 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   b5c9c:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b5ca0:	2618      	movs	r6, #24
   b5ca2:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b5ca6:	42ae      	cmp	r6, r5
   b5ca8:	d004      	beq.n	b5cb4 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   b5caa:	4628      	mov	r0, r5
   b5cac:	f002 fea8 	bl	b8a00 <_ZN6StringD1Ev>
   b5cb0:	3518      	adds	r5, #24
   b5cb2:	e7f8      	b.n	b5ca6 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   b5cb4:	6920      	ldr	r0, [r4, #16]
   b5cb6:	f7fe fed7 	bl	b4a68 <free>
   b5cba:	6820      	ldr	r0, [r4, #0]
   b5cbc:	f7fe fed4 	bl	b4a68 <free>
}
   b5cc0:	4620      	mov	r0, r4
   b5cc2:	b002      	add	sp, #8
   b5cc4:	bd70      	pop	{r4, r5, r6, pc}
	...

000b5cc8 <__tcf_2>:
    static LogManager mgr;
   b5cc8:	4801      	ldr	r0, [pc, #4]	; (b5cd0 <__tcf_2+0x8>)
   b5cca:	f7ff bfd3 	b.w	b5c74 <_ZN5spark10LogManagerD1Ev>
   b5cce:	bf00      	nop
   b5cd0:	2003e6f4 	.word	0x2003e6f4

000b5cd4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   b5cd4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5cd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5cd8:	4604      	mov	r4, r0
   b5cda:	460d      	mov	r5, r1
   b5cdc:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5cde:	d915      	bls.n	b5d0c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   b5ce0:	4290      	cmp	r0, r2
   b5ce2:	d214      	bcs.n	b5d0e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   b5ce4:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b5ce8:	1a75      	subs	r5, r6, r1
   b5cea:	f1a1 0714 	sub.w	r7, r1, #20
   b5cee:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5cf0:	42b7      	cmp	r7, r6
   b5cf2:	d01a      	beq.n	b5d2a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   b5cf4:	b11c      	cbz	r4, b5cfe <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   b5cf6:	4631      	mov	r1, r6
   b5cf8:	4620      	mov	r0, r4
   b5cfa:	f7ff fc66 	bl	b55ca <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   b5cfe:	f106 0008 	add.w	r0, r6, #8
   b5d02:	f7ff fde7 	bl	b58d4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   b5d06:	3e14      	subs	r6, #20
   b5d08:	3c14      	subs	r4, #20
   b5d0a:	e7f1      	b.n	b5cf0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   b5d0c:	d00d      	beq.n	b5d2a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   b5d0e:	42b5      	cmp	r5, r6
   b5d10:	d00b      	beq.n	b5d2a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   b5d12:	b11c      	cbz	r4, b5d1c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   b5d14:	4629      	mov	r1, r5
   b5d16:	4620      	mov	r0, r4
   b5d18:	f7ff fc57 	bl	b55ca <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   b5d1c:	f105 0008 	add.w	r0, r5, #8
   b5d20:	f7ff fdd8 	bl	b58d4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   b5d24:	3514      	adds	r5, #20
   b5d26:	3414      	adds	r4, #20
   b5d28:	e7f1      	b.n	b5d0e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   b5d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5d2c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b5d2c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5d2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5d30:	4604      	mov	r4, r0
   b5d32:	460d      	mov	r5, r1
   b5d34:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5d36:	d914      	bls.n	b5d62 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b5d38:	4290      	cmp	r0, r2
   b5d3a:	d213      	bcs.n	b5d64 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b5d3c:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   b5d40:	1a75      	subs	r5, r6, r1
   b5d42:	f1a1 0710 	sub.w	r7, r1, #16
   b5d46:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5d48:	42b7      	cmp	r7, r6
   b5d4a:	d018      	beq.n	b5d7e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b5d4c:	b11c      	cbz	r4, b5d56 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b5d4e:	4631      	mov	r1, r6
   b5d50:	4620      	mov	r0, r4
   b5d52:	f002 fed1 	bl	b8af8 <_ZN6StringC1EOS_>
                end->~T();
   b5d56:	4630      	mov	r0, r6
   b5d58:	f002 fe52 	bl	b8a00 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b5d5c:	3e10      	subs	r6, #16
   b5d5e:	3c10      	subs	r4, #16
   b5d60:	e7f2      	b.n	b5d48 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b5d62:	d00c      	beq.n	b5d7e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b5d64:	42b5      	cmp	r5, r6
   b5d66:	d00a      	beq.n	b5d7e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b5d68:	b11c      	cbz	r4, b5d72 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b5d6a:	4629      	mov	r1, r5
   b5d6c:	4620      	mov	r0, r4
   b5d6e:	f002 fec3 	bl	b8af8 <_ZN6StringC1EOS_>
                p->~T();
   b5d72:	4628      	mov	r0, r5
   b5d74:	f002 fe44 	bl	b8a00 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b5d78:	3510      	adds	r5, #16
   b5d7a:	3410      	adds	r4, #16
   b5d7c:	e7f2      	b.n	b5d64 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b5d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5d80 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b5d80:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b5d82:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b5d84:	4605      	mov	r5, r0
        if (n > 0) {
   b5d86:	dd11      	ble.n	b5dac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   b5d88:	0130      	lsls	r0, r6, #4
   b5d8a:	f7fe fe65 	bl	b4a58 <malloc>
            if (!d) {
   b5d8e:	4604      	mov	r4, r0
   b5d90:	b158      	cbz	r0, b5daa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b5d92:	e9d5 1200 	ldrd	r1, r2, [r5]
   b5d96:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   b5d9a:	f7ff ffc7 	bl	b5d2c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b5d9e:	6828      	ldr	r0, [r5, #0]
   b5da0:	f7fe fe62 	bl	b4a68 <free>
        data_ = d;
   b5da4:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b5da6:	60ae      	str	r6, [r5, #8]
        return true;
   b5da8:	2001      	movs	r0, #1
    }
   b5daa:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b5dac:	2400      	movs	r4, #0
   b5dae:	e7f6      	b.n	b5d9e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000b5db0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b5db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5db4:	4690      	mov	r8, r2
   b5db6:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   b5db8:	2300      	movs	r3, #0
   b5dba:	9103      	str	r1, [sp, #12]
    return size_;
   b5dbc:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   b5dc0:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b5dc2:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   b5dc4:	4299      	cmp	r1, r3
        capacity_(0) {
   b5dc6:	e9c0 3300 	strd	r3, r3, [r0]
   b5dca:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b5dce:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b5dd2:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b5dd6:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b5dd8:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   b5dda:	dc23      	bgt.n	b5e24 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   b5ddc:	e9d8 5700 	ldrd	r5, r7, [r8]
   b5de0:	2314      	movs	r3, #20
   b5de2:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   b5de6:	42af      	cmp	r7, r5
   b5de8:	d03b      	beq.n	b5e62 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   b5dea:	4629      	mov	r1, r5
   b5dec:	a80b      	add	r0, sp, #44	; 0x2c
   b5dee:	f002 fe83 	bl	b8af8 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   b5df2:	a90b      	add	r1, sp, #44	; 0x2c
   b5df4:	a80f      	add	r0, sp, #60	; 0x3c
   b5df6:	9e09      	ldr	r6, [sp, #36]	; 0x24
   b5df8:	f002 fe7e 	bl	b8af8 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5dfc:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   b5e00:	4299      	cmp	r1, r3
   b5e02:	da1b      	bge.n	b5e3c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   b5e04:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   b5e06:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   b5e08:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   b5e0c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b5e10:	4631      	mov	r1, r6
   b5e12:	f106 0010 	add.w	r0, r6, #16
   b5e16:	f7ff ff89 	bl	b5d2c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b5e1a:	b9ee      	cbnz	r6, b5e58 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   b5e1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b5e1e:	3301      	adds	r3, #1
   b5e20:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   b5e22:	e011      	b.n	b5e48 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   b5e24:	a808      	add	r0, sp, #32
   b5e26:	f7ff ffab 	bl	b5d80 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b5e2a:	2800      	cmp	r0, #0
   b5e2c:	d1d6      	bne.n	b5ddc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   b5e2e:	a808      	add	r0, sp, #32
   b5e30:	f7ff fd64 	bl	b58fc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b5e34:	4620      	mov	r0, r4
   b5e36:	b015      	add	sp, #84	; 0x54
   b5e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5e3c:	3101      	adds	r1, #1
   b5e3e:	a808      	add	r0, sp, #32
   b5e40:	f7ff ff9e 	bl	b5d80 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b5e44:	2800      	cmp	r0, #0
   b5e46:	d1dd      	bne.n	b5e04 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   b5e48:	a80f      	add	r0, sp, #60	; 0x3c
   b5e4a:	f002 fdd9 	bl	b8a00 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   b5e4e:	a80b      	add	r0, sp, #44	; 0x2c
   b5e50:	f002 fdd6 	bl	b8a00 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   b5e54:	3514      	adds	r5, #20
   b5e56:	e7c6      	b.n	b5de6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   b5e58:	a90f      	add	r1, sp, #60	; 0x3c
   b5e5a:	4630      	mov	r0, r6
   b5e5c:	f002 fe4c 	bl	b8af8 <_ZN6StringC1EOS_>
   b5e60:	e7dc      	b.n	b5e1c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   b5e62:	2600      	movs	r6, #0
   b5e64:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   b5e68:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   b5e6a:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   b5e6e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b5e72:	429e      	cmp	r6, r3
   b5e74:	da7c      	bge.n	b5f70 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b5e76:	0133      	lsls	r3, r6, #4
   b5e78:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   b5e7a:	9306      	str	r3, [sp, #24]
        if (!category) {
   b5e7c:	b90b      	cbnz	r3, b5e82 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   b5e7e:	3601      	adds	r6, #1
   b5e80:	e7f5      	b.n	b5e6e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   b5e82:	2300      	movs	r3, #0
   b5e84:	9307      	str	r3, [sp, #28]
   b5e86:	fb09 f306 	mul.w	r3, r9, r6
   b5e8a:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   b5e8c:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   b5e8e:	a907      	add	r1, sp, #28
   b5e90:	a806      	add	r0, sp, #24
   b5e92:	f7ff fb10 	bl	b54b6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b5e96:	4682      	mov	sl, r0
   b5e98:	2800      	cmp	r0, #0
   b5e9a:	d0f0      	beq.n	b5e7e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   b5e9c:	f04f 0300 	mov.w	r3, #0
   b5ea0:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b5ea4:	4601      	mov	r1, r0
   b5ea6:	9a07      	ldr	r2, [sp, #28]
   b5ea8:	f10d 0317 	add.w	r3, sp, #23
   b5eac:	4628      	mov	r0, r5
   b5eae:	f7ff fb9f 	bl	b55f0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b5eb2:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b5eb6:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b5eb8:	2f00      	cmp	r7, #0
   b5eba:	d14a      	bne.n	b5f52 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   b5ebc:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   b5ec0:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   b5ec4:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   b5ec8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b5ecc:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   b5ed0:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   b5ed4:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5ed6:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b5eda:	4293      	cmp	r3, r2
   b5edc:	db17      	blt.n	b5f0e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   b5ede:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   b5ee2:	f1ba 0f00 	cmp.w	sl, #0
   b5ee6:	dd30      	ble.n	b5f4a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   b5ee8:	fb09 f00a 	mul.w	r0, r9, sl
   b5eec:	f7fe fdb4 	bl	b4a58 <malloc>
            if (!d) {
   b5ef0:	4683      	mov	fp, r0
   b5ef2:	b360      	cbz	r0, b5f4e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   b5ef4:	e9d5 1200 	ldrd	r1, r2, [r5]
   b5ef8:	fb09 1202 	mla	r2, r9, r2, r1
   b5efc:	f7ff feea 	bl	b5cd4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   b5f00:	6828      	ldr	r0, [r5, #0]
   b5f02:	f7fe fdb1 	bl	b4a68 <free>
        data_ = d;
   b5f06:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   b5f0a:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   b5f0e:	682b      	ldr	r3, [r5, #0]
   b5f10:	9a01      	ldr	r2, [sp, #4]
   b5f12:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   b5f16:	686a      	ldr	r2, [r5, #4]
   b5f18:	4651      	mov	r1, sl
   b5f1a:	fb09 3202 	mla	r2, r9, r2, r3
   b5f1e:	f10a 0014 	add.w	r0, sl, #20
   b5f22:	f7ff fed7 	bl	b5cd4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   b5f26:	f1ba 0f00 	cmp.w	sl, #0
   b5f2a:	d003      	beq.n	b5f34 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   b5f2c:	a90f      	add	r1, sp, #60	; 0x3c
   b5f2e:	4650      	mov	r0, sl
   b5f30:	f7ff fb4b 	bl	b55ca <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   b5f34:	686b      	ldr	r3, [r5, #4]
   b5f36:	3301      	adds	r3, #1
   b5f38:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   b5f3a:	a811      	add	r0, sp, #68	; 0x44
   b5f3c:	f7ff fcca 	bl	b58d4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b5f40:	b13f      	cbz	r7, b5f52 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   b5f42:	a80b      	add	r0, sp, #44	; 0x2c
   b5f44:	f7ff fcc6 	bl	b58d4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b5f48:	e771      	b.n	b5e2e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   b5f4a:	46bb      	mov	fp, r7
   b5f4c:	e7d8      	b.n	b5f00 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b5f4e:	2701      	movs	r7, #1
   b5f50:	e7f3      	b.n	b5f3a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   b5f52:	9b01      	ldr	r3, [sp, #4]
   b5f54:	682d      	ldr	r5, [r5, #0]
   b5f56:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   b5f5a:	9b06      	ldr	r3, [sp, #24]
   b5f5c:	781b      	ldrb	r3, [r3, #0]
   b5f5e:	b92b      	cbnz	r3, b5f6c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   b5f60:	f8d8 3000 	ldr.w	r3, [r8]
   b5f64:	9a02      	ldr	r2, [sp, #8]
   b5f66:	4413      	add	r3, r2
   b5f68:	7c1b      	ldrb	r3, [r3, #16]
   b5f6a:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   b5f6c:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   b5f6e:	e78e      	b.n	b5e8e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5f70:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b5f72:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5f74:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5f76:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5f78:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5f7a:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b5f7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   b5f7e:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5f80:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b5f82:	60a2      	str	r2, [r4, #8]
   b5f84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   b5f86:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5f88:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   b5f8a:	60e2      	str	r2, [r4, #12]
   b5f8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   b5f8e:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5f90:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5f92:	6122      	str	r2, [r4, #16]
   b5f94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   b5f96:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   b5f98:	9b03      	ldr	r3, [sp, #12]
   b5f9a:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   b5f9c:	6162      	str	r2, [r4, #20]
   b5f9e:	7623      	strb	r3, [r4, #24]
   b5fa0:	e7cf      	b.n	b5f42 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000b5fa4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b5fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5fa6:	4604      	mov	r4, r0
   b5fa8:	b087      	sub	sp, #28
   b5faa:	460d      	mov	r5, r1
        filter_(level, filters) {
   b5fac:	4626      	mov	r6, r4
        stream_(&stream) {
   b5fae:	4619      	mov	r1, r3
   b5fb0:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b5fb2:	4617      	mov	r7, r2
        stream_(&stream) {
   b5fb4:	f7fe f925 	bl	b4202 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b5fb8:	4b0b      	ldr	r3, [pc, #44]	; (b5fe8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   b5fba:	f846 3b04 	str.w	r3, [r6], #4
   b5fbe:	4669      	mov	r1, sp
   b5fc0:	a803      	add	r0, sp, #12
   b5fc2:	f7fe f91e 	bl	b4202 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b5fc6:	aa03      	add	r2, sp, #12
   b5fc8:	4639      	mov	r1, r7
   b5fca:	4630      	mov	r0, r6
   b5fcc:	f7ff fef0 	bl	b5db0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b5fd0:	a803      	add	r0, sp, #12
   b5fd2:	f7fe f8bb 	bl	b414c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b5fd6:	4668      	mov	r0, sp
   b5fd8:	f7fe f8b8 	bl	b414c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5fdc:	4b03      	ldr	r3, [pc, #12]	; (b5fec <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   b5fde:	6023      	str	r3, [r4, #0]
}
   b5fe0:	4620      	mov	r0, r4
        stream_(&stream) {
   b5fe2:	6225      	str	r5, [r4, #32]
}
   b5fe4:	b007      	add	sp, #28
   b5fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5fe8:	000b9304 	.word	0x000b9304
   b5fec:	000b957c 	.word	0x000b957c

000b5ff0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   b5ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5ff2:	460f      	mov	r7, r1
   b5ff4:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b5ff6:	491d      	ldr	r1, [pc, #116]	; (b606c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   b5ff8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b5ffa:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   b5ffc:	4616      	mov	r6, r2
   b5ffe:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b6000:	f002 ffe3 	bl	b8fca <strcmp>
   b6004:	b9c0      	cbnz	r0, b6038 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   b6006:	b1a4      	cbz	r4, b6032 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   b6008:	4629      	mov	r1, r5
   b600a:	a801      	add	r0, sp, #4
   b600c:	f7ff fcbc 	bl	b5988 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b6010:	4917      	ldr	r1, [pc, #92]	; (b6070 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b6012:	2024      	movs	r0, #36	; 0x24
   b6014:	f002 fe2c 	bl	b8c70 <_ZnwjRKSt9nothrow_t>
   b6018:	4605      	mov	r5, r0
   b601a:	b130      	cbz	r0, b602a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   b601c:	ab01      	add	r3, sp, #4
   b601e:	4632      	mov	r2, r6
   b6020:	4621      	mov	r1, r4
   b6022:	f7ff ffbf 	bl	b5fa4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b6026:	4b13      	ldr	r3, [pc, #76]	; (b6074 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   b6028:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b602a:	a801      	add	r0, sp, #4
   b602c:	f7fe f88e 	bl	b414c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b6030:	462c      	mov	r4, r5
}
   b6032:	4620      	mov	r0, r4
   b6034:	b005      	add	sp, #20
   b6036:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   b6038:	490f      	ldr	r1, [pc, #60]	; (b6078 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   b603a:	4638      	mov	r0, r7
   b603c:	f002 ffc5 	bl	b8fca <strcmp>
   b6040:	b990      	cbnz	r0, b6068 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   b6042:	2c00      	cmp	r4, #0
   b6044:	d0f5      	beq.n	b6032 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b6046:	4629      	mov	r1, r5
   b6048:	a801      	add	r0, sp, #4
   b604a:	f7ff fc9d 	bl	b5988 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b604e:	4908      	ldr	r1, [pc, #32]	; (b6070 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b6050:	2024      	movs	r0, #36	; 0x24
   b6052:	f002 fe0d 	bl	b8c70 <_ZnwjRKSt9nothrow_t>
   b6056:	4605      	mov	r5, r0
   b6058:	2800      	cmp	r0, #0
   b605a:	d0e6      	beq.n	b602a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   b605c:	ab01      	add	r3, sp, #4
   b605e:	4632      	mov	r2, r6
   b6060:	4621      	mov	r1, r4
   b6062:	f7ff ff9f 	bl	b5fa4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b6066:	e7e0      	b.n	b602a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   b6068:	2400      	movs	r4, #0
   b606a:	e7e2      	b.n	b6032 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   b606c:	000b9504 	.word	0x000b9504
   b6070:	000b98c8 	.word	0x000b98c8
   b6074:	000b9594 	.word	0x000b9594
   b6078:	000b9508 	.word	0x000b9508

000b607c <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   b607c:	4b01      	ldr	r3, [pc, #4]	; (b6084 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b607e:	4a02      	ldr	r2, [pc, #8]	; (b6088 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b6080:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b6082:	4770      	bx	lr
   b6084:	2003e6f0 	.word	0x2003e6f0
   b6088:	000b9299 	.word	0x000b9299

000b608c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b608c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6090:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   b6092:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b6096:	4604      	mov	r4, r0
   b6098:	460e      	mov	r6, r1
   b609a:	4617      	mov	r7, r2
   b609c:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   b609e:	f7ff f899 	bl	b51d4 <_Z16_fetch_usbserialv>
   b60a2:	4581      	cmp	r9, r0
   b60a4:	d04c      	beq.n	b6140 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   b60a6:	792b      	ldrb	r3, [r5, #4]
   b60a8:	0719      	lsls	r1, r3, #28
   b60aa:	d504      	bpl.n	b60b6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   b60ac:	696a      	ldr	r2, [r5, #20]
   b60ae:	4954      	ldr	r1, [pc, #336]	; (b6200 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   b60b0:	4620      	mov	r0, r4
   b60b2:	f7ff fa7b 	bl	b55ac <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   b60b6:	f1b8 0f00 	cmp.w	r8, #0
   b60ba:	d00d      	beq.n	b60d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   b60bc:	215b      	movs	r1, #91	; 0x5b
   b60be:	4620      	mov	r0, r4
   b60c0:	f7ff fa68 	bl	b5594 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   b60c4:	4641      	mov	r1, r8
   b60c6:	4620      	mov	r0, r4
   b60c8:	f7ff fa55 	bl	b5576 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   b60cc:	6823      	ldr	r3, [r4, #0]
   b60ce:	494d      	ldr	r1, [pc, #308]	; (b6204 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   b60d0:	68db      	ldr	r3, [r3, #12]
   b60d2:	2202      	movs	r2, #2
   b60d4:	4620      	mov	r0, r4
   b60d6:	4798      	blx	r3
    if (attr.has_file) {
   b60d8:	792b      	ldrb	r3, [r5, #4]
   b60da:	07da      	lsls	r2, r3, #31
   b60dc:	d523      	bpl.n	b6126 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   b60de:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   b60e2:	212f      	movs	r1, #47	; 0x2f
   b60e4:	4640      	mov	r0, r8
   b60e6:	f002 ffbd 	bl	b9064 <strrchr>
    if (s1) {
   b60ea:	b108      	cbz	r0, b60f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   b60ec:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   b60f0:	4641      	mov	r1, r8
   b60f2:	4620      	mov	r0, r4
   b60f4:	f7ff fa3f 	bl	b5576 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   b60f8:	792b      	ldrb	r3, [r5, #4]
   b60fa:	079b      	lsls	r3, r3, #30
   b60fc:	d508      	bpl.n	b6110 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   b60fe:	213a      	movs	r1, #58	; 0x3a
   b6100:	4620      	mov	r0, r4
   b6102:	f7ff fa47 	bl	b5594 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   b6106:	68ea      	ldr	r2, [r5, #12]
   b6108:	493f      	ldr	r1, [pc, #252]	; (b6208 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   b610a:	4620      	mov	r0, r4
   b610c:	f7ff fa4e 	bl	b55ac <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   b6110:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   b6112:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   b6114:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   b6118:	68db      	ldr	r3, [r3, #12]
   b611a:	bf14      	ite	ne
   b611c:	493b      	ldrne	r1, [pc, #236]	; (b620c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   b611e:	493c      	ldreq	r1, [pc, #240]	; (b6210 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   b6120:	2202      	movs	r2, #2
            write(": ", 2);
   b6122:	4620      	mov	r0, r4
   b6124:	4798      	blx	r3
    if (attr.has_function) {
   b6126:	792b      	ldrb	r3, [r5, #4]
   b6128:	0758      	lsls	r0, r3, #29
   b612a:	d51d      	bpl.n	b6168 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b612c:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b612e:	460b      	mov	r3, r1
   b6130:	461a      	mov	r2, r3
    for (; *s; ++s) {
   b6132:	f813 0b01 	ldrb.w	r0, [r3], #1
   b6136:	b160      	cbz	r0, b6152 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   b6138:	2820      	cmp	r0, #32
   b613a:	d108      	bne.n	b614e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   b613c:	4619      	mov	r1, r3
   b613e:	e7f7      	b.n	b6130 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   b6140:	4834      	ldr	r0, [pc, #208]	; (b6214 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   b6142:	f7fe fefd 	bl	b4f40 <_ZN5spark12NetworkClass9listeningEv>
   b6146:	2800      	cmp	r0, #0
   b6148:	d0ad      	beq.n	b60a6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   b614a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   b614e:	2828      	cmp	r0, #40	; 0x28
   b6150:	d1ee      	bne.n	b6130 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   b6152:	6823      	ldr	r3, [r4, #0]
   b6154:	1a52      	subs	r2, r2, r1
   b6156:	68db      	ldr	r3, [r3, #12]
   b6158:	4620      	mov	r0, r4
   b615a:	4798      	blx	r3
        write("(): ", 4);
   b615c:	6823      	ldr	r3, [r4, #0]
   b615e:	492e      	ldr	r1, [pc, #184]	; (b6218 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   b6160:	68db      	ldr	r3, [r3, #12]
   b6162:	2204      	movs	r2, #4
   b6164:	4620      	mov	r0, r4
   b6166:	4798      	blx	r3
    return log_level_name(level, nullptr);
   b6168:	2100      	movs	r1, #0
   b616a:	4638      	mov	r0, r7
   b616c:	f7fe fbd0 	bl	b4910 <log_level_name>
   b6170:	4601      	mov	r1, r0
    write(s);
   b6172:	4620      	mov	r0, r4
   b6174:	f7ff f9ff 	bl	b5576 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   b6178:	6823      	ldr	r3, [r4, #0]
   b617a:	4925      	ldr	r1, [pc, #148]	; (b6210 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   b617c:	68db      	ldr	r3, [r3, #12]
   b617e:	2202      	movs	r2, #2
   b6180:	4620      	mov	r0, r4
   b6182:	4798      	blx	r3
    if (msg) {
   b6184:	b11e      	cbz	r6, b618e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   b6186:	4631      	mov	r1, r6
   b6188:	4620      	mov	r0, r4
   b618a:	f7ff f9f4 	bl	b5576 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   b618e:	792b      	ldrb	r3, [r5, #4]
   b6190:	f013 0f30 	tst.w	r3, #48	; 0x30
   b6194:	d02c      	beq.n	b61f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   b6196:	6823      	ldr	r3, [r4, #0]
   b6198:	4920      	ldr	r1, [pc, #128]	; (b621c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   b619a:	68db      	ldr	r3, [r3, #12]
   b619c:	2202      	movs	r2, #2
   b619e:	4620      	mov	r0, r4
   b61a0:	4798      	blx	r3
        if (attr.has_code) {
   b61a2:	792b      	ldrb	r3, [r5, #4]
   b61a4:	06d9      	lsls	r1, r3, #27
   b61a6:	d50a      	bpl.n	b61be <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   b61a8:	6823      	ldr	r3, [r4, #0]
   b61aa:	491d      	ldr	r1, [pc, #116]	; (b6220 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   b61ac:	68db      	ldr	r3, [r3, #12]
   b61ae:	2207      	movs	r2, #7
   b61b0:	4620      	mov	r0, r4
   b61b2:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   b61b4:	69aa      	ldr	r2, [r5, #24]
   b61b6:	491b      	ldr	r1, [pc, #108]	; (b6224 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   b61b8:	4620      	mov	r0, r4
   b61ba:	f7ff f9f7 	bl	b55ac <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   b61be:	792b      	ldrb	r3, [r5, #4]
   b61c0:	069a      	lsls	r2, r3, #26
   b61c2:	d511      	bpl.n	b61e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   b61c4:	06db      	lsls	r3, r3, #27
   b61c6:	d505      	bpl.n	b61d4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   b61c8:	6823      	ldr	r3, [r4, #0]
   b61ca:	4910      	ldr	r1, [pc, #64]	; (b620c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   b61cc:	68db      	ldr	r3, [r3, #12]
   b61ce:	2202      	movs	r2, #2
   b61d0:	4620      	mov	r0, r4
   b61d2:	4798      	blx	r3
            write("details = ", 10);
   b61d4:	6823      	ldr	r3, [r4, #0]
   b61d6:	4914      	ldr	r1, [pc, #80]	; (b6228 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   b61d8:	68db      	ldr	r3, [r3, #12]
   b61da:	4620      	mov	r0, r4
   b61dc:	220a      	movs	r2, #10
   b61de:	4798      	blx	r3
            write(attr.details);
   b61e0:	69e9      	ldr	r1, [r5, #28]
   b61e2:	4620      	mov	r0, r4
   b61e4:	f7ff f9c7 	bl	b5576 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   b61e8:	215d      	movs	r1, #93	; 0x5d
   b61ea:	4620      	mov	r0, r4
   b61ec:	f7ff f9d2 	bl	b5594 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   b61f0:	6823      	ldr	r3, [r4, #0]
   b61f2:	490e      	ldr	r1, [pc, #56]	; (b622c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   b61f4:	68db      	ldr	r3, [r3, #12]
   b61f6:	4620      	mov	r0, r4
   b61f8:	2202      	movs	r2, #2
}
   b61fa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   b61fe:	4718      	bx	r3
   b6200:	000b9519 	.word	0x000b9519
   b6204:	000b9520 	.word	0x000b9520
   b6208:	000b9402 	.word	0x000b9402
   b620c:	000b9523 	.word	0x000b9523
   b6210:	000b9528 	.word	0x000b9528
   b6214:	2003e6a0 	.word	0x2003e6a0
   b6218:	000b9526 	.word	0x000b9526
   b621c:	000b952b 	.word	0x000b952b
   b6220:	000b952e 	.word	0x000b952e
   b6224:	000b9536 	.word	0x000b9536
   b6228:	000b9539 	.word	0x000b9539
   b622c:	000b9544 	.word	0x000b9544

000b6230 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b6230:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6234:	b085      	sub	sp, #20
    return stream_;
   b6236:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b623a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b623c:	4605      	mov	r5, r0
   b623e:	460f      	mov	r7, r1
   b6240:	4690      	mov	r8, r2
   b6242:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   b6244:	f7fe ffc6 	bl	b51d4 <_Z16_fetch_usbserialv>
   b6248:	4581      	cmp	r9, r0
   b624a:	d105      	bne.n	b6258 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   b624c:	4849      	ldr	r0, [pc, #292]	; (b6374 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   b624e:	f7fe fe77 	bl	b4f40 <_ZN5spark12NetworkClass9listeningEv>
   b6252:	2800      	cmp	r0, #0
   b6254:	f040 808a 	bne.w	b636c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   b6258:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   b625a:	4a47      	ldr	r2, [pc, #284]	; (b6378 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   b625c:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   b625e:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   b6262:	a801      	add	r0, sp, #4
        strm_(stream) {
   b6264:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   b6266:	f88d 9008 	strb.w	r9, [sp, #8]
   b626a:	f7fe fd72 	bl	b4d52 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   b626e:	4649      	mov	r1, r9
   b6270:	4640      	mov	r0, r8
   b6272:	f7fe fb4d 	bl	b4910 <log_level_name>
    json.name("l", 1).value(s);
   b6276:	4941      	ldr	r1, [pc, #260]	; (b637c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   b6278:	4680      	mov	r8, r0
   b627a:	2201      	movs	r2, #1
   b627c:	a801      	add	r0, sp, #4
   b627e:	f7fe fdf7 	bl	b4e70 <_ZN5spark10JSONWriter4nameEPKcj>
   b6282:	4641      	mov	r1, r8
   b6284:	f7ff f969 	bl	b555a <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   b6288:	b13f      	cbz	r7, b629a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   b628a:	493d      	ldr	r1, [pc, #244]	; (b6380 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   b628c:	2201      	movs	r2, #1
   b628e:	a801      	add	r0, sp, #4
   b6290:	f7fe fdee 	bl	b4e70 <_ZN5spark10JSONWriter4nameEPKcj>
   b6294:	4639      	mov	r1, r7
   b6296:	f7ff f960 	bl	b555a <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   b629a:	b13e      	cbz	r6, b62ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   b629c:	4939      	ldr	r1, [pc, #228]	; (b6384 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   b629e:	2201      	movs	r2, #1
   b62a0:	a801      	add	r0, sp, #4
   b62a2:	f7fe fde5 	bl	b4e70 <_ZN5spark10JSONWriter4nameEPKcj>
   b62a6:	4631      	mov	r1, r6
   b62a8:	f7ff f957 	bl	b555a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   b62ac:	7923      	ldrb	r3, [r4, #4]
   b62ae:	07df      	lsls	r7, r3, #31
   b62b0:	d50e      	bpl.n	b62d0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   b62b2:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   b62b4:	212f      	movs	r1, #47	; 0x2f
   b62b6:	4630      	mov	r0, r6
   b62b8:	f002 fed4 	bl	b9064 <strrchr>
    if (s1) {
   b62bc:	b100      	cbz	r0, b62c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   b62be:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   b62c0:	4931      	ldr	r1, [pc, #196]	; (b6388 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   b62c2:	2201      	movs	r2, #1
   b62c4:	a801      	add	r0, sp, #4
   b62c6:	f7fe fdd3 	bl	b4e70 <_ZN5spark10JSONWriter4nameEPKcj>
   b62ca:	4631      	mov	r1, r6
   b62cc:	f7ff f945 	bl	b555a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   b62d0:	7923      	ldrb	r3, [r4, #4]
   b62d2:	079e      	lsls	r6, r3, #30
   b62d4:	d507      	bpl.n	b62e6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   b62d6:	492d      	ldr	r1, [pc, #180]	; (b638c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   b62d8:	2202      	movs	r2, #2
   b62da:	a801      	add	r0, sp, #4
   b62dc:	f7fe fdc8 	bl	b4e70 <_ZN5spark10JSONWriter4nameEPKcj>
   b62e0:	68e1      	ldr	r1, [r4, #12]
   b62e2:	f7fe fd43 	bl	b4d6c <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   b62e6:	7923      	ldrb	r3, [r4, #4]
   b62e8:	0758      	lsls	r0, r3, #29
   b62ea:	d514      	bpl.n	b6316 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b62ec:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b62ee:	4633      	mov	r3, r6
   b62f0:	461f      	mov	r7, r3
    for (; *s; ++s) {
   b62f2:	f813 2b01 	ldrb.w	r2, [r3], #1
   b62f6:	b12a      	cbz	r2, b6304 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   b62f8:	2a20      	cmp	r2, #32
   b62fa:	d101      	bne.n	b6300 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   b62fc:	461e      	mov	r6, r3
   b62fe:	e7f7      	b.n	b62f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   b6300:	2a28      	cmp	r2, #40	; 0x28
   b6302:	d1f5      	bne.n	b62f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   b6304:	4922      	ldr	r1, [pc, #136]	; (b6390 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   b6306:	2202      	movs	r2, #2
   b6308:	a801      	add	r0, sp, #4
   b630a:	f7fe fdb1 	bl	b4e70 <_ZN5spark10JSONWriter4nameEPKcj>
   b630e:	1bba      	subs	r2, r7, r6
   b6310:	4631      	mov	r1, r6
   b6312:	f7fe fdbd 	bl	b4e90 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   b6316:	7923      	ldrb	r3, [r4, #4]
   b6318:	0719      	lsls	r1, r3, #28
   b631a:	d507      	bpl.n	b632c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   b631c:	491d      	ldr	r1, [pc, #116]	; (b6394 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   b631e:	2201      	movs	r2, #1
   b6320:	a801      	add	r0, sp, #4
   b6322:	f7fe fda5 	bl	b4e70 <_ZN5spark10JSONWriter4nameEPKcj>
   b6326:	6961      	ldr	r1, [r4, #20]
   b6328:	f7fe fd32 	bl	b4d90 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   b632c:	7923      	ldrb	r3, [r4, #4]
   b632e:	06da      	lsls	r2, r3, #27
   b6330:	d508      	bpl.n	b6344 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   b6332:	2204      	movs	r2, #4
   b6334:	4918      	ldr	r1, [pc, #96]	; (b6398 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   b6336:	eb0d 0002 	add.w	r0, sp, r2
   b633a:	f7fe fd99 	bl	b4e70 <_ZN5spark10JSONWriter4nameEPKcj>
   b633e:	69a1      	ldr	r1, [r4, #24]
   b6340:	f7fe fd14 	bl	b4d6c <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   b6344:	7923      	ldrb	r3, [r4, #4]
   b6346:	069b      	lsls	r3, r3, #26
   b6348:	d507      	bpl.n	b635a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   b634a:	4914      	ldr	r1, [pc, #80]	; (b639c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   b634c:	2206      	movs	r2, #6
   b634e:	a801      	add	r0, sp, #4
   b6350:	f7fe fd8e 	bl	b4e70 <_ZN5spark10JSONWriter4nameEPKcj>
   b6354:	69e1      	ldr	r1, [r4, #28]
   b6356:	f7ff f900 	bl	b555a <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   b635a:	a801      	add	r0, sp, #4
   b635c:	f7fe fce3 	bl	b4d26 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   b6360:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   b6362:	490f      	ldr	r1, [pc, #60]	; (b63a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   b6364:	6803      	ldr	r3, [r0, #0]
   b6366:	2202      	movs	r2, #2
   b6368:	68db      	ldr	r3, [r3, #12]
   b636a:	4798      	blx	r3
}
   b636c:	b005      	add	sp, #20
   b636e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b6372:	bf00      	nop
   b6374:	2003e6a0 	.word	0x2003e6a0
   b6378:	000b9564 	.word	0x000b9564
   b637c:	000b94fa 	.word	0x000b94fa
   b6380:	000b92a6 	.word	0x000b92a6
   b6384:	000b9a4f 	.word	0x000b9a4f
   b6388:	000b9547 	.word	0x000b9547
   b638c:	000b9549 	.word	0x000b9549
   b6390:	000b954c 	.word	0x000b954c
   b6394:	000b92aa 	.word	0x000b92aa
   b6398:	000b954f 	.word	0x000b954f
   b639c:	000b9554 	.word	0x000b9554
   b63a0:	000b9544 	.word	0x000b9544

000b63a4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b63a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b63a6:	4606      	mov	r6, r0
   b63a8:	460d      	mov	r5, r1
  size_t n = 0;
   b63aa:	188f      	adds	r7, r1, r2
   b63ac:	2400      	movs	r4, #0
  while (size--) {
   b63ae:	42bd      	cmp	r5, r7
   b63b0:	d00c      	beq.n	b63cc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b63b2:	6833      	ldr	r3, [r6, #0]
   b63b4:	f815 1b01 	ldrb.w	r1, [r5], #1
   b63b8:	689b      	ldr	r3, [r3, #8]
   b63ba:	4630      	mov	r0, r6
   b63bc:	4798      	blx	r3
     if (chunk>=0)
   b63be:	1e03      	subs	r3, r0, #0
   b63c0:	db01      	blt.n	b63c6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b63c2:	441c      	add	r4, r3
  while (size--) {
   b63c4:	e7f3      	b.n	b63ae <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b63c6:	2c00      	cmp	r4, #0
   b63c8:	bf08      	it	eq
   b63ca:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b63cc:	4620      	mov	r0, r4
   b63ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b63d0 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b63d0:	b513      	push	{r0, r1, r4, lr}
   b63d2:	4604      	mov	r4, r0
    }
   b63d4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b63d6:	b159      	cbz	r1, b63f0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b63d8:	9101      	str	r1, [sp, #4]
   b63da:	f002 fe08 	bl	b8fee <strlen>
   b63de:	6823      	ldr	r3, [r4, #0]
   b63e0:	9901      	ldr	r1, [sp, #4]
   b63e2:	68db      	ldr	r3, [r3, #12]
   b63e4:	4602      	mov	r2, r0
   b63e6:	4620      	mov	r0, r4
    }
   b63e8:	b002      	add	sp, #8
   b63ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b63ee:	4718      	bx	r3
    }
   b63f0:	b002      	add	sp, #8
   b63f2:	bd10      	pop	{r4, pc}

000b63f4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b63f4:	6803      	ldr	r3, [r0, #0]
   b63f6:	689b      	ldr	r3, [r3, #8]
   b63f8:	4718      	bx	r3

000b63fa <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b63fa:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b63fc:	210d      	movs	r1, #13
{
   b63fe:	4605      	mov	r5, r0
  size_t n = print('\r');
   b6400:	f7ff fff8 	bl	b63f4 <_ZN5Print5printEc>
  n += print('\n');
   b6404:	210a      	movs	r1, #10
  size_t n = print('\r');
   b6406:	4604      	mov	r4, r0
  n += print('\n');
   b6408:	4628      	mov	r0, r5
   b640a:	f7ff fff3 	bl	b63f4 <_ZN5Print5printEc>
  return n;
}
   b640e:	4420      	add	r0, r4
   b6410:	bd38      	pop	{r3, r4, r5, pc}

000b6412 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b6412:	b530      	push	{r4, r5, lr}
   b6414:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b6416:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b6418:	2a01      	cmp	r2, #1
  *str = '\0';
   b641a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b641e:	bf98      	it	ls
   b6420:	220a      	movls	r2, #10
   b6422:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b6424:	460d      	mov	r5, r1
   b6426:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b642a:	fb01 5312 	mls	r3, r1, r2, r5
   b642e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6432:	2b09      	cmp	r3, #9
   b6434:	bf94      	ite	ls
   b6436:	3330      	addls	r3, #48	; 0x30
   b6438:	3337      	addhi	r3, #55	; 0x37
   b643a:	b2db      	uxtb	r3, r3
  } while(n);
   b643c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b643e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b6442:	d9ef      	bls.n	b6424 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b6444:	4621      	mov	r1, r4
   b6446:	f7ff ffc3 	bl	b63d0 <_ZN5Print5writeEPKc>
}
   b644a:	b00b      	add	sp, #44	; 0x2c
   b644c:	bd30      	pop	{r4, r5, pc}

000b644e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b644e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6452:	b086      	sub	sp, #24
   b6454:	af00      	add	r7, sp, #0
   b6456:	4605      	mov	r5, r0
   b6458:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b645a:	1d38      	adds	r0, r7, #4
   b645c:	2114      	movs	r1, #20
{
   b645e:	4614      	mov	r4, r2
    va_copy(args2, args);
   b6460:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b6462:	f7fe fb11 	bl	b4a88 <vsnprintf>

    if (n<bufsize)
   b6466:	2813      	cmp	r0, #19
   b6468:	d80e      	bhi.n	b6488 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b646a:	1d39      	adds	r1, r7, #4
   b646c:	4628      	mov	r0, r5
   b646e:	f7ff ffaf 	bl	b63d0 <_ZN5Print5writeEPKc>
   b6472:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b6474:	b11e      	cbz	r6, b647e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b6476:	4628      	mov	r0, r5
   b6478:	f7ff ffbf 	bl	b63fa <_ZN5Print7printlnEv>
   b647c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b647e:	4620      	mov	r0, r4
   b6480:	3718      	adds	r7, #24
   b6482:	46bd      	mov	sp, r7
   b6484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b6488:	f100 0308 	add.w	r3, r0, #8
   b648c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b6490:	46e8      	mov	r8, sp
        char bigger[n+1];
   b6492:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b6496:	4622      	mov	r2, r4
   b6498:	1c41      	adds	r1, r0, #1
   b649a:	683b      	ldr	r3, [r7, #0]
   b649c:	4668      	mov	r0, sp
   b649e:	f7fe faf3 	bl	b4a88 <vsnprintf>
  return write(str);
   b64a2:	4669      	mov	r1, sp
   b64a4:	4628      	mov	r0, r5
   b64a6:	f7ff ff93 	bl	b63d0 <_ZN5Print5writeEPKc>
   b64aa:	4604      	mov	r4, r0
   b64ac:	46c5      	mov	sp, r8
   b64ae:	e7e1      	b.n	b6474 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b64b0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b64b0:	4770      	bx	lr

000b64b2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b64b2:	4770      	bx	lr

000b64b4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b64b4:	4770      	bx	lr

000b64b6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b64b6:	4770      	bx	lr

000b64b8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b64b8:	4b06      	ldr	r3, [pc, #24]	; (b64d4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b64ba:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b64bc:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b64be:	f100 040c 	add.w	r4, r0, #12
	    ||
   b64c2:	d005      	beq.n	b64d0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b64c4:	4608      	mov	r0, r1
   b64c6:	f002 fbdb 	bl	b8c80 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b64ca:	2800      	cmp	r0, #0
   b64cc:	bf08      	it	eq
   b64ce:	2400      	moveq	r4, #0
      }
   b64d0:	4620      	mov	r0, r4
   b64d2:	bd10      	pop	{r4, pc}
   b64d4:	000b9488 	.word	0x000b9488

000b64d8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b64d8:	4b06      	ldr	r3, [pc, #24]	; (b64f4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b64da:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b64dc:	b510      	push	{r4, lr}
   b64de:	f100 040c 	add.w	r4, r0, #12
	    ||
   b64e2:	d005      	beq.n	b64f0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b64e4:	4608      	mov	r0, r1
   b64e6:	f002 fbcb 	bl	b8c80 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b64ea:	2800      	cmp	r0, #0
   b64ec:	bf08      	it	eq
   b64ee:	2400      	moveq	r4, #0
      }
   b64f0:	4620      	mov	r0, r4
   b64f2:	bd10      	pop	{r4, pc}
   b64f4:	000b9488 	.word	0x000b9488

000b64f8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b64f8:	4b06      	ldr	r3, [pc, #24]	; (b6514 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b64fa:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b64fc:	b510      	push	{r4, lr}
   b64fe:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6502:	d005      	beq.n	b6510 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6504:	4608      	mov	r0, r1
   b6506:	f002 fbbb 	bl	b8c80 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b650a:	2800      	cmp	r0, #0
   b650c:	bf08      	it	eq
   b650e:	2400      	moveq	r4, #0
      }
   b6510:	4620      	mov	r0, r4
   b6512:	bd10      	pop	{r4, pc}
   b6514:	000b9488 	.word	0x000b9488

000b6518 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6518:	b510      	push	{r4, lr}
   b651a:	2168      	movs	r1, #104	; 0x68
   b651c:	4604      	mov	r4, r0
   b651e:	f7fd fdbc 	bl	b409a <_ZdlPvj>
   b6522:	4620      	mov	r0, r4
   b6524:	bd10      	pop	{r4, pc}

000b6526 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b6526:	b510      	push	{r4, lr}
   b6528:	2128      	movs	r1, #40	; 0x28
   b652a:	4604      	mov	r4, r0
   b652c:	f7fd fdb5 	bl	b409a <_ZdlPvj>
   b6530:	4620      	mov	r0, r4
   b6532:	bd10      	pop	{r4, pc}

000b6534 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b6534:	b510      	push	{r4, lr}
   b6536:	2130      	movs	r1, #48	; 0x30
   b6538:	4604      	mov	r4, r0
   b653a:	f7fd fdae 	bl	b409a <_ZdlPvj>
   b653e:	4620      	mov	r0, r4
   b6540:	bd10      	pop	{r4, pc}

000b6542 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b6542:	2168      	movs	r1, #104	; 0x68
   b6544:	f7fd bda9 	b.w	b409a <_ZdlPvj>

000b6548 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b6548:	2128      	movs	r1, #40	; 0x28
   b654a:	f7fd bda6 	b.w	b409a <_ZdlPvj>

000b654e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b654e:	2130      	movs	r1, #48	; 0x30
   b6550:	f7fd bda3 	b.w	b409a <_ZdlPvj>

000b6554 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b6554:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b6556:	2500      	movs	r5, #0
   b6558:	1cec      	adds	r4, r5, #3
   b655a:	428c      	cmp	r4, r1
   b655c:	d80d      	bhi.n	b657a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b655e:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b6560:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b6562:	5d87      	ldrb	r7, [r0, r6]
   b6564:	4297      	cmp	r7, r2
   b6566:	d105      	bne.n	b6574 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b6568:	4426      	add	r6, r4
   b656a:	42b1      	cmp	r1, r6
   b656c:	d305      	bcc.n	b657a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b656e:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b6570:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b6572:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b6574:	3401      	adds	r4, #1
   b6576:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b6578:	e7ee      	b.n	b6558 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b657a:	2000      	movs	r0, #0
   b657c:	e7f9      	b.n	b6572 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b6580 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b6580:	4a02      	ldr	r2, [pc, #8]	; (b658c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b6582:	4903      	ldr	r1, [pc, #12]	; (b6590 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b6584:	200a      	movs	r0, #10
   b6586:	f7fe b9ab 	b.w	b48e0 <panic_>
   b658a:	bf00      	nop
   b658c:	000b48a1 	.word	0x000b48a1
   b6590:	000b95d4 	.word	0x000b95d4

000b6594 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6594:	b430      	push	{r4, r5}
   b6596:	460d      	mov	r5, r1
   b6598:	4611      	mov	r1, r2
   b659a:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b659c:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b659e:	6809      	ldr	r1, [r1, #0]
   b65a0:	6828      	ldr	r0, [r5, #0]
   b65a2:	e9d3 4300 	ldrd	r4, r3, [r3]
   b65a6:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b65a8:	bc30      	pop	{r4, r5}
   b65aa:	4760      	bx	ip

000b65ac <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b65ac:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b65ae:	b538      	push	{r3, r4, r5, lr}
   b65b0:	4604      	mov	r4, r0
	switch (__op)
   b65b2:	d102      	bne.n	b65ba <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b65b4:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b65b6:	6023      	str	r3, [r4, #0]
	}
   b65b8:	e003      	b.n	b65c2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b65ba:	2a02      	cmp	r2, #2
   b65bc:	d003      	beq.n	b65c6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b65be:	2a03      	cmp	r2, #3
   b65c0:	d00d      	beq.n	b65de <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b65c2:	2000      	movs	r0, #0
   b65c4:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b65c6:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b65c8:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b65ca:	f7fd fd62 	bl	b4092 <_Znwj>
   b65ce:	4603      	mov	r3, r0
   b65d0:	2800      	cmp	r0, #0
   b65d2:	d0f0      	beq.n	b65b6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b65d4:	e895 0003 	ldmia.w	r5, {r0, r1}
   b65d8:	e883 0003 	stmia.w	r3, {r0, r1}
   b65dc:	e7eb      	b.n	b65b6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b65de:	6800      	ldr	r0, [r0, #0]
   b65e0:	2800      	cmp	r0, #0
   b65e2:	d0ee      	beq.n	b65c2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b65e4:	2108      	movs	r1, #8
   b65e6:	f7fd fd58 	bl	b409a <_ZdlPvj>
   b65ea:	e7ea      	b.n	b65c2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b65ec <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>:
       *  @returns @c *this
       *
       *  The target of @c *this is deallocated, leaving it empty.
       */
      function&
      operator=(nullptr_t) noexcept
   b65ec:	b510      	push	{r4, lr}
      {
	if (_M_manager)
   b65ee:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   b65f0:	4604      	mov	r4, r0
	if (_M_manager)
   b65f2:	b12b      	cbz	r3, b6600 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b65f4:	2203      	movs	r2, #3
   b65f6:	4601      	mov	r1, r0
   b65f8:	4798      	blx	r3
	    _M_manager = nullptr;
   b65fa:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   b65fc:	e9c4 3302 	strd	r3, r3, [r4, #8]
	  }
	return *this;
      }
   b6600:	bd10      	pop	{r4, pc}

000b6602 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
   b6602:	b510      	push	{r4, lr}
	if (_M_manager)
   b6604:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   b6606:	4604      	mov	r4, r0
	if (_M_manager)
   b6608:	b12b      	cbz	r3, b6616 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b660a:	2203      	movs	r2, #3
   b660c:	4601      	mov	r1, r0
   b660e:	4798      	blx	r3
	    _M_manager = nullptr;
   b6610:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   b6612:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
   b6616:	bd10      	pop	{r4, pc}

000b6618 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>:
class BleDiscoveryDelegator {
public:
    BleDiscoveryDelegator() = default;
    ~BleDiscoveryDelegator() = default;

    int discoverAllServices(BlePeerDevice& peer) {
   b6618:	b510      	push	{r4, lr}
        LOG(TRACE, "Start discovering services.");
   b661a:	2300      	movs	r3, #0
    int discoverAllServices(BlePeerDevice& peer) {
   b661c:	b08a      	sub	sp, #40	; 0x28
        LOG(TRACE, "Start discovering services.");
   b661e:	2220      	movs	r2, #32
   b6620:	e9cd 2302 	strd	r2, r3, [sp, #8]
    int discoverAllServices(BlePeerDevice& peer) {
   b6624:	4604      	mov	r4, r0
        LOG(TRACE, "Start discovering services.");
   b6626:	4a08      	ldr	r2, [pc, #32]	; (b6648 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x30>)
   b6628:	9200      	str	r2, [sp, #0]
   b662a:	4908      	ldr	r1, [pc, #32]	; (b664c <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x34>)
   b662c:	aa02      	add	r2, sp, #8
   b662e:	2001      	movs	r0, #1
   b6630:	f7fe f95e 	bl	b48f0 <log_message>
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   b6634:	6820      	ldr	r0, [r4, #0]
   b6636:	4906      	ldr	r1, [pc, #24]	; (b6650 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x38>)
   b6638:	8800      	ldrh	r0, [r0, #0]
   b663a:	2300      	movs	r3, #0
   b663c:	4622      	mov	r2, r4
    }
   b663e:	b00a      	add	sp, #40	; 0x28
   b6640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   b6644:	f7fe b8e8 	b.w	b4818 <hal_ble_gatt_client_discover_all_services>
   b6648:	000b95f6 	.word	0x000b95f6
   b664c:	000b95eb 	.word	0x000b95eb
   b6650:	000b7f45 	.word	0x000b7f45

000b6654 <_ZL12bytes2hexbufPKhjPc.isra.0>:
{
    *p++ = ascii_nibble_lower_case(nibble);
    return p;
}

static inline char* bytes2hexbuf(const uint8_t* buf, unsigned len, char* out)
   b6654:	b510      	push	{r4, lr}
   b6656:	3801      	subs	r0, #1
   b6658:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
    {
        out = concat_nibble(out, (buf[i] >> 4));
   b665c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   b6660:	091b      	lsrs	r3, r3, #4
    char hex_digit = nibble + 48;
   b6662:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   b6666:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   b6668:	bf88      	it	hi
   b666a:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    *p++ = ascii_nibble(nibble);
   b666e:	f802 4b02 	strb.w	r4, [r2], #2
        out = concat_nibble(out, (buf[i] & 0xF));
   b6672:	7803      	ldrb	r3, [r0, #0]
   b6674:	f003 030f 	and.w	r3, r3, #15
    char hex_digit = nibble + 48;
   b6678:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   b667c:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   b667e:	bf88      	it	hi
   b6680:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    for (i = 0; i < len; ++i)
   b6684:	4291      	cmp	r1, r2
    *p++ = ascii_nibble(nibble);
   b6686:	f802 4c01 	strb.w	r4, [r2, #-1]
    for (i = 0; i < len; ++i)
   b668a:	d1e7      	bne.n	b665c <_ZL12bytes2hexbufPKhjPc.isra.0+0x8>
    }
    return result;
}
   b668c:	bd10      	pop	{r4, pc}

000b668e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b668e:	b510      	push	{r4, lr}
   b6690:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   b6692:	3058      	adds	r0, #88	; 0x58
   b6694:	f7fe fc14 	bl	b4ec0 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b6698:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b669c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b66a0:	f002 b9ae 	b.w	b8a00 <_ZN6StringD1Ev>

000b66a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>:
      operator=(const __shared_count& __r) noexcept
   b66a4:	b538      	push	{r3, r4, r5, lr}
	if (__tmp != _M_pi)
   b66a6:	6803      	ldr	r3, [r0, #0]
   b66a8:	428b      	cmp	r3, r1
      operator=(const __shared_count& __r) noexcept
   b66aa:	4605      	mov	r5, r0
   b66ac:	460c      	mov	r4, r1
	if (__tmp != _M_pi)
   b66ae:	d008      	beq.n	b66c2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1e>
	    if (__tmp != 0)
   b66b0:	b111      	cbz	r1, b66b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x14>
    { ++_M_use_count; }
   b66b2:	684b      	ldr	r3, [r1, #4]
   b66b4:	3301      	adds	r3, #1
   b66b6:	604b      	str	r3, [r1, #4]
	    if (_M_pi != 0)
   b66b8:	6828      	ldr	r0, [r5, #0]
   b66ba:	b108      	cbz	r0, b66c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1c>
	      _M_pi->_M_release();
   b66bc:	f7fe fa5b 	bl	b4b76 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b66c0:	602c      	str	r4, [r5, #0]
      }
   b66c2:	bd38      	pop	{r3, r4, r5, pc}

000b66c4 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b66c4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b66c8:	b2da      	uxtb	r2, r3
   b66ca:	2a09      	cmp	r2, #9
   b66cc:	d801      	bhi.n	b66d2 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b66ce:	4618      	mov	r0, r3
   b66d0:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b66d2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b66d6:	2b05      	cmp	r3, #5
   b66d8:	d801      	bhi.n	b66de <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b66da:	3857      	subs	r0, #87	; 0x57
   b66dc:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b66de:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b66e2:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b66e4:	bf94      	ite	ls
   b66e6:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b66e8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   b66ec:	4770      	bx	lr
	...

000b66f0 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b66f0:	b510      	push	{r4, lr}
            locked_(false) {
   b66f2:	2300      	movs	r3, #0
   b66f4:	7003      	strb	r3, [r0, #0]
    void lock() { os_mutex_recursive_lock(handle_); }
   b66f6:	4b04      	ldr	r3, [pc, #16]	; (b6708 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b66f8:	4604      	mov	r4, r0
   b66fa:	6818      	ldr	r0, [r3, #0]
   b66fc:	f7fe f848 	bl	b4790 <os_mutex_recursive_lock>
        locked_ = true;
   b6700:	2301      	movs	r3, #1
   b6702:	7023      	strb	r3, [r4, #0]
    }
   b6704:	4620      	mov	r0, r4
   b6706:	bd10      	pop	{r4, pc}
   b6708:	2003e720 	.word	0x2003e720

000b670c <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b670c:	b510      	push	{r4, lr}
        if (locked_) {
   b670e:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b6710:	4604      	mov	r4, r0
        if (locked_) {
   b6712:	b11b      	cbz	r3, b671c <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b6714:	4b02      	ldr	r3, [pc, #8]	; (b6720 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b6716:	6818      	ldr	r0, [r3, #0]
   b6718:	f7fe f842 	bl	b47a0 <os_mutex_recursive_unlock>
    }
   b671c:	4620      	mov	r0, r4
   b671e:	bd10      	pop	{r4, pc}
   b6720:	2003e720 	.word	0x2003e720

000b6724 <_ZN8particle10BleAddress3setEPKcNS_14BleAddressTypeE>:
int BleAddress::set(const char* address, BleAddressType type) {
   b6724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6728:	4606      	mov	r6, r0
   b672a:	4617      	mov	r7, r2
    CHECK_TRUE(address, SYSTEM_ERROR_INVALID_ARGUMENT);
   b672c:	460d      	mov	r5, r1
   b672e:	b3b1      	cbz	r1, b679e <_ZN8particle10BleAddress3setEPKcNS_14BleAddressTypeE+0x7a>
    for (size_t i = 0; i < strnlen(address, BLE_SIG_ADDR_LEN * 2 + 5) && len > 0; i++) {
   b6730:	f04f 0900 	mov.w	r9, #0
    size_t len = BLE_SIG_ADDR_LEN;
   b6734:	f04f 0806 	mov.w	r8, #6
    for (size_t i = 0; i < strnlen(address, BLE_SIG_ADDR_LEN * 2 + 5) && len > 0; i++) {
   b6738:	2111      	movs	r1, #17
   b673a:	4628      	mov	r0, r5
   b673c:	f002 fc86 	bl	b904c <strnlen>
   b6740:	4548      	cmp	r0, r9
   b6742:	d808      	bhi.n	b6756 <_ZN8particle10BleAddress3setEPKcNS_14BleAddressTypeE+0x32>
        address_.addr[len - 1] = 0x00;
   b6744:	4642      	mov	r2, r8
   b6746:	2100      	movs	r1, #0
   b6748:	4630      	mov	r0, r6
   b674a:	f002 fbf1 	bl	b8f30 <memset>
    address_.addr_type = static_cast<ble_sig_addr_type_t>(type);
   b674e:	71b7      	strb	r7, [r6, #6]
   b6750:	2000      	movs	r0, #0
}
   b6752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    for (size_t i = 0; i < strnlen(address, BLE_SIG_ADDR_LEN * 2 + 5) && len > 0; i++) {
   b6756:	f1b8 0f00 	cmp.w	r8, #0
   b675a:	d0f8      	beq.n	b674e <_ZN8particle10BleAddress3setEPKcNS_14BleAddressTypeE+0x2a>
        int8_t hi = hexToNibble(address[i]);
   b675c:	f815 0009 	ldrb.w	r0, [r5, r9]
   b6760:	f7ff ffb0 	bl	b66c4 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b6764:	0603      	lsls	r3, r0, #24
   b6766:	d417      	bmi.n	b6798 <_ZN8particle10BleAddress3setEPKcNS_14BleAddressTypeE+0x74>
            address_.addr[len - 1] = hi << 4;
   b6768:	0100      	lsls	r0, r0, #4
   b676a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b676e:	b2c4      	uxtb	r4, r0
   b6770:	f806 4008 	strb.w	r4, [r6, r8]
            if (++i < strnlen(address, BLE_SIG_ADDR_LEN * 2 + 5)) {
   b6774:	2111      	movs	r1, #17
   b6776:	4628      	mov	r0, r5
   b6778:	f002 fc68 	bl	b904c <strnlen>
   b677c:	f109 0901 	add.w	r9, r9, #1
   b6780:	4581      	cmp	r9, r0
   b6782:	d209      	bcs.n	b6798 <_ZN8particle10BleAddress3setEPKcNS_14BleAddressTypeE+0x74>
                int8_t lo = hexToNibble(address[i]);
   b6784:	f815 0009 	ldrb.w	r0, [r5, r9]
   b6788:	f7ff ff9c 	bl	b66c4 <_ZN8particle11hexToNibbleEc>
   b678c:	b243      	sxtb	r3, r0
                if (lo >= 0) {
   b678e:	2b00      	cmp	r3, #0
                    address_.addr[len - 1] |= lo;
   b6790:	bfa4      	itt	ge
   b6792:	4323      	orrge	r3, r4
   b6794:	f806 3008 	strbge.w	r3, [r6, r8]
    for (size_t i = 0; i < strnlen(address, BLE_SIG_ADDR_LEN * 2 + 5) && len > 0; i++) {
   b6798:	f109 0901 	add.w	r9, r9, #1
   b679c:	e7cc      	b.n	b6738 <_ZN8particle10BleAddress3setEPKcNS_14BleAddressTypeE+0x14>
    CHECK_TRUE(address, SYSTEM_ERROR_INVALID_ARGUMENT);
   b679e:	4801      	ldr	r0, [pc, #4]	; (b67a4 <_ZN8particle10BleAddress3setEPKcNS_14BleAddressTypeE+0x80>)
   b67a0:	e7d7      	b.n	b6752 <_ZN8particle10BleAddress3setEPKcNS_14BleAddressTypeE+0x2e>
   b67a2:	bf00      	nop
   b67a4:	fffffef2 	.word	0xfffffef2

000b67a8 <_ZN8particle10BleAddressC1EPKcNS_14BleAddressTypeE>:
BleAddress::BleAddress(const char* address, BleAddressType type) {
   b67a8:	b510      	push	{r4, lr}
   b67aa:	4604      	mov	r4, r0
    set(address, type);
   b67ac:	f7ff ffba 	bl	b6724 <_ZN8particle10BleAddress3setEPKcNS_14BleAddressTypeE>
}
   b67b0:	4620      	mov	r0, r4
   b67b2:	bd10      	pop	{r4, pc}

000b67b4 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b67b4:	b082      	sub	sp, #8
   b67b6:	4603      	mov	r3, r0
    address_ = addr;
   b67b8:	6808      	ldr	r0, [r1, #0]
   b67ba:	6849      	ldr	r1, [r1, #4]
   b67bc:	466a      	mov	r2, sp
   b67be:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b67c0:	466a      	mov	r2, sp
   b67c2:	ca03      	ldmia	r2!, {r0, r1}
   b67c4:	6018      	str	r0, [r3, #0]
}
   b67c6:	4618      	mov	r0, r3
    address_ = addr.address_;
   b67c8:	6059      	str	r1, [r3, #4]
}
   b67ca:	b002      	add	sp, #8
   b67cc:	4770      	bx	lr

000b67ce <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b67ce:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b67d0:	7982      	ldrb	r2, [r0, #6]
   b67d2:	798b      	ldrb	r3, [r1, #6]
   b67d4:	429a      	cmp	r2, r3
   b67d6:	d106      	bne.n	b67e6 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b67d8:	2206      	movs	r2, #6
   b67da:	f002 fb71 	bl	b8ec0 <memcmp>
   b67de:	fab0 f080 	clz	r0, r0
   b67e2:	0940      	lsrs	r0, r0, #5
}
   b67e4:	bd08      	pop	{r3, pc}
    return false;
   b67e6:	2000      	movs	r0, #0
   b67e8:	e7fc      	b.n	b67e4 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b67ea <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b67ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b67ee:	6003      	str	r3, [r0, #0]
   b67f0:	8083      	strh	r3, [r0, #4]
}
   b67f2:	2000      	movs	r0, #0
   b67f4:	4770      	bx	lr

000b67f6 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b67f6:	b508      	push	{r3, lr}
   b67f8:	4602      	mov	r2, r0
        : address_{} {
   b67fa:	2100      	movs	r1, #0
   b67fc:	6001      	str	r1, [r0, #0]
   b67fe:	6041      	str	r1, [r0, #4]
    clear();
   b6800:	f7ff fff3 	bl	b67ea <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b6804:	7191      	strb	r1, [r2, #6]
}
   b6806:	4610      	mov	r0, r2
   b6808:	bd08      	pop	{r3, pc}

000b680a <_ZNK8particle10BleAddress11toBigEndianEPh>:
void BleAddress::toBigEndian(uint8_t buf[BLE_SIG_ADDR_LEN]) const {
   b680a:	b510      	push	{r4, lr}
   b680c:	1d43      	adds	r3, r0, #5
   b680e:	3901      	subs	r1, #1
        buf[i] = address_.addr[j];
   b6810:	781c      	ldrb	r4, [r3, #0]
   b6812:	f801 4f01 	strb.w	r4, [r1, #1]!
    for (uint8_t i = 0, j = BLE_SIG_ADDR_LEN - 1; i < BLE_SIG_ADDR_LEN; i++, j--) {
   b6816:	4283      	cmp	r3, r0
   b6818:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   b681c:	d1f8      	bne.n	b6810 <_ZNK8particle10BleAddress11toBigEndianEPh+0x6>
}
   b681e:	bd10      	pop	{r4, pc}

000b6820 <_ZNK8particle10BleAddress8toStringEPcjb>:
size_t BleAddress::toString(char* buf, size_t len, bool stripped) const {
   b6820:	b570      	push	{r4, r5, r6, lr}
   b6822:	4614      	mov	r4, r2
   b6824:	b088      	sub	sp, #32
   b6826:	461a      	mov	r2, r3
    if (!buf || len == 0) {
   b6828:	460d      	mov	r5, r1
   b682a:	2900      	cmp	r1, #0
   b682c:	d048      	beq.n	b68c0 <_ZNK8particle10BleAddress8toStringEPcjb+0xa0>
   b682e:	b1a4      	cbz	r4, b685a <_ZNK8particle10BleAddress8toStringEPcjb+0x3a>
    toBigEndian(temp);
   b6830:	a901      	add	r1, sp, #4
   b6832:	f7ff ffea 	bl	b680a <_ZNK8particle10BleAddress11toBigEndianEPh>
    if (stripped) {
   b6836:	b19a      	cbz	r2, b6860 <_ZNK8particle10BleAddress8toStringEPcjb+0x40>
        bytes2hexbuf(temp, BLE_SIG_ADDR_LEN, cStr);
   b6838:	aa03      	add	r2, sp, #12
   b683a:	2106      	movs	r1, #6
   b683c:	a801      	add	r0, sp, #4
    len = std::min(len - 1, sizeof(cStr));
   b683e:	1e66      	subs	r6, r4, #1
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 5]);
   b6840:	f7ff ff08 	bl	b6654 <_ZL12bytes2hexbufPKhjPc.isra.0>
    len = std::min(len - 1, sizeof(cStr));
   b6844:	2e11      	cmp	r6, #17
   b6846:	bf28      	it	cs
   b6848:	2611      	movcs	r6, #17
    memcpy(buf, cStr, len);
   b684a:	4632      	mov	r2, r6
   b684c:	a903      	add	r1, sp, #12
   b684e:	4628      	mov	r0, r5
   b6850:	f002 fb46 	bl	b8ee0 <memcpy>
    buf[len++] = '\0';
   b6854:	2300      	movs	r3, #0
   b6856:	55ab      	strb	r3, [r5, r6]
   b6858:	1c74      	adds	r4, r6, #1
}
   b685a:	4620      	mov	r0, r4
   b685c:	b008      	add	sp, #32
   b685e:	bd70      	pop	{r4, r5, r6, pc}
        bytes2hexbuf(&temp[idx], 1, &cStr[idx]);
   b6860:	aa03      	add	r2, sp, #12
   b6862:	2101      	movs	r1, #1
   b6864:	a801      	add	r0, sp, #4
   b6866:	f7ff fef5 	bl	b6654 <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2] = ':';
   b686a:	263a      	movs	r6, #58	; 0x3a
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 1]);
   b686c:	f10d 020f 	add.w	r2, sp, #15
   b6870:	2101      	movs	r1, #1
   b6872:	f10d 0005 	add.w	r0, sp, #5
        cStr[idx * 2] = ':';
   b6876:	f88d 600e 	strb.w	r6, [sp, #14]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 1]);
   b687a:	f7ff feeb 	bl	b6654 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 2]);
   b687e:	f10d 0212 	add.w	r2, sp, #18
   b6882:	2101      	movs	r1, #1
   b6884:	f10d 0006 	add.w	r0, sp, #6
        cStr[idx * 2 + 1] = ':';
   b6888:	f88d 6011 	strb.w	r6, [sp, #17]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 2]);
   b688c:	f7ff fee2 	bl	b6654 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 3]);
   b6890:	f10d 0215 	add.w	r2, sp, #21
   b6894:	2101      	movs	r1, #1
   b6896:	f10d 0007 	add.w	r0, sp, #7
        cStr[idx * 2 + 2] = ':';
   b689a:	f88d 6014 	strb.w	r6, [sp, #20]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 3]);
   b689e:	f7ff fed9 	bl	b6654 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 4]);
   b68a2:	aa06      	add	r2, sp, #24
   b68a4:	2101      	movs	r1, #1
   b68a6:	a802      	add	r0, sp, #8
        cStr[idx * 2 + 3] = ':';
   b68a8:	f88d 6017 	strb.w	r6, [sp, #23]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 4]);
   b68ac:	f7ff fed2 	bl	b6654 <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2 + 4] = ':';
   b68b0:	f88d 601a 	strb.w	r6, [sp, #26]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 5]);
   b68b4:	f10d 021b 	add.w	r2, sp, #27
   b68b8:	2101      	movs	r1, #1
   b68ba:	f10d 0009 	add.w	r0, sp, #9
   b68be:	e7be      	b.n	b683e <_ZNK8particle10BleAddress8toStringEPcjb+0x1e>
        return 0;
   b68c0:	460c      	mov	r4, r1
   b68c2:	e7ca      	b.n	b685a <_ZNK8particle10BleAddress8toStringEPcjb+0x3a>

000b68c4 <_ZNK8particle10BleAddress8toStringEb>:
String BleAddress::toString(bool stripped) const {
   b68c4:	b510      	push	{r4, lr}
   b68c6:	b086      	sub	sp, #24
   b68c8:	4604      	mov	r4, r0
   b68ca:	4613      	mov	r3, r2
   b68cc:	4608      	mov	r0, r1
    toString(cStr, sizeof(cStr), stripped);
   b68ce:	2212      	movs	r2, #18
   b68d0:	a901      	add	r1, sp, #4
   b68d2:	f7ff ffa5 	bl	b6820 <_ZNK8particle10BleAddress8toStringEPcjb>
    return String(cStr);
   b68d6:	a901      	add	r1, sp, #4
   b68d8:	4620      	mov	r0, r4
   b68da:	f002 f8dc 	bl	b8a96 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b68de:	4620      	mov	r0, r4
   b68e0:	b006      	add	sp, #24
   b68e2:	bd10      	pop	{r4, pc}

000b68e4 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b68e4:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b68e6:	2301      	movs	r3, #1
   b68e8:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b68ea:	4b05      	ldr	r3, [pc, #20]	; (b6900 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b68ec:	4602      	mov	r2, r0
   b68ee:	f103 0110 	add.w	r1, r3, #16
   b68f2:	f853 4b04 	ldr.w	r4, [r3], #4
   b68f6:	f842 4b04 	str.w	r4, [r2], #4
   b68fa:	428b      	cmp	r3, r1
   b68fc:	d1f9      	bne.n	b68f2 <_ZN8particle7BleUuidC1Ev+0xe>
}
   b68fe:	bd10      	pop	{r4, pc}
   b6900:	000b984a 	.word	0x000b984a

000b6904 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>:
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   b6904:	7c0b      	ldrb	r3, [r1, #16]
   b6906:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
   b690a:	b530      	push	{r4, r5, lr}
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   b690c:	d10d      	bne.n	b692a <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x26>
        type_ = BleUuidType::SHORT;
   b690e:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6910:	4b0c      	ldr	r3, [pc, #48]	; (b6944 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x40>)
   b6912:	4602      	mov	r2, r0
   b6914:	f103 0410 	add.w	r4, r3, #16
   b6918:	f853 5b04 	ldr.w	r5, [r3], #4
   b691c:	f842 5b04 	str.w	r5, [r2], #4
   b6920:	42a3      	cmp	r3, r4
   b6922:	d1f9      	bne.n	b6918 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x14>
        uuid128_[UUID16_LO] = (uint8_t)uuid.uuid16;
   b6924:	880b      	ldrh	r3, [r1, #0]
   b6926:	8183      	strh	r3, [r0, #12]
}
   b6928:	bd30      	pop	{r4, r5, pc}
        type_ = BleUuidType::LONG;
   b692a:	2301      	movs	r3, #1
   b692c:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, uuid.uuid128, BLE_SIG_UUID_128BIT_LEN);
   b692e:	f101 0210 	add.w	r2, r1, #16
   b6932:	4603      	mov	r3, r0
   b6934:	f851 4b04 	ldr.w	r4, [r1], #4
   b6938:	f843 4b04 	str.w	r4, [r3], #4
   b693c:	4291      	cmp	r1, r2
   b693e:	d1f9      	bne.n	b6934 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x30>
   b6940:	e7f2      	b.n	b6928 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x24>
   b6942:	bf00      	nop
   b6944:	000b984a 	.word	0x000b984a

000b6948 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b6948:	b510      	push	{r4, lr}
    if (uuid128) {
   b694a:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b694c:	4604      	mov	r4, r0
    if (uuid128) {
   b694e:	b1b1      	cbz	r1, b697e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b6950:	2a01      	cmp	r2, #1
   b6952:	f101 0210 	add.w	r2, r1, #16
   b6956:	d10a      	bne.n	b696e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b6958:	4601      	mov	r1, r0
   b695a:	f853 0b04 	ldr.w	r0, [r3], #4
   b695e:	f841 0b04 	str.w	r0, [r1], #4
   b6962:	4293      	cmp	r3, r2
   b6964:	d1f9      	bne.n	b695a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b6966:	2301      	movs	r3, #1
   b6968:	6123      	str	r3, [r4, #16]
}
   b696a:	4620      	mov	r0, r4
   b696c:	bd10      	pop	{r4, pc}
   b696e:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b6970:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b6974:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b6978:	429a      	cmp	r2, r3
   b697a:	d1f9      	bne.n	b6970 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b697c:	e7f3      	b.n	b6966 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b697e:	2210      	movs	r2, #16
   b6980:	f002 fad6 	bl	b8f30 <memset>
   b6984:	e7f1      	b.n	b696a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b6986 <_ZN8particle7BleUuidC1Et>:
BleUuid::BleUuid(uint16_t uuid16)
   b6986:	b538      	push	{r3, r4, r5, lr}
   b6988:	4604      	mov	r4, r0
   b698a:	460d      	mov	r5, r1
        : BleUuid() {
   b698c:	f7ff ffaa 	bl	b68e4 <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
   b6990:	2300      	movs	r3, #0
   b6992:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b6994:	81a5      	strh	r5, [r4, #12]
}
   b6996:	4620      	mov	r0, r4
   b6998:	bd38      	pop	{r3, r4, r5, pc}

000b699a <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b699a:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b699c:	6902      	ldr	r2, [r0, #16]
   b699e:	690b      	ldr	r3, [r1, #16]
   b69a0:	429a      	cmp	r2, r3
   b69a2:	d106      	bne.n	b69b2 <_ZNK8particle7BleUuideqERKS0_+0x18>
   b69a4:	2210      	movs	r2, #16
   b69a6:	f002 fa8b 	bl	b8ec0 <memcmp>
   b69aa:	fab0 f080 	clz	r0, r0
   b69ae:	0940      	lsrs	r0, r0, #5
}
   b69b0:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b69b2:	2000      	movs	r0, #0
   b69b4:	e7fc      	b.n	b69b0 <_ZNK8particle7BleUuideqERKS0_+0x16>

000b69b6 <_ZNK8particle7BleUuid11toBigEndianEPh>:
void BleUuid::toBigEndian(uint8_t buf[BLE_SIG_UUID_128BIT_LEN]) const {
   b69b6:	b510      	push	{r4, lr}
   b69b8:	f100 030f 	add.w	r3, r0, #15
   b69bc:	3901      	subs	r1, #1
        buf[i] = uuid128_[j];
   b69be:	781c      	ldrb	r4, [r3, #0]
   b69c0:	f801 4f01 	strb.w	r4, [r1, #1]!
    for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b69c4:	4283      	cmp	r3, r0
   b69c6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   b69ca:	d1f8      	bne.n	b69be <_ZNK8particle7BleUuid11toBigEndianEPh+0x8>
}
   b69cc:	bd10      	pop	{r4, pc}

000b69ce <_ZNK8particle7BleUuid8toStringEPcjb>:
size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
   b69ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b69d2:	461f      	mov	r7, r3
   b69d4:	b08e      	sub	sp, #56	; 0x38
    if (!buf || len == 0) {
   b69d6:	460d      	mov	r5, r1
   b69d8:	2900      	cmp	r1, #0
   b69da:	d05b      	beq.n	b6a94 <_ZNK8particle7BleUuid8toStringEPcjb+0xc6>
   b69dc:	b1da      	cbz	r2, b6a16 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
    if (type() == BleUuidType::SHORT) {
   b69de:	f8d0 8010 	ldr.w	r8, [r0, #16]
        len = std::min(len - 1, sizeof(cStr));
   b69e2:	1e54      	subs	r4, r2, #1
    if (type() == BleUuidType::SHORT) {
   b69e4:	f1b8 0f00 	cmp.w	r8, #0
   b69e8:	d119      	bne.n	b6a1e <_ZNK8particle7BleUuid8toStringEPcjb+0x50>
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b69ea:	8983      	ldrh	r3, [r0, #12]
        char cStr[BLE_SIG_UUID_16BIT_LEN * 2] = {};
   b69ec:	f8cd 8014 	str.w	r8, [sp, #20]
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b69f0:	ba5b      	rev16	r3, r3
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   b69f2:	aa05      	add	r2, sp, #20
   b69f4:	2102      	movs	r1, #2
   b69f6:	a801      	add	r0, sp, #4
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b69f8:	f8ad 3004 	strh.w	r3, [sp, #4]
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   b69fc:	f7ff fe2a 	bl	b6654 <_ZL12bytes2hexbufPKhjPc.isra.0>
        len = std::min(len - 1, sizeof(cStr));
   b6a00:	2c04      	cmp	r4, #4
   b6a02:	bf28      	it	cs
   b6a04:	2404      	movcs	r4, #4
        memcpy(buf, cStr, len);
   b6a06:	4622      	mov	r2, r4
   b6a08:	a905      	add	r1, sp, #20
   b6a0a:	4628      	mov	r0, r5
   b6a0c:	f002 fa68 	bl	b8ee0 <memcpy>
        buf[len++] = '\0';
   b6a10:	f805 8004 	strb.w	r8, [r5, r4]
   b6a14:	1c62      	adds	r2, r4, #1
}
   b6a16:	4610      	mov	r0, r2
   b6a18:	b00e      	add	sp, #56	; 0x38
   b6a1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    toBigEndian(temp);
   b6a1e:	a901      	add	r1, sp, #4
   b6a20:	f7ff ffc9 	bl	b69b6 <_ZNK8particle7BleUuid11toBigEndianEPh>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   b6a24:	aa05      	add	r2, sp, #20
    if (stripped) {
   b6a26:	b17f      	cbz	r7, b6a48 <_ZNK8particle7BleUuid8toStringEPcjb+0x7a>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   b6a28:	2110      	movs	r1, #16
   b6a2a:	a801      	add	r0, sp, #4
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   b6a2c:	f7ff fe12 	bl	b6654 <_ZL12bytes2hexbufPKhjPc.isra.0>
    len = std::min(len - 1, sizeof(cStr));
   b6a30:	2c24      	cmp	r4, #36	; 0x24
   b6a32:	bf28      	it	cs
   b6a34:	2424      	movcs	r4, #36	; 0x24
    memcpy(buf, cStr, len);
   b6a36:	4622      	mov	r2, r4
   b6a38:	a905      	add	r1, sp, #20
   b6a3a:	4628      	mov	r0, r5
   b6a3c:	f002 fa50 	bl	b8ee0 <memcpy>
    buf[len++] = '\0';
   b6a40:	2300      	movs	r3, #0
   b6a42:	552b      	strb	r3, [r5, r4]
   b6a44:	1c62      	adds	r2, r4, #1
    return len;
   b6a46:	e7e6      	b.n	b6a16 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
   b6a48:	2104      	movs	r1, #4
   b6a4a:	eb0d 0001 	add.w	r0, sp, r1
   b6a4e:	f7ff fe01 	bl	b6654 <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2] = '-';
   b6a52:	262d      	movs	r6, #45	; 0x2d
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   b6a54:	f10d 021d 	add.w	r2, sp, #29
   b6a58:	2102      	movs	r1, #2
   b6a5a:	a802      	add	r0, sp, #8
        cStr[idx * 2] = '-';
   b6a5c:	f88d 601c 	strb.w	r6, [sp, #28]
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   b6a60:	f7ff fdf8 	bl	b6654 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   b6a64:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   b6a68:	2102      	movs	r1, #2
   b6a6a:	f10d 000a 	add.w	r0, sp, #10
        cStr[idx * 2 + 1] = '-';
   b6a6e:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   b6a72:	f7ff fdef 	bl	b6654 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   b6a76:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   b6a7a:	2102      	movs	r1, #2
   b6a7c:	a803      	add	r0, sp, #12
        cStr[idx * 2 + 2] = '-';
   b6a7e:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   b6a82:	f7ff fde7 	bl	b6654 <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2 + 3] = '-';
   b6a86:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   b6a8a:	aa0b      	add	r2, sp, #44	; 0x2c
   b6a8c:	2106      	movs	r1, #6
   b6a8e:	f10d 000e 	add.w	r0, sp, #14
   b6a92:	e7cb      	b.n	b6a2c <_ZNK8particle7BleUuid8toStringEPcjb+0x5e>
        return 0;
   b6a94:	460a      	mov	r2, r1
   b6a96:	e7be      	b.n	b6a16 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>

000b6a98 <_ZNK8particle7BleUuid8toStringEb>:
String BleUuid::toString(bool stripped) const {
   b6a98:	b510      	push	{r4, lr}
   b6a9a:	b08a      	sub	sp, #40	; 0x28
   b6a9c:	4604      	mov	r4, r0
    toString(cStr, sizeof(cStr));
   b6a9e:	2300      	movs	r3, #0
   b6aa0:	2225      	movs	r2, #37	; 0x25
String BleUuid::toString(bool stripped) const {
   b6aa2:	4608      	mov	r0, r1
    toString(cStr, sizeof(cStr));
   b6aa4:	4669      	mov	r1, sp
   b6aa6:	f7ff ff92 	bl	b69ce <_ZNK8particle7BleUuid8toStringEPcjb>
    return String(cStr);
   b6aaa:	4669      	mov	r1, sp
   b6aac:	4620      	mov	r0, r4
   b6aae:	f001 fff2 	bl	b8a96 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b6ab2:	4620      	mov	r0, r4
   b6ab4:	b00a      	add	sp, #40	; 0x28
   b6ab6:	bd10      	pop	{r4, pc}

000b6ab8 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>:
size_t BleAdvertisingData::get(BleAdvertisingDataType type, uint8_t* buf, size_t len) const {
   b6ab8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b6aba:	4605      	mov	r5, r0
   b6abc:	4616      	mov	r6, r2
   b6abe:	461f      	mov	r7, r3
   b6ac0:	460a      	mov	r2, r1
   b6ac2:	ab01      	add	r3, sp, #4
   b6ac4:	e9d0 0100 	ldrd	r0, r1, [r0]
   b6ac8:	f7ff fd44 	bl	b6554 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (adsLen > 0) {
   b6acc:	f030 0402 	bics.w	r4, r0, #2
   b6ad0:	d00c      	beq.n	b6aec <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
            adsLen -= 2;
   b6ad2:	1e84      	subs	r4, r0, #2
   b6ad4:	42bc      	cmp	r4, r7
   b6ad6:	bf28      	it	cs
   b6ad8:	463c      	movcs	r4, r7
            if (buf != nullptr) {
   b6ada:	b13e      	cbz	r6, b6aec <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
                memcpy(buf, &selfData_[offset + 2], len);
   b6adc:	9901      	ldr	r1, [sp, #4]
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::operator[](int i) const {
    return data_[i];
   b6ade:	682b      	ldr	r3, [r5, #0]
   b6ae0:	3102      	adds	r1, #2
   b6ae2:	4622      	mov	r2, r4
   b6ae4:	4419      	add	r1, r3
   b6ae6:	4630      	mov	r0, r6
   b6ae8:	f002 f9fa 	bl	b8ee0 <memcpy>
}
   b6aec:	4620      	mov	r0, r4
   b6aee:	b003      	add	sp, #12
   b6af0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6af2 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>:
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   b6af2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6af4:	4613      	mov	r3, r2
   b6af6:	460c      	mov	r4, r1
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b6af8:	9201      	str	r2, [sp, #4]
   b6afa:	460a      	mov	r2, r1
   b6afc:	2108      	movs	r1, #8
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   b6afe:	4605      	mov	r5, r0
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b6b00:	f7ff ffda 	bl	b6ab8 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (nameLen > 0) {
   b6b04:	b940      	cbnz	r0, b6b18 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj+0x26>
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b6b06:	9b01      	ldr	r3, [sp, #4]
   b6b08:	4622      	mov	r2, r4
   b6b0a:	2109      	movs	r1, #9
   b6b0c:	4628      	mov	r0, r5
}
   b6b0e:	b003      	add	sp, #12
   b6b10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b6b14:	f7ff bfd0 	b.w	b6ab8 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
}
   b6b18:	b003      	add	sp, #12
   b6b1a:	bd30      	pop	{r4, r5, pc}

000b6b1c <_ZNK8particle18BleAdvertisingData10deviceNameEv>:
String BleAdvertisingData::deviceName() const {
   b6b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6b1e:	460c      	mov	r4, r1
   b6b20:	b089      	sub	sp, #36	; 0x24
    String name;
   b6b22:	490c      	ldr	r1, [pc, #48]	; (b6b54 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x38>)
String BleAdvertisingData::deviceName() const {
   b6b24:	4605      	mov	r5, r0
    String name;
   b6b26:	f001 ffb6 	bl	b8a96 <_ZN6StringC1EPK19__FlashStringHelper>
    size_t len = deviceName(buf, sizeof(buf));
   b6b2a:	221f      	movs	r2, #31
   b6b2c:	4669      	mov	r1, sp
   b6b2e:	4620      	mov	r0, r4
   b6b30:	f7ff ffdf 	bl	b6af2 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>
    if (len > 0) {
   b6b34:	4606      	mov	r6, r0
   b6b36:	b150      	cbz	r0, b6b4e <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
   b6b38:	466c      	mov	r4, sp
        for (size_t i = 0; i < len; i++) {
   b6b3a:	2700      	movs	r7, #0
            if (!name.concat(buf[i])) {
   b6b3c:	f814 1b01 	ldrb.w	r1, [r4], #1
   b6b40:	4628      	mov	r0, r5
   b6b42:	f002 f827 	bl	b8b94 <_ZN6String6concatEc>
   b6b46:	b110      	cbz	r0, b6b4e <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
        for (size_t i = 0; i < len; i++) {
   b6b48:	3701      	adds	r7, #1
   b6b4a:	42be      	cmp	r6, r7
   b6b4c:	d1f6      	bne.n	b6b3c <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x20>
}
   b6b4e:	4628      	mov	r0, r5
   b6b50:	b009      	add	sp, #36	; 0x24
   b6b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b6b54:	000b92b9 	.word	0x000b92b9

000b6b58 <_ZNK8particle18BleAdvertisingData10appearanceEv>:
ble_sig_appearance_t BleAdvertisingData::appearance() const {
   b6b58:	b507      	push	{r0, r1, r2, lr}
    size_t len = get(BleAdvertisingDataType::APPEARANCE, buf, sizeof(buf));
   b6b5a:	2302      	movs	r3, #2
   b6b5c:	aa01      	add	r2, sp, #4
   b6b5e:	2119      	movs	r1, #25
   b6b60:	f7ff ffaa 	bl	b6ab8 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (len > 0) {
   b6b64:	b108      	cbz	r0, b6b6a <_ZNK8particle18BleAdvertisingData10appearanceEv+0x12>
        uint16_t temp = (uint16_t)buf[1] << 8 | buf[0];
   b6b66:	f8bd 0004 	ldrh.w	r0, [sp, #4]
}
   b6b6a:	b003      	add	sp, #12
   b6b6c:	f85d fb04 	ldr.w	pc, [sp], #4

000b6b70 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b6b70:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b6b72:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b6b76:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b6b78:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b6b7a:	8043      	strh	r3, [r0, #2]
   b6b7c:	220e      	movs	r2, #14
   b6b7e:	4629      	mov	r1, r5
   b6b80:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b6b82:	7105      	strb	r5, [r0, #4]
   b6b84:	3006      	adds	r0, #6
   b6b86:	f002 f9d3 	bl	b8f30 <memset>
   b6b8a:	f104 0014 	add.w	r0, r4, #20
   b6b8e:	f7ff fea9 	bl	b68e4 <_ZN8particle7BleUuidC1Ev>
   b6b92:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b6b96:	f7ff fea5 	bl	b68e4 <_ZN8particle7BleUuidC1Ev>
   b6b9a:	4904      	ldr	r1, [pc, #16]	; (b6bac <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b6b9c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b6ba0:	f001 ff79 	bl	b8a96 <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b6ba4:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b6ba6:	4620      	mov	r0, r4
   b6ba8:	bd38      	pop	{r3, r4, r5, pc}
   b6baa:	bf00      	nop
   b6bac:	000b92b9 	.word	0x000b92b9

000b6bb0 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>:
    bool hasCharacteristic(const BleCharacteristic& characteristic) {
   b6bb0:	b538      	push	{r3, r4, r5, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b6bb2:	680d      	ldr	r5, [r1, #0]
   b6bb4:	4604      	mov	r4, r0
        if ( characteristic.impl()->svcUUID() == uuid_ && 
   b6bb6:	4601      	mov	r1, r0
   b6bb8:	f105 0028 	add.w	r0, r5, #40	; 0x28
   b6bbc:	f7ff feed 	bl	b699a <_ZNK8particle7BleUuideqERKS0_>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
   b6bc0:	b140      	cbz	r0, b6bd4 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>
   b6bc2:	89ab      	ldrh	r3, [r5, #12]
        if ( characteristic.impl()->svcUUID() == uuid_ && 
   b6bc4:	8aa2      	ldrh	r2, [r4, #20]
   b6bc6:	429a      	cmp	r2, r3
   b6bc8:	d805      	bhi.n	b6bd6 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x26>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
   b6bca:	8ae0      	ldrh	r0, [r4, #22]
   b6bcc:	4298      	cmp	r0, r3
   b6bce:	bf34      	ite	cc
   b6bd0:	2000      	movcc	r0, #0
   b6bd2:	2001      	movcs	r0, #1
    }
   b6bd4:	bd38      	pop	{r3, r4, r5, pc}
        return false;
   b6bd6:	2000      	movs	r0, #0
   b6bd8:	e7fc      	b.n	b6bd4 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>

000b6bda <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b6bda:	b510      	push	{r4, lr}
    return data_ + size_;
   b6bdc:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b6be0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b6be4:	4293      	cmp	r3, r2
   b6be6:	4618      	mov	r0, r3
   b6be8:	d006      	beq.n	b6bf8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b6bea:	6804      	ldr	r4, [r0, #0]
   b6bec:	8824      	ldrh	r4, [r4, #0]
   b6bee:	428c      	cmp	r4, r1
   b6bf0:	f103 0308 	add.w	r3, r3, #8
   b6bf4:	d1f6      	bne.n	b6be4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b6bf6:	bd10      	pop	{r4, pc}
        return nullptr;
   b6bf8:	2000      	movs	r0, #0
   b6bfa:	e7fc      	b.n	b6bf6 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>

000b6bfc <_ZN8particle17BleCharacteristicC1Ev>:

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6bfc:	2300      	movs	r3, #0
BleCharacteristic::BleCharacteristic()
   b6bfe:	b570      	push	{r4, r5, r6, lr}
   b6c00:	6003      	str	r3, [r0, #0]
   b6c02:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6c04:	2068      	movs	r0, #104	; 0x68
   b6c06:	f7fd fa44 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b6c0a:	1e04      	subs	r4, r0, #0
   b6c0c:	f104 060c 	add.w	r6, r4, #12
   b6c10:	d007      	beq.n	b6c22 <_ZN8particle17BleCharacteristicC1Ev+0x26>
      : _M_use_count(1), _M_weak_count(1) { }
   b6c12:	2301      	movs	r3, #1
   b6c14:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   b6c18:	4b04      	ldr	r3, [pc, #16]	; (b6c2c <_ZN8particle17BleCharacteristicC1Ev+0x30>)
   b6c1a:	6023      	str	r3, [r4, #0]
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b6c1c:	4630      	mov	r0, r6
   b6c1e:	f7ff ffa7 	bl	b6b70 <_ZN8particle21BleCharacteristicImplC1Ev>
	  __p = __pi->_M_ptr();
   b6c22:	e9c5 6400 	strd	r6, r4, [r5]
}
   b6c26:	4628      	mov	r0, r5
   b6c28:	bd70      	pop	{r4, r5, r6, pc}
   b6c2a:	bf00      	nop
   b6c2c:	000b97f8 	.word	0x000b97f8

000b6c30 <_ZNK8particle17BleCharacteristic9subscribeEb>:
int BleCharacteristic::subscribe(bool enable) const {
   b6c30:	b510      	push	{r4, lr}
      { return _M_ptr; }
   b6c32:	6803      	ldr	r3, [r0, #0]
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   b6c34:	781a      	ldrb	r2, [r3, #0]
int BleCharacteristic::subscribe(bool enable) const {
   b6c36:	b086      	sub	sp, #24
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   b6c38:	bb52      	cbnz	r2, b6c90 <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
   b6c3a:	885c      	ldrh	r4, [r3, #2]
   b6c3c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b6c40:	4284      	cmp	r4, r0
   b6c42:	d025      	beq.n	b6c90 <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   b6c44:	8a18      	ldrh	r0, [r3, #16]
   b6c46:	b330      	cbz	r0, b6c96 <_ZNK8particle17BleCharacteristic9subscribeEb+0x66>
    hal_ble_cccd_config_t config = {};
   b6c48:	e9cd 2203 	strd	r2, r2, [sp, #12]
   b6c4c:	9205      	str	r2, [sp, #20]
    config.version = BLE_API_VERSION;
   b6c4e:	4a13      	ldr	r2, [pc, #76]	; (b6c9c <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>)
   b6c50:	9200      	str	r2, [sp, #0]
    config.callback = impl()->onBleCharEvents;
   b6c52:	4a13      	ldr	r2, [pc, #76]	; (b6ca0 <_ZNK8particle17BleCharacteristic9subscribeEb+0x70>)
    config.context = impl();
   b6c54:	e9cd 2301 	strd	r2, r3, [sp, #4]
    config.conn_handle = impl()->connHandle();
   b6c58:	885a      	ldrh	r2, [r3, #2]
   b6c5a:	f8ad 200c 	strh.w	r2, [sp, #12]
    config.cccd_handle = impl()->attrHandles().cccd_handle;
   b6c5e:	8a1a      	ldrh	r2, [r3, #16]
   b6c60:	f8ad 200e 	strh.w	r2, [sp, #14]
    config.value_handle = impl()->attrHandles().value_handle;
   b6c64:	899a      	ldrh	r2, [r3, #12]
   b6c66:	f8ad 2010 	strh.w	r2, [sp, #16]
    if (enable) {
   b6c6a:	b159      	cbz	r1, b6c84 <_ZNK8particle17BleCharacteristic9subscribeEb+0x54>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b6c6c:	791a      	ldrb	r2, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE)) {
   b6c6e:	0692      	lsls	r2, r2, #26
            config.cccd_value = BLE_SIG_CCCD_VAL_INDICATION;
   b6c70:	bf44      	itt	mi
   b6c72:	2202      	movmi	r2, #2
   b6c74:	9205      	strmi	r2, [sp, #20]
   b6c76:	791b      	ldrb	r3, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
   b6c78:	06db      	lsls	r3, r3, #27
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
   b6c7a:	bf42      	ittt	mi
   b6c7c:	9b05      	ldrmi	r3, [sp, #20]
   b6c7e:	f043 0301 	orrmi.w	r3, r3, #1
   b6c82:	9305      	strmi	r3, [sp, #20]
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
   b6c84:	2100      	movs	r1, #0
   b6c86:	4668      	mov	r0, sp
   b6c88:	f7fd fdf8 	bl	b487c <hal_ble_gatt_client_configure_cccd>
}
   b6c8c:	b006      	add	sp, #24
   b6c8e:	bd10      	pop	{r4, pc}
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   b6c90:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b6c94:	e7fa      	b.n	b6c8c <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   b6c96:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b6c9a:	e7f7      	b.n	b6c8c <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
   b6c9c:	00180003 	.word	0x00180003
   b6ca0:	000b6e75 	.word	0x000b6e75

000b6ca4 <_ZN8particle10BleServiceC1Ev>:
BleService::BleService()
   b6ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6ca6:	2600      	movs	r6, #0
   b6ca8:	6006      	str	r6, [r0, #0]
   b6caa:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6cac:	2028      	movs	r0, #40	; 0x28
   b6cae:	f7fd f9f0 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b6cb2:	1e04      	subs	r4, r0, #0
   b6cb4:	f104 070c 	add.w	r7, r4, #12
   b6cb8:	d00a      	beq.n	b6cd0 <_ZN8particle10BleServiceC1Ev+0x2c>
      : _M_use_count(1), _M_weak_count(1) { }
   b6cba:	2301      	movs	r3, #1
   b6cbc:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   b6cc0:	4b05      	ldr	r3, [pc, #20]	; (b6cd8 <_ZN8particle10BleServiceC1Ev+0x34>)
   b6cc2:	6023      	str	r3, [r4, #0]
              characteristicsDiscovered_(false) {
   b6cc4:	4638      	mov	r0, r7
   b6cc6:	f7ff fe0d 	bl	b68e4 <_ZN8particle7BleUuidC1Ev>
   b6cca:	6226      	str	r6, [r4, #32]
   b6ccc:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
	  __p = __pi->_M_ptr();
   b6cd0:	e9c5 7400 	strd	r7, r4, [r5]
}
   b6cd4:	4628      	mov	r0, r5
   b6cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b6cd8:	000b9814 	.word	0x000b9814

000b6cdc <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b6cdc:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6cde:	2500      	movs	r5, #0
   b6ce0:	6005      	str	r5, [r0, #0]
   b6ce2:	4606      	mov	r6, r0
   b6ce4:	2030      	movs	r0, #48	; 0x30
   b6ce6:	f7fd f9d4 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b6cea:	4604      	mov	r4, r0
   b6cec:	b188      	cbz	r0, b6d12 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b6cee:	2301      	movs	r3, #1
   b6cf0:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b6cf4:	4b09      	ldr	r3, [pc, #36]	; (b6d1c <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b6cf6:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b6cf8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b6cfc:	8183      	strh	r3, [r0, #12]
   b6cfe:	300e      	adds	r0, #14
   b6d00:	f7ff fd79 	bl	b67f6 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b6d04:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b6d08:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b6d0c:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b6d10:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b6d12:	6074      	str	r4, [r6, #4]
   b6d14:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b6d16:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b6d18:	4630      	mov	r0, r6
   b6d1a:	bd70      	pop	{r4, r5, r6, pc}
   b6d1c:	000b9830 	.word	0x000b9830

000b6d20 <_ZNK8particle13BlePeerDevice9connectedEv>:
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
    }
    return SYSTEM_ERROR_NONE;
}

bool BlePeerDevice::connected() const {
   b6d20:	b513      	push	{r0, r1, r4, lr}
   b6d22:	4604      	mov	r4, r0
    WiringBleLock lk;
   b6d24:	a801      	add	r0, sp, #4
   b6d26:	f7ff fce3 	bl	b66f0 <_ZN8particle3ble13WiringBleLockC1Ev>
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   b6d2a:	6823      	ldr	r3, [r4, #0]
   b6d2c:	881c      	ldrh	r4, [r3, #0]
   b6d2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b6d32:	1ae4      	subs	r4, r4, r3
    WiringBleLock lk;
   b6d34:	a801      	add	r0, sp, #4
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   b6d36:	bf18      	it	ne
   b6d38:	2401      	movne	r4, #1
    WiringBleLock lk;
   b6d3a:	f7ff fce7 	bl	b670c <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b6d3e:	4620      	mov	r0, r4
   b6d40:	b002      	add	sp, #8
   b6d42:	bd10      	pop	{r4, pc}

000b6d44 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>:

void BlePeerDevice::bind(const BleAddress& address) const {
   b6d44:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6d46:	4605      	mov	r5, r0
   b6d48:	460c      	mov	r4, r1
    WiringBleLock lk;
   b6d4a:	a801      	add	r0, sp, #4
   b6d4c:	f7ff fcd0 	bl	b66f0 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b6d50:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b6d52:	6823      	ldr	r3, [r4, #0]
   b6d54:	f8c2 3002 	str.w	r3, [r2, #2]
   b6d58:	6863      	ldr	r3, [r4, #4]
   b6d5a:	f8c2 3006 	str.w	r3, [r2, #6]
    WiringBleLock lk;
   b6d5e:	a801      	add	r0, sp, #4
   b6d60:	f7ff fcd4 	bl	b670c <_ZN8particle3ble13WiringBleLockD1Ev>
    impl()->address() = address;
}
   b6d64:	b003      	add	sp, #12
   b6d66:	bd30      	pop	{r4, r5, pc}

000b6d68 <_ZNK8particle13BlePeerDevice7addressEv>:

BleAddress BlePeerDevice::address() const {
   b6d68:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6d6a:	460d      	mov	r5, r1
   b6d6c:	4604      	mov	r4, r0
    WiringBleLock lk;
   b6d6e:	a801      	add	r0, sp, #4
   b6d70:	f7ff fcbe 	bl	b66f0 <_ZN8particle3ble13WiringBleLockC1Ev>
   b6d74:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b6d76:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b6d7a:	6023      	str	r3, [r4, #0]
   b6d7c:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b6d80:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b6d82:	a801      	add	r0, sp, #4
   b6d84:	f7ff fcc2 	bl	b670c <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b6d88:	4620      	mov	r0, r4
   b6d8a:	b003      	add	sp, #12
   b6d8c:	bd30      	pop	{r4, r5, pc}

000b6d8e <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b6d8e:	b530      	push	{r4, r5, lr}
   b6d90:	4605      	mov	r5, r0
   b6d92:	b087      	sub	sp, #28
   b6d94:	460c      	mov	r4, r1
    WiringBleLock lk;
   b6d96:	a801      	add	r0, sp, #4
   b6d98:	f7ff fcaa 	bl	b66f0 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b6d9c:	682a      	ldr	r2, [r5, #0]
   b6d9e:	6823      	ldr	r3, [r4, #0]
   b6da0:	8812      	ldrh	r2, [r2, #0]
   b6da2:	881b      	ldrh	r3, [r3, #0]
   b6da4:	429a      	cmp	r2, r3
   b6da6:	d10d      	bne.n	b6dc4 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b6da8:	4629      	mov	r1, r5
   b6daa:	a802      	add	r0, sp, #8
   b6dac:	f7ff ffdc 	bl	b6d68 <_ZNK8particle13BlePeerDevice7addressEv>
   b6db0:	4621      	mov	r1, r4
   b6db2:	a804      	add	r0, sp, #16
   b6db4:	f7ff ffd8 	bl	b6d68 <_ZNK8particle13BlePeerDevice7addressEv>
   b6db8:	a904      	add	r1, sp, #16
   b6dba:	a802      	add	r0, sp, #8
   b6dbc:	f7ff fd07 	bl	b67ce <_ZNK8particle10BleAddresseqERKS0_>
   b6dc0:	4604      	mov	r4, r0
   b6dc2:	b900      	cbnz	r0, b6dc6 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b6dc4:	2400      	movs	r4, #0
    WiringBleLock lk;
   b6dc6:	a801      	add	r0, sp, #4
   b6dc8:	f7ff fca0 	bl	b670c <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b6dcc:	4620      	mov	r0, r4
   b6dce:	b007      	add	sp, #28
   b6dd0:	bd30      	pop	{r4, r5, pc}
	...

000b6dd4 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b6dd4:	b510      	push	{r4, lr}
   b6dd6:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b6dd8:	2064      	movs	r0, #100	; 0x64
   b6dda:	f7fd f95a 	bl	b4092 <_Znwj>
   b6dde:	b168      	cbz	r0, b6dfc <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b6de0:	2300      	movs	r3, #0
   b6de2:	e9c0 3300 	strd	r3, r3, [r0]
   b6de6:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b6dea:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b6dee:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b6df2:	6203      	str	r3, [r0, #32]
   b6df4:	62c3      	str	r3, [r0, #44]	; 0x2c
   b6df6:	63c3      	str	r3, [r0, #60]	; 0x3c
   b6df8:	64c3      	str	r3, [r0, #76]	; 0x4c
   b6dfa:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b6dfc:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b6dfe:	b920      	cbnz	r0, b6e0a <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b6e00:	4a0a      	ldr	r2, [pc, #40]	; (b6e2c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b6e02:	490b      	ldr	r1, [pc, #44]	; (b6e30 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b6e04:	200a      	movs	r0, #10
   b6e06:	f7fd fd6b 	bl	b48e0 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b6e0a:	2000      	movs	r0, #0
   b6e0c:	f7fd fcd0 	bl	b47b0 <hal_ble_stack_init>
   b6e10:	b120      	cbz	r0, b6e1c <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b6e12:	4a06      	ldr	r2, [pc, #24]	; (b6e2c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b6e14:	4907      	ldr	r1, [pc, #28]	; (b6e34 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b6e16:	200a      	movs	r0, #10
   b6e18:	f7fd fd62 	bl	b48e0 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b6e1c:	6821      	ldr	r1, [r4, #0]
   b6e1e:	4806      	ldr	r0, [pc, #24]	; (b6e38 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b6e20:	2200      	movs	r2, #0
   b6e22:	f7fd fd21 	bl	b4868 <hal_ble_set_callback_on_periph_link_events>
}
   b6e26:	4620      	mov	r0, r4
   b6e28:	bd10      	pop	{r4, pc}
   b6e2a:	bf00      	nop
   b6e2c:	000b48a1 	.word	0x000b48a1
   b6e30:	000b95d4 	.word	0x000b95d4
   b6e34:	000b9612 	.word	0x000b9612
   b6e38:	000b77d9 	.word	0x000b77d9

000b6e3c <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b6e3c:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b6e3e:	4c0a      	ldr	r4, [pc, #40]	; (b6e68 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b6e40:	7823      	ldrb	r3, [r4, #0]
   b6e42:	f3bf 8f5b 	dmb	ish
   b6e46:	07db      	lsls	r3, r3, #31
   b6e48:	d40c      	bmi.n	b6e64 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b6e4a:	4620      	mov	r0, r4
   b6e4c:	f7fd f934 	bl	b40b8 <__cxa_guard_acquire>
   b6e50:	b140      	cbz	r0, b6e64 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b6e52:	4806      	ldr	r0, [pc, #24]	; (b6e6c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b6e54:	f7ff ffbe 	bl	b6dd4 <_ZN8particle14BleLocalDeviceC1Ev>
   b6e58:	4620      	mov	r0, r4
   b6e5a:	f7fd f932 	bl	b40c2 <__cxa_guard_release>
   b6e5e:	4804      	ldr	r0, [pc, #16]	; (b6e70 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b6e60:	f002 f820 	bl	b8ea4 <atexit>
    return instance;
}
   b6e64:	4801      	ldr	r0, [pc, #4]	; (b6e6c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b6e66:	bd10      	pop	{r4, pc}
   b6e68:	2003e71c 	.word	0x2003e71c
   b6e6c:	2003e724 	.word	0x2003e724
   b6e70:	000b7139 	.word	0x000b7139

000b6e74 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b6e74:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b6e76:	6803      	ldr	r3, [r0, #0]
   b6e78:	3b09      	subs	r3, #9
   b6e7a:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b6e7c:	b08d      	sub	sp, #52	; 0x34
   b6e7e:	4604      	mov	r4, r0
   b6e80:	460d      	mov	r5, r1
    switch (event->type) {
   b6e82:	d811      	bhi.n	b6ea8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b6e84:	f7ff ffda 	bl	b6e3c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6e88:	88a1      	ldrh	r1, [r4, #4]
   b6e8a:	6800      	ldr	r0, [r0, #0]
   b6e8c:	f7ff fea5 	bl	b6bda <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b6e90:	4603      	mov	r3, r0
   b6e92:	b958      	cbnz	r0, b6eac <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b6e94:	2220      	movs	r2, #32
   b6e96:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b6e9a:	4a0b      	ldr	r2, [pc, #44]	; (b6ec8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b6e9c:	9200      	str	r2, [sp, #0]
   b6e9e:	490b      	ldr	r1, [pc, #44]	; (b6ecc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b6ea0:	aa04      	add	r2, sp, #16
   b6ea2:	2032      	movs	r0, #50	; 0x32
   b6ea4:	f7fd fd24 	bl	b48f0 <log_message>
}
   b6ea8:	b00d      	add	sp, #52	; 0x34
   b6eaa:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b6eac:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b6eae:	2a00      	cmp	r2, #0
   b6eb0:	d0fa      	beq.n	b6ea8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b6eb2:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6eb6:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b6eba:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b6ebe:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b6ec0:	aa04      	add	r2, sp, #16
   b6ec2:	a903      	add	r1, sp, #12
   b6ec4:	47a0      	blx	r4
}
   b6ec6:	e7ef      	b.n	b6ea8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b6ec8:	000b9654 	.word	0x000b9654
   b6ecc:	000b95eb 	.word	0x000b95eb

000b6ed0 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b6ed0:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b6ed2:	2000      	movs	r0, #0
   b6ed4:	f7fd fc6c 	bl	b47b0 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b6ed8:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b6edc:	bd08      	pop	{r3, pc}
	...

000b6ee0 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>:
        scanResultCallbackRef_ = callback ? std::bind(callback, _1, context) : (BleOnScanResultStdFunction)nullptr;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
   b6ee0:	b570      	push	{r4, r5, r6, lr}
   b6ee2:	4604      	mov	r4, r0
        scanResultCallback_ = nullptr;
   b6ee4:	3018      	adds	r0, #24
    int start(BleScanResult* results, size_t resultCount) {
   b6ee6:	460e      	mov	r6, r1
   b6ee8:	4615      	mov	r5, r2
        scanResultCallback_ = nullptr;
   b6eea:	f7ff fb7f 	bl	b65ec <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>
        scanResultCallbackRef_ = nullptr;
   b6eee:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b6ef2:	f7ff fb86 	bl	b6602 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>
        resultsPtr_ = results;
        targetCount_ = resultCount;
   b6ef6:	e9c4 6503 	strd	r6, r5, [r4, #12]
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   b6efa:	2200      	movs	r2, #0
   b6efc:	4621      	mov	r1, r4
   b6efe:	4803      	ldr	r0, [pc, #12]	; (b6f0c <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj+0x2c>)
   b6f00:	f7fd fc6e 	bl	b47e0 <hal_ble_gap_start_scan>
   b6f04:	2800      	cmp	r0, #0
        return foundCount_;
   b6f06:	bfa8      	it	ge
   b6f08:	6960      	ldrge	r0, [r4, #20]
    }
   b6f0a:	bd70      	pop	{r4, r5, r6, pc}
   b6f0c:	000b8681 	.word	0x000b8681

000b6f10 <_ZN8particle13BleScanResultD1Ev>:
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
   b6f10:	b510      	push	{r4, lr}
   b6f12:	4604      	mov	r4, r0
    ::free(ptr);
   b6f14:	6940      	ldr	r0, [r0, #20]
   b6f16:	f7fd fda7 	bl	b4a68 <free>
   b6f1a:	68a0      	ldr	r0, [r4, #8]
   b6f1c:	f7fd fda4 	bl	b4a68 <free>
   b6f20:	4620      	mov	r0, r4
   b6f22:	bd10      	pop	{r4, pc}

000b6f24 <_ZN8particle16BleScanDelegatorC1Ev>:
        capacity_(0) {
   b6f24:	2200      	movs	r2, #0
public:
    BleScanFilter()
            : minRssi_(BLE_RSSI_INVALID),
              maxRssi_(BLE_RSSI_INVALID),
              customData_(nullptr),
              customDataLen_(0) {
   b6f26:	f647 717f 	movw	r1, #32639	; 0x7f7f
   b6f2a:	e9c0 2200 	strd	r2, r2, [r0]
              scanResultCallbackRef_(nullptr) {
   b6f2e:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b6f32:	e9c0 2204 	strd	r2, r2, [r0, #16]
   b6f36:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
   b6f3a:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
   b6f3e:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
   b6f42:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
   b6f46:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
   b6f4a:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
   b6f4e:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
    _Function_base() : _M_manager(nullptr) { }
   b6f52:	6202      	str	r2, [r0, #32]
   b6f54:	6302      	str	r2, [r0, #48]	; 0x30
   b6f56:	f8a0 1068 	strh.w	r1, [r0, #104]	; 0x68
    }
   b6f5a:	4770      	bx	lr

000b6f5c <_ZNK8particle14BleLocalDevice14setScanTimeoutEt>:
    std::function<void(const BleScanResult*)> scanResultCallback_;
    BleOnScanResultStdFunction scanResultCallbackRef_;
    BleScanFilter filter_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
   b6f5c:	b530      	push	{r4, r5, lr}
   b6f5e:	b085      	sub	sp, #20
    hal_ble_scan_params_t scanParams = {};
   b6f60:	2400      	movs	r4, #0
    scanParams.size = sizeof(hal_ble_scan_params_t);
   b6f62:	2310      	movs	r3, #16
int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
   b6f64:	460d      	mov	r5, r1
    scanParams.size = sizeof(hal_ble_scan_params_t);
   b6f66:	f8ad 3002 	strh.w	r3, [sp, #2]
    scanParams.version = BLE_API_VERSION;
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   b6f6a:	4621      	mov	r1, r4
    scanParams.version = BLE_API_VERSION;
   b6f6c:	2303      	movs	r3, #3
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   b6f6e:	4668      	mov	r0, sp
    scanParams.version = BLE_API_VERSION;
   b6f70:	f8ad 3000 	strh.w	r3, [sp]
    hal_ble_scan_params_t scanParams = {};
   b6f74:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b6f78:	9403      	str	r4, [sp, #12]
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   b6f7a:	f7fd fc29 	bl	b47d0 <hal_ble_gap_get_scan_parameters>
    scanParams.timeout = timeout;
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
   b6f7e:	4621      	mov	r1, r4
   b6f80:	4668      	mov	r0, sp
    scanParams.timeout = timeout;
   b6f82:	f8ad 5008 	strh.w	r5, [sp, #8]
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
   b6f86:	f7fd fc1b 	bl	b47c0 <hal_ble_gap_set_scan_parameters>
}
   b6f8a:	b005      	add	sp, #20
   b6f8c:	bd30      	pop	{r4, r5, pc}

000b6f8e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6f8e:	b510      	push	{r4, lr}
   b6f90:	4604      	mov	r4, r0
    ::free(ptr);
   b6f92:	6800      	ldr	r0, [r0, #0]
   b6f94:	f7fd fd68 	bl	b4a68 <free>
}
   b6f98:	4620      	mov	r0, r4
   b6f9a:	bd10      	pop	{r4, pc}

000b6f9c <_ZN8particle16BleScanDelegatorD1Ev>:
    ~BleScanDelegator() = default;
   b6f9c:	b570      	push	{r4, r5, r6, lr}
   b6f9e:	4604      	mov	r4, r0
    ::free(ptr);
   b6fa0:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   b6fa2:	f7fd fd61 	bl	b4a68 <free>
   b6fa6:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b6fa8:	f7fd fd5e 	bl	b4a68 <free>
    }
    ~BleScanFilter() = default;
   b6fac:	f104 0538 	add.w	r5, r4, #56	; 0x38
   b6fb0:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b6fb4:	f7ff ffeb 	bl	b6f8e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
   b6fb8:	4628      	mov	r0, r5
   b6fba:	f7fe fc9f 	bl	b58fc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    class function<_Res(_ArgTypes...)>
   b6fbe:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b6fc2:	f7fd ff7d 	bl	b4ec0 <_ZNSt14_Function_baseD1Ev>
   b6fc6:	f104 0018 	add.w	r0, r4, #24
   b6fca:	f7fd ff79 	bl	b4ec0 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b6fce:	e9d4 5300 	ldrd	r5, r3, [r4]
   b6fd2:	2624      	movs	r6, #36	; 0x24
   b6fd4:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b6fd8:	42ae      	cmp	r6, r5
   b6fda:	d004      	beq.n	b6fe6 <_ZN8particle16BleScanDelegatorD1Ev+0x4a>
            p->~T();
   b6fdc:	4628      	mov	r0, r5
   b6fde:	f7ff ff97 	bl	b6f10 <_ZN8particle13BleScanResultD1Ev>
        for (; p != end; ++p) {
   b6fe2:	3524      	adds	r5, #36	; 0x24
   b6fe4:	e7f8      	b.n	b6fd8 <_ZN8particle16BleScanDelegatorD1Ev+0x3c>
    ::free(ptr);
   b6fe6:	6820      	ldr	r0, [r4, #0]
   b6fe8:	f7fd fd3e 	bl	b4a68 <free>
   b6fec:	4620      	mov	r0, r4
   b6fee:	bd70      	pop	{r4, r5, r6, pc}

000b6ff0 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>:
int BleLocalDevice::scan(BleOnScanResultCallbackRef callback, void* context) const {
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   b6ff0:	b530      	push	{r4, r5, lr}
   b6ff2:	4615      	mov	r5, r2
   b6ff4:	b09f      	sub	sp, #124	; 0x7c
    if (results == nullptr || resultCount == 0) {
   b6ff6:	460c      	mov	r4, r1
   b6ff8:	b179      	cbz	r1, b701a <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x2a>
   b6ffa:	b172      	cbz	r2, b701a <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x2a>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    BleScanDelegator scanner;
   b6ffc:	a801      	add	r0, sp, #4
   b6ffe:	f7ff ff91 	bl	b6f24 <_ZN8particle16BleScanDelegatorC1Ev>
    return scanner.start(results, resultCount);
   b7002:	4621      	mov	r1, r4
   b7004:	462a      	mov	r2, r5
   b7006:	a801      	add	r0, sp, #4
   b7008:	f7ff ff6a 	bl	b6ee0 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>
   b700c:	4604      	mov	r4, r0
    BleScanDelegator scanner;
   b700e:	a801      	add	r0, sp, #4
   b7010:	f7ff ffc4 	bl	b6f9c <_ZN8particle16BleScanDelegatorD1Ev>
}
   b7014:	4620      	mov	r0, r4
   b7016:	b01f      	add	sp, #124	; 0x7c
   b7018:	bd30      	pop	{r4, r5, pc}
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b701a:	4c01      	ldr	r4, [pc, #4]	; (b7020 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x30>)
   b701c:	e7fa      	b.n	b7014 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x24>
   b701e:	bf00      	nop
   b7020:	fffffef2 	.word	0xfffffef2

000b7024 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b7024:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b7026:	1e14      	subs	r4, r2, #0
   b7028:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b702a:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b702c:	db02      	blt.n	b7034 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b702e:	1862      	adds	r2, r4, r1
   b7030:	429a      	cmp	r2, r3
   b7032:	dd00      	ble.n	b7036 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b7034:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b7036:	682a      	ldr	r2, [r5, #0]
   b7038:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b703a:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b703c:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b703e:	1a52      	subs	r2, r2, r1
   b7040:	f001 ff5c 	bl	b8efc <memmove>
    size_ -= n;
   b7044:	686a      	ldr	r2, [r5, #4]
   b7046:	1b12      	subs	r2, r2, r4
   b7048:	606a      	str	r2, [r5, #4]
}
   b704a:	bd38      	pop	{r3, r4, r5, pc}

000b704c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b704c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b704e:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b7050:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b7052:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7054:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b7056:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7058:	f7fd f81b 	bl	b4092 <_Znwj>
   b705c:	b118      	cbz	r0, b7066 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b705e:	682b      	ldr	r3, [r5, #0]
   b7060:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b7062:	686b      	ldr	r3, [r5, #4]
   b7064:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b7066:	4b03      	ldr	r3, [pc, #12]	; (b7074 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b7068:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b706a:	4b03      	ldr	r3, [pc, #12]	; (b7078 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b706c:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b706e:	60a3      	str	r3, [r4, #8]
      }
   b7070:	4620      	mov	r0, r4
   b7072:	bd38      	pop	{r3, r4, r5, pc}
   b7074:	000b6595 	.word	0x000b6595
   b7078:	000b65ad 	.word	0x000b65ad

000b707c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b707c:	680b      	ldr	r3, [r1, #0]
   b707e:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b7080:	b113      	cbz	r3, b7088 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b7082:	685a      	ldr	r2, [r3, #4]
   b7084:	3201      	adds	r2, #1
   b7086:	605a      	str	r2, [r3, #4]
      }
   b7088:	4770      	bx	lr

000b708a <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b708a:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b708c:	f851 3b04 	ldr.w	r3, [r1], #4
   b7090:	4604      	mov	r4, r0
   b7092:	f840 3b04 	str.w	r3, [r0], #4
   b7096:	f7ff fff1 	bl	b707c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b709a:	6823      	ldr	r3, [r4, #0]
   b709c:	b90b      	cbnz	r3, b70a2 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b709e:	f7ff fa6f 	bl	b6580 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b70a2:	4620      	mov	r0, r4
   b70a4:	bd10      	pop	{r4, pc}

000b70a6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b70a6:	b510      	push	{r4, lr}
   b70a8:	f851 3b04 	ldr.w	r3, [r1], #4
   b70ac:	4604      	mov	r4, r0
   b70ae:	f840 3b04 	str.w	r3, [r0], #4
   b70b2:	f7ff ffe3 	bl	b707c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b70b6:	4620      	mov	r0, r4
   b70b8:	bd10      	pop	{r4, pc}

000b70ba <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b70ba:	b510      	push	{r4, lr}
   b70bc:	f851 3b04 	ldr.w	r3, [r1], #4
   b70c0:	4604      	mov	r4, r0
   b70c2:	f840 3b04 	str.w	r3, [r0], #4
   b70c6:	f7ff ffd9 	bl	b707c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b70ca:	4620      	mov	r0, r4
   b70cc:	bd10      	pop	{r4, pc}

000b70ce <_ZN8particle13BlePeerDeviceD1Ev>:
BlePeerDevice::~BlePeerDevice() {
   b70ce:	b510      	push	{r4, lr}
   b70d0:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b70d2:	3004      	adds	r0, #4
   b70d4:	f7fd feec 	bl	b4eb0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b70d8:	4620      	mov	r0, r4
   b70da:	bd10      	pop	{r4, pc}

000b70dc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b70dc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b70de:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b70e2:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b70e4:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b70e8:	42ae      	cmp	r6, r5
   b70ea:	d004      	beq.n	b70f6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b70ec:	1d28      	adds	r0, r5, #4
   b70ee:	f7fd fedf 	bl	b4eb0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b70f2:	3508      	adds	r5, #8
   b70f4:	e7f8      	b.n	b70e8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b70f6:	6820      	ldr	r0, [r4, #0]
   b70f8:	f7fd fcb6 	bl	b4a68 <free>
}
   b70fc:	4620      	mov	r0, r4
   b70fe:	bd70      	pop	{r4, r5, r6, pc}

000b7100 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7100:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b7102:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7106:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b7108:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b710c:	42ae      	cmp	r6, r5
   b710e:	d004      	beq.n	b711a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b7110:	1d28      	adds	r0, r5, #4
   b7112:	f7fd fecd 	bl	b4eb0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7116:	3508      	adds	r5, #8
   b7118:	e7f8      	b.n	b710c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b711a:	6820      	ldr	r0, [r4, #0]
   b711c:	f7fd fca4 	bl	b4a68 <free>
}
   b7120:	4620      	mov	r0, r4
   b7122:	bd70      	pop	{r4, r5, r6, pc}

000b7124 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b7124:	b510      	push	{r4, lr}
   b7126:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b7128:	3024      	adds	r0, #36	; 0x24
   b712a:	f7ff ffe9 	bl	b7100 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b712e:	f104 0018 	add.w	r0, r4, #24
   b7132:	f7ff ffd3 	bl	b70dc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b7136:	bd10      	pop	{r4, pc}

000b7138 <__tcf_0>:
    static BleLocalDevice instance;
   b7138:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b713a:	4b17      	ldr	r3, [pc, #92]	; (b7198 <__tcf_0+0x60>)
   b713c:	681c      	ldr	r4, [r3, #0]
   b713e:	b354      	cbz	r4, b7196 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b7140:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b7144:	f7fd febc 	bl	b4ec0 <_ZNSt14_Function_baseD1Ev>
   b7148:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b714c:	f7fd feb8 	bl	b4ec0 <_ZNSt14_Function_baseD1Ev>
   b7150:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b7154:	f7fd feb4 	bl	b4ec0 <_ZNSt14_Function_baseD1Ev>
   b7158:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b715c:	f7fd feb0 	bl	b4ec0 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b7160:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b7164:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b7168:	42ae      	cmp	r6, r5
   b716a:	d004      	beq.n	b7176 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b716c:	1d28      	adds	r0, r5, #4
   b716e:	f7fd fe9f 	bl	b4eb0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7172:	3508      	adds	r5, #8
   b7174:	e7f8      	b.n	b7168 <__tcf_0+0x30>
    ::free(ptr);
   b7176:	69a0      	ldr	r0, [r4, #24]
   b7178:	f7fd fc76 	bl	b4a68 <free>
    ~BleLocalDeviceImpl() = default;
   b717c:	f104 000c 	add.w	r0, r4, #12
   b7180:	f7ff ffbe 	bl	b7100 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b7184:	4620      	mov	r0, r4
   b7186:	f7ff ffa9 	bl	b70dc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b718a:	4620      	mov	r0, r4
   b718c:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b718e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b7192:	f7fc bf82 	b.w	b409a <_ZdlPvj>
   b7196:	bd70      	pop	{r4, r5, r6, pc}
   b7198:	2003e724 	.word	0x2003e724

000b719c <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b719c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b719e:	b510      	push	{r4, lr}
      if (_M_empty())
   b71a0:	b90a      	cbnz	r2, b71a6 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b71a2:	f001 fd69 	bl	b8c78 <_ZSt25__throw_bad_function_callv>
    }
   b71a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b71aa:	68c3      	ldr	r3, [r0, #12]
   b71ac:	4718      	bx	r3

000b71ae <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b71ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        capacity_(0) {
   b71b2:	2300      	movs	r3, #0
   b71b4:	e9c0 3300 	strd	r3, r3, [r0]
   b71b8:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b71ba:	f8d1 8004 	ldr.w	r8, [r1, #4]
   b71be:	4598      	cmp	r8, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b71c0:	4605      	mov	r5, r0
   b71c2:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b71c4:	dd4a      	ble.n	b725c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
    return ::malloc(size);
   b71c6:	ea4f 1008 	mov.w	r0, r8, lsl #4
   b71ca:	f7fd fc45 	bl	b4a58 <malloc>
            if (!d) {
   b71ce:	4606      	mov	r6, r0
   b71d0:	2800      	cmp	r0, #0
   b71d2:	d043      	beq.n	b725c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
            move(d, data_, data_ + size_);
   b71d4:	e9d5 4100 	ldrd	r4, r1, [r5]
        if (dest > p && dest < end) {
   b71d8:	42a0      	cmp	r0, r4
            move(d, data_, data_ + size_);
   b71da:	eb04 1a01 	add.w	sl, r4, r1, lsl #4
        if (dest > p && dest < end) {
   b71de:	d916      	bls.n	b720e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x60>
   b71e0:	4550      	cmp	r0, sl
   b71e2:	d215      	bcs.n	b7210 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x62>
            --end;
   b71e4:	f1aa 0a10 	sub.w	sl, sl, #16
            dest += end - p - 1;
   b71e8:	f1a4 0910 	sub.w	r9, r4, #16
   b71ec:	ebaa 0404 	sub.w	r4, sl, r4
   b71f0:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   b71f2:	45d1      	cmp	r9, sl
   b71f4:	d01d      	beq.n	b7232 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*end));
   b71f6:	b11c      	cbz	r4, b7200 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x52>
   b71f8:	4651      	mov	r1, sl
   b71fa:	4620      	mov	r0, r4
   b71fc:	f001 fc7c 	bl	b8af8 <_ZN6StringC1EOS_>
                end->~T();
   b7200:	4650      	mov	r0, sl
   b7202:	f001 fbfd 	bl	b8a00 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b7206:	f1aa 0a10 	sub.w	sl, sl, #16
   b720a:	3c10      	subs	r4, #16
   b720c:	e7f1      	b.n	b71f2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x44>
        } else if (dest != p) {
   b720e:	d010      	beq.n	b7232 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
   b7210:	46b1      	mov	r9, r6
            for (; p != end; ++p, ++dest) {
   b7212:	45a2      	cmp	sl, r4
   b7214:	d00d      	beq.n	b7232 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*p));
   b7216:	f1b9 0f00 	cmp.w	r9, #0
   b721a:	d003      	beq.n	b7224 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x76>
   b721c:	4621      	mov	r1, r4
   b721e:	4648      	mov	r0, r9
   b7220:	f001 fc6a 	bl	b8af8 <_ZN6StringC1EOS_>
                p->~T();
   b7224:	4620      	mov	r0, r4
   b7226:	f001 fbeb 	bl	b8a00 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b722a:	3410      	adds	r4, #16
   b722c:	f109 0910 	add.w	r9, r9, #16
   b7230:	e7ef      	b.n	b7212 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x64>
    ::free(ptr);
   b7232:	6828      	ldr	r0, [r5, #0]
   b7234:	f7fd fc18 	bl	b4a68 <free>
        capacity_ = n;
   b7238:	f8c5 8008 	str.w	r8, [r5, #8]
        data_ = d;
   b723c:	602e      	str	r6, [r5, #0]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b723e:	e9d7 4300 	ldrd	r4, r3, [r7]
   b7242:	eb04 1803 	add.w	r8, r4, r3, lsl #4
        for (; it != end; ++it, ++dest) {
   b7246:	45a0      	cmp	r8, r4
   b7248:	d006      	beq.n	b7258 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xaa>
            new(dest) T(*it);
   b724a:	4621      	mov	r1, r4
   b724c:	4630      	mov	r0, r6
   b724e:	f001 fc6d 	bl	b8b2c <_ZN6StringC1ERKS_>
        for (; it != end; ++it, ++dest) {
   b7252:	3410      	adds	r4, #16
   b7254:	3610      	adds	r6, #16
   b7256:	e7f6      	b.n	b7246 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x98>
        size_ = vector.size_;
   b7258:	687b      	ldr	r3, [r7, #4]
   b725a:	606b      	str	r3, [r5, #4]
}
   b725c:	4628      	mov	r0, r5
   b725e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b7262 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>:
    bool filterByDeviceName(const BleScanResult& result) {
   b7262:	b530      	push	{r4, r5, lr}
   b7264:	b08d      	sub	sp, #52	; 0x34
   b7266:	460c      	mov	r4, r1
        auto filterDeviceNames = filter_.deviceNames();
   b7268:	f100 0138 	add.w	r1, r0, #56	; 0x38
   b726c:	a801      	add	r0, sp, #4
   b726e:	f7ff ff9e 	bl	b71ae <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterDeviceNames.size() > 0) {
   b7272:	9b02      	ldr	r3, [sp, #8]
   b7274:	2b00      	cmp	r3, #0
   b7276:	dd2f      	ble.n	b72d8 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x76>
            String srName = result.scanResponse().deviceName();
   b7278:	f104 0114 	add.w	r1, r4, #20
   b727c:	a804      	add	r0, sp, #16
   b727e:	f7ff fc4d 	bl	b6b1c <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            String advName = result.advertisingData().deviceName();
   b7282:	f104 0108 	add.w	r1, r4, #8
   b7286:	a808      	add	r0, sp, #32
   b7288:	f7ff fc48 	bl	b6b1c <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            if (srName.length() == 0 && advName.length() == 0) {
   b728c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b728e:	9b06      	ldr	r3, [sp, #24]
   b7290:	4313      	orrs	r3, r2
   b7292:	d01f      	beq.n	b72d4 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
    return data_ + size_;
   b7294:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
   b7298:	eb04 1505 	add.w	r5, r4, r5, lsl #4
            for (const auto& name : filterDeviceNames) {
   b729c:	42ac      	cmp	r4, r5
   b729e:	d019      	beq.n	b72d4 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   b72a0:	a904      	add	r1, sp, #16
   b72a2:	4620      	mov	r0, r4
   b72a4:	f001 fc98 	bl	b8bd8 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   b72a8:	b160      	cbz	r0, b72c4 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x62>
                    return true;
   b72aa:	2401      	movs	r4, #1
            String advName = result.advertisingData().deviceName();
   b72ac:	a808      	add	r0, sp, #32
   b72ae:	f001 fba7 	bl	b8a00 <_ZN6StringD1Ev>
            String srName = result.scanResponse().deviceName();
   b72b2:	a804      	add	r0, sp, #16
   b72b4:	f001 fba4 	bl	b8a00 <_ZN6StringD1Ev>
        auto filterDeviceNames = filter_.deviceNames();
   b72b8:	a801      	add	r0, sp, #4
   b72ba:	f7fe fb1f 	bl	b58fc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
   b72be:	4620      	mov	r0, r4
   b72c0:	b00d      	add	sp, #52	; 0x34
   b72c2:	bd30      	pop	{r4, r5, pc}
   b72c4:	4620      	mov	r0, r4
   b72c6:	a908      	add	r1, sp, #32
   b72c8:	f001 fc86 	bl	b8bd8 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   b72cc:	3410      	adds	r4, #16
   b72ce:	2800      	cmp	r0, #0
   b72d0:	d0e4      	beq.n	b729c <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x3a>
   b72d2:	e7ea      	b.n	b72aa <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x48>
                return false;
   b72d4:	2400      	movs	r4, #0
   b72d6:	e7e9      	b.n	b72ac <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x4a>
        return true;
   b72d8:	2401      	movs	r4, #1
   b72da:	e7ed      	b.n	b72b8 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x56>

000b72dc <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b72dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        capacity_(0) {
   b72de:	2300      	movs	r3, #0
   b72e0:	e9c0 3300 	strd	r3, r3, [r0]
   b72e4:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b72e6:	684f      	ldr	r7, [r1, #4]
   b72e8:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b72ea:	4605      	mov	r5, r0
   b72ec:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b72ee:	dd3e      	ble.n	b736e <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
    return ::malloc(size);
   b72f0:	00f8      	lsls	r0, r7, #3
   b72f2:	f7fd fbb1 	bl	b4a58 <malloc>
            if (!d) {
   b72f6:	4604      	mov	r4, r0
   b72f8:	b3c8      	cbz	r0, b736e <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
            move(d, data_, data_ + size_);
   b72fa:	e9d5 0300 	ldrd	r0, r3, [r5]
        if (dest > p && dest < end) {
   b72fe:	4284      	cmp	r4, r0
            move(d, data_, data_ + size_);
   b7300:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
        if (dest > p && dest < end) {
   b7304:	d910      	bls.n	b7328 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   b7306:	429c      	cmp	r4, r3
   b7308:	d20f      	bcs.n	b732a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4e>
            --end;
   b730a:	3b08      	subs	r3, #8
            dest += end - p - 1;
   b730c:	1a1a      	subs	r2, r3, r0
   b730e:	f1a0 0c08 	sub.w	ip, r0, #8
   b7312:	4422      	add	r2, r4
            for (; end != p; --end, --dest) {
   b7314:	459c      	cmp	ip, r3
   b7316:	d018      	beq.n	b734a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*end));
   b7318:	b11a      	cbz	r2, b7322 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x46>
    address_ = addr.address_;
   b731a:	6819      	ldr	r1, [r3, #0]
   b731c:	6011      	str	r1, [r2, #0]
   b731e:	6859      	ldr	r1, [r3, #4]
   b7320:	6051      	str	r1, [r2, #4]
            for (; end != p; --end, --dest) {
   b7322:	3b08      	subs	r3, #8
   b7324:	3a08      	subs	r2, #8
   b7326:	e7f5      	b.n	b7314 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x38>
        } else if (dest != p) {
   b7328:	d00f      	beq.n	b734a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
   b732a:	4601      	mov	r1, r0
   b732c:	4622      	mov	r2, r4
            for (; p != end; ++p, ++dest) {
   b732e:	428b      	cmp	r3, r1
   b7330:	d00b      	beq.n	b734a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*p));
   b7332:	b13a      	cbz	r2, b7344 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x68>
   b7334:	f8d1 c000 	ldr.w	ip, [r1]
   b7338:	f8c2 c000 	str.w	ip, [r2]
   b733c:	f8d1 c004 	ldr.w	ip, [r1, #4]
   b7340:	f8c2 c004 	str.w	ip, [r2, #4]
            for (; p != end; ++p, ++dest) {
   b7344:	3108      	adds	r1, #8
   b7346:	3208      	adds	r2, #8
   b7348:	e7f1      	b.n	b732e <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x52>
    ::free(ptr);
   b734a:	f7fd fb8d 	bl	b4a68 <free>
        data_ = d;
   b734e:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b7350:	60af      	str	r7, [r5, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b7352:	e9d6 3100 	ldrd	r3, r1, [r6]
   b7356:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
        for (; it != end; ++it, ++dest) {
   b735a:	4298      	cmp	r0, r3
   b735c:	d006      	beq.n	b736c <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x90>
   b735e:	681a      	ldr	r2, [r3, #0]
   b7360:	6022      	str	r2, [r4, #0]
   b7362:	685a      	ldr	r2, [r3, #4]
   b7364:	6062      	str	r2, [r4, #4]
   b7366:	3308      	adds	r3, #8
   b7368:	3408      	adds	r4, #8
   b736a:	e7f6      	b.n	b735a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x7e>
        size_ = vector.size_;
   b736c:	6069      	str	r1, [r5, #4]
}
   b736e:	4628      	mov	r0, r5
   b7370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7372 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b7372:	b570      	push	{r4, r5, r6, lr}
   b7374:	4604      	mov	r4, r0
        capacity_(0) {
   b7376:	2000      	movs	r0, #0
   b7378:	e9c4 0000 	strd	r0, r0, [r4]
   b737c:	60a0      	str	r0, [r4, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b737e:	684e      	ldr	r6, [r1, #4]
   b7380:	4286      	cmp	r6, r0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b7382:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b7384:	dd12      	ble.n	b73ac <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
    return ::realloc(ptr, size);
   b7386:	0071      	lsls	r1, r6, #1
   b7388:	f7fd fb76 	bl	b4a78 <realloc>
            if (!d) {
   b738c:	b170      	cbz	r0, b73ac <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
        data_ = d;
   b738e:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b7390:	60a6      	str	r6, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b7392:	e9d5 3200 	ldrd	r3, r2, [r5]
   b7396:	eb03 0242 	add.w	r2, r3, r2, lsl #1
        for (; it != end; ++it, ++dest) {
   b739a:	429a      	cmp	r2, r3
   b739c:	d004      	beq.n	b73a8 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x36>
            new(dest) T(*it);
   b739e:	f833 1b02 	ldrh.w	r1, [r3], #2
   b73a2:	f820 1b02 	strh.w	r1, [r0], #2
        for (; it != end; ++it, ++dest) {
   b73a6:	e7f8      	b.n	b739a <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x28>
        size_ = vector.size_;
   b73a8:	686b      	ldr	r3, [r5, #4]
   b73aa:	6063      	str	r3, [r4, #4]
}
   b73ac:	4620      	mov	r0, r4
   b73ae:	bd70      	pop	{r4, r5, r6, pc}

000b73b0 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>:
            func_(std::move(guard.func_)),
            dismissed_(guard.dismissed_) {
        guard.dismissed_ = true;
    }

    ~NamedScopeGuard() {
   b73b0:	b510      	push	{r4, lr}
        if (!dismissed_) {
   b73b2:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   b73b4:	4604      	mov	r4, r0
        if (!dismissed_) {
   b73b6:	b923      	cbnz	r3, b73c2 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
                SCOPE_GUARD({
   b73b8:	6803      	ldr	r3, [r0, #0]
   b73ba:	6818      	ldr	r0, [r3, #0]
   b73bc:	b108      	cbz	r0, b73c2 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
   b73be:	f7fd fb53 	bl	b4a68 <free>
            func_();
        }
    }
   b73c2:	4620      	mov	r0, r4
   b73c4:	bd10      	pop	{r4, pc}

000b73c6 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>:
    ~NamedScopeGuard() {
   b73c6:	b510      	push	{r4, lr}
        if (!dismissed_) {
   b73c8:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   b73ca:	4604      	mov	r4, r0
        if (!dismissed_) {
   b73cc:	b923      	cbnz	r3, b73d8 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
                SCOPE_GUARD({
   b73ce:	6803      	ldr	r3, [r0, #0]
   b73d0:	6818      	ldr	r0, [r3, #0]
   b73d2:	b108      	cbz	r0, b73d8 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
   b73d4:	f7fd fb48 	bl	b4a68 <free>
    }
   b73d8:	4620      	mov	r0, r4
   b73da:	bd10      	pop	{r4, pc}

000b73dc <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>:
    bool filterByCustomData(const BleScanResult& result) {
   b73dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        customDataLen_ = len;
        return *this;
    }
    const uint8_t* customData(size_t* len) const {
        *len = customDataLen_;
        return customData_;
   b73e0:	f8d0 806c 	ldr.w	r8, [r0, #108]	; 0x6c
   b73e4:	b08f      	sub	sp, #60	; 0x3c
   b73e6:	460f      	mov	r7, r1
        if (filterCustomData != nullptr && filterCustomDatalen > 0) {
   b73e8:	f1b8 0f00 	cmp.w	r8, #0
   b73ec:	d072      	beq.n	b74d4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        *len = customDataLen_;
   b73ee:	6f05      	ldr	r5, [r0, #112]	; 0x70
   b73f0:	2d00      	cmp	r5, #0
   b73f2:	d06f      	beq.n	b74d4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        return scanResponse_;
   b73f4:	f101 0914 	add.w	r9, r1, #20
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   b73f8:	231f      	movs	r3, #31
   b73fa:	2200      	movs	r2, #0
   b73fc:	21ff      	movs	r1, #255	; 0xff
   b73fe:	4648      	mov	r0, r9
   b7400:	f7ff fb5a 	bl	b6ab8 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
        return advertisingData_;
   b7404:	3708      	adds	r7, #8
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b7406:	23ff      	movs	r3, #255	; 0xff
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   b7408:	4604      	mov	r4, r0
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b740a:	2200      	movs	r2, #0
   b740c:	4619      	mov	r1, r3
   b740e:	4638      	mov	r0, r7
   b7410:	f7ff fb52 	bl	b6ab8 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   b7414:	42ac      	cmp	r4, r5
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b7416:	4606      	mov	r6, r0
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   b7418:	d006      	beq.n	b7428 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x4c>
   b741a:	42ae      	cmp	r6, r5
   b741c:	d030      	beq.n	b7480 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa4>
                return false;
   b741e:	2400      	movs	r4, #0
    }
   b7420:	4620      	mov	r0, r4
   b7422:	b00f      	add	sp, #60	; 0x3c
   b7424:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                uint8_t* buf = (uint8_t*)malloc(srLen);
   b7428:	4620      	mov	r0, r4
   b742a:	f7fd fb15 	bl	b4a58 <malloc>
            dismissed_(false) {
   b742e:	ab03      	add	r3, sp, #12
   b7430:	9304      	str	r3, [sp, #16]
   b7432:	2300      	movs	r3, #0
   b7434:	4604      	mov	r4, r0
   b7436:	9003      	str	r0, [sp, #12]
   b7438:	f88d 3014 	strb.w	r3, [sp, #20]
                if (!buf) {
   b743c:	b970      	cbnz	r0, b745c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x80>
                    LOG(ERROR, "Failed to allocate memory!");
   b743e:	2320      	movs	r3, #32
   b7440:	e9cd 3006 	strd	r3, r0, [sp, #24]
   b7444:	4b24      	ldr	r3, [pc, #144]	; (b74d8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   b7446:	9300      	str	r3, [sp, #0]
   b7448:	4924      	ldr	r1, [pc, #144]	; (b74dc <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   b744a:	4603      	mov	r3, r0
   b744c:	aa06      	add	r2, sp, #24
   b744e:	2032      	movs	r0, #50	; 0x32
   b7450:	f7fd fa4e 	bl	b48f0 <log_message>
                    return false;
   b7454:	a804      	add	r0, sp, #16
   b7456:	f7ff ffab 	bl	b73b0 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
   b745a:	e7e1      	b.n	b7420 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, srLen);
   b745c:	4602      	mov	r2, r0
   b745e:	21ff      	movs	r1, #255	; 0xff
   b7460:	462b      	mov	r3, r5
   b7462:	4648      	mov	r0, r9
   b7464:	f7ff fb28 	bl	b6ab8 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, srLen)) {
   b7468:	9803      	ldr	r0, [sp, #12]
   b746a:	462a      	mov	r2, r5
   b746c:	4641      	mov	r1, r8
   b746e:	f001 fd27 	bl	b8ec0 <memcmp>
   b7472:	b118      	cbz	r0, b747c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa0>
                SCOPE_GUARD({
   b7474:	a804      	add	r0, sp, #16
   b7476:	f7ff ff9b 	bl	b73b0 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
            if (advLen == filterCustomDatalen) {
   b747a:	e7ce      	b.n	b741a <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x3e>
                    return true;
   b747c:	2401      	movs	r4, #1
   b747e:	e7e9      	b.n	b7454 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x78>
                uint8_t* buf = (uint8_t*)malloc(advLen);
   b7480:	4628      	mov	r0, r5
   b7482:	f7fd fae9 	bl	b4a58 <malloc>
   b7486:	2400      	movs	r4, #0
   b7488:	ab03      	add	r3, sp, #12
   b748a:	4606      	mov	r6, r0
   b748c:	9003      	str	r0, [sp, #12]
   b748e:	9304      	str	r3, [sp, #16]
   b7490:	f88d 4014 	strb.w	r4, [sp, #20]
                if (!buf) {
   b7494:	b978      	cbnz	r0, b74b6 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xda>
                    LOG(ERROR, "Failed to allocate memory!");
   b7496:	2320      	movs	r3, #32
   b7498:	e9cd 3006 	strd	r3, r0, [sp, #24]
   b749c:	4b0e      	ldr	r3, [pc, #56]	; (b74d8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   b749e:	9300      	str	r3, [sp, #0]
   b74a0:	490e      	ldr	r1, [pc, #56]	; (b74dc <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   b74a2:	4603      	mov	r3, r0
   b74a4:	aa06      	add	r2, sp, #24
   b74a6:	2032      	movs	r0, #50	; 0x32
   b74a8:	f7fd fa22 	bl	b48f0 <log_message>
                    return false;
   b74ac:	4634      	mov	r4, r6
   b74ae:	a804      	add	r0, sp, #16
   b74b0:	f7ff ff89 	bl	b73c6 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>
   b74b4:	e7b4      	b.n	b7420 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, advLen);
   b74b6:	4602      	mov	r2, r0
   b74b8:	21ff      	movs	r1, #255	; 0xff
   b74ba:	462b      	mov	r3, r5
   b74bc:	4638      	mov	r0, r7
   b74be:	f7ff fafb 	bl	b6ab8 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, advLen)) {
   b74c2:	9803      	ldr	r0, [sp, #12]
   b74c4:	462a      	mov	r2, r5
   b74c6:	4641      	mov	r1, r8
   b74c8:	f001 fcfa 	bl	b8ec0 <memcmp>
   b74cc:	2800      	cmp	r0, #0
   b74ce:	d1ee      	bne.n	b74ae <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
                    return true;
   b74d0:	2401      	movs	r4, #1
   b74d2:	e7ec      	b.n	b74ae <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
        return true;
   b74d4:	2401      	movs	r4, #1
   b74d6:	e7a3      	b.n	b7420 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
   b74d8:	000b966c 	.word	0x000b966c
   b74dc:	000b95eb 	.word	0x000b95eb

000b74e0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b74e0:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b74e2:	6883      	ldr	r3, [r0, #8]
   b74e4:	428b      	cmp	r3, r1
   b74e6:	da02      	bge.n	b74ee <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b74e8:	f7fd fde4 	bl	b50b4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b74ec:	bd08      	pop	{r3, pc}
    return true;
   b74ee:	2001      	movs	r0, #1
   b74f0:	e7fc      	b.n	b74ec <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b74f2 <_ZN8particle13BleScanResultC1EOS0_>:
class BleScanResult {
   b74f2:	b538      	push	{r3, r4, r5, lr}
    address_ = addr.address_;
   b74f4:	680b      	ldr	r3, [r1, #0]
   b74f6:	6003      	str	r3, [r0, #0]
   b74f8:	684b      	ldr	r3, [r1, #4]
   b74fa:	6043      	str	r3, [r0, #4]
   b74fc:	4604      	mov	r4, r0
   b74fe:	460d      	mov	r5, r1
class BleAdvertisingData {
   b7500:	3008      	adds	r0, #8
   b7502:	3108      	adds	r1, #8
   b7504:	f7fd fde6 	bl	b50d4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   b7508:	f105 0114 	add.w	r1, r5, #20
   b750c:	f104 0014 	add.w	r0, r4, #20
   b7510:	f7fd fde0 	bl	b50d4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   b7514:	f895 3020 	ldrb.w	r3, [r5, #32]
   b7518:	f884 3020 	strb.w	r3, [r4, #32]
   b751c:	4620      	mov	r0, r4
   b751e:	bd38      	pop	{r3, r4, r5, pc}

000b7520 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>:
class BleAdvertisingData {
   b7520:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b7522:	4604      	mov	r4, r0
   b7524:	a801      	add	r0, sp, #4
   b7526:	f7fd fdd5 	bl	b50d4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   b752a:	9b01      	ldr	r3, [sp, #4]
   b752c:	9a02      	ldr	r2, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b752e:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b7530:	6023      	str	r3, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7532:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b7534:	6062      	str	r2, [r4, #4]
   b7536:	9a03      	ldr	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7538:	9302      	str	r3, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b753a:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   b753c:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b753e:	9001      	str	r0, [sp, #4]
   b7540:	9303      	str	r3, [sp, #12]
    ::free(ptr);
   b7542:	f7fd fa91 	bl	b4a68 <free>
   b7546:	b004      	add	sp, #16
   b7548:	bd10      	pop	{r4, pc}

000b754a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b754a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b754e:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7550:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b7552:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7554:	4419      	add	r1, r3
   b7556:	6883      	ldr	r3, [r0, #8]
   b7558:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b755a:	4604      	mov	r4, r0
   b755c:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b755e:	dc12      	bgt.n	b7586 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b7560:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7562:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7564:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7566:	1bd2      	subs	r2, r2, r7
   b7568:	4631      	mov	r1, r6
   b756a:	1970      	adds	r0, r6, r5
   b756c:	f001 fcc6 	bl	b8efc <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b7570:	462a      	mov	r2, r5
   b7572:	4641      	mov	r1, r8
   b7574:	4630      	mov	r0, r6
   b7576:	f001 fcb3 	bl	b8ee0 <memcpy>
    size_ += n;
   b757a:	6863      	ldr	r3, [r4, #4]
   b757c:	442b      	add	r3, r5
   b757e:	6063      	str	r3, [r4, #4]
    return true;
   b7580:	2001      	movs	r0, #1
}
   b7582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7586:	f7fd fd95 	bl	b50b4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b758a:	2800      	cmp	r0, #0
   b758c:	d1e8      	bne.n	b7560 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b758e:	e7f8      	b.n	b7582 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b7590 <_ZN8particle18BleAdvertisingData3setEPKhj>:
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   b7590:	4613      	mov	r3, r2
    if (buf == nullptr || len == 0) {
   b7592:	460a      	mov	r2, r1
   b7594:	2100      	movs	r1, #0
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   b7596:	b510      	push	{r4, lr}
   b7598:	4604      	mov	r4, r0
    size_ = 0;
   b759a:	6041      	str	r1, [r0, #4]
    if (buf == nullptr || len == 0) {
   b759c:	b102      	cbz	r2, b75a0 <_ZN8particle18BleAdvertisingData3setEPKhj+0x10>
   b759e:	b90b      	cbnz	r3, b75a4 <_ZN8particle18BleAdvertisingData3setEPKhj+0x14>
        return selfData_.size();
   b75a0:	2000      	movs	r0, #0
}
   b75a2:	bd10      	pop	{r4, pc}
    return insert(size_, values, n);
   b75a4:	2bff      	cmp	r3, #255	; 0xff
   b75a6:	bf28      	it	cs
   b75a8:	23ff      	movcs	r3, #255	; 0xff
   b75aa:	f7ff ffce 	bl	b754a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
    CHECK_TRUE(selfData_.append(buf, len), 0);
   b75ae:	2800      	cmp	r0, #0
   b75b0:	d0f7      	beq.n	b75a2 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>
    return selfData_.size();
   b75b2:	6860      	ldr	r0, [r4, #4]
   b75b4:	e7f5      	b.n	b75a2 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>

000b75b6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b75b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b75b8:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b75ba:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b75be:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b75c0:	4604      	mov	r4, r0
   b75c2:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b75c4:	da0b      	bge.n	b75de <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b75c6:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b75c8:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b75ca:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b75cc:	1b52      	subs	r2, r2, r5
   b75ce:	1c48      	adds	r0, r1, #1
   b75d0:	f001 fc94 	bl	b8efc <memmove>
    new(p) T(std::move(value));
   b75d4:	557e      	strb	r6, [r7, r5]
    ++size_;
   b75d6:	6863      	ldr	r3, [r4, #4]
   b75d8:	3301      	adds	r3, #1
   b75da:	6063      	str	r3, [r4, #4]
}
   b75dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b75de:	3101      	adds	r1, #1
   b75e0:	f7fd fd68 	bl	b50b4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b75e4:	2800      	cmp	r0, #0
   b75e6:	d1ee      	bne.n	b75c6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b75e8:	e7f8      	b.n	b75dc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b75ea <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b75ea:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b75ec:	6841      	ldr	r1, [r0, #4]
   b75ee:	f7ff bfe2 	b.w	b75b6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b75f2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b75f2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b75f6:	4604      	mov	r4, r0
   b75f8:	461d      	mov	r5, r3
   b75fa:	460f      	mov	r7, r1
   b75fc:	ab01      	add	r3, sp, #4
   b75fe:	4690      	mov	r8, r2
   b7600:	460a      	mov	r2, r1
   b7602:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7606:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b760a:	f7fe ffa3 	bl	b6554 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b760e:	1cae      	adds	r6, r5, #2
   b7610:	6863      	ldr	r3, [r4, #4]
   b7612:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b7614:	f1b9 0f00 	cmp.w	r9, #0
   b7618:	d126      	bne.n	b7668 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b761a:	b328      	cbz	r0, b7668 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b761c:	4433      	add	r3, r6
   b761e:	1a1b      	subs	r3, r3, r0
   b7620:	2bff      	cmp	r3, #255	; 0xff
   b7622:	d809      	bhi.n	b7638 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b7624:	9901      	ldr	r1, [sp, #4]
   b7626:	4620      	mov	r0, r4
   b7628:	f7ff fcfc 	bl	b7024 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b762c:	6861      	ldr	r1, [r4, #4]
   b762e:	4620      	mov	r0, r4
   b7630:	4431      	add	r1, r6
   b7632:	f7ff ff55 	bl	b74e0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b7636:	b918      	cbnz	r0, b7640 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b7638:	6860      	ldr	r0, [r4, #4]
}
   b763a:	b003      	add	sp, #12
   b763c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b7640:	1c6a      	adds	r2, r5, #1
   b7642:	9901      	ldr	r1, [sp, #4]
   b7644:	b2d2      	uxtb	r2, r2
   b7646:	4620      	mov	r0, r4
   b7648:	f7ff ffb5 	bl	b75b6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b764c:	9901      	ldr	r1, [sp, #4]
   b764e:	463a      	mov	r2, r7
   b7650:	3101      	adds	r1, #1
   b7652:	4620      	mov	r0, r4
   b7654:	f7ff ffaf 	bl	b75b6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b7658:	9901      	ldr	r1, [sp, #4]
   b765a:	462b      	mov	r3, r5
   b765c:	4642      	mov	r2, r8
   b765e:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b7660:	4620      	mov	r0, r4
   b7662:	f7ff ff72 	bl	b754a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b7666:	e7e7      	b.n	b7638 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b7668:	18f1      	adds	r1, r6, r3
   b766a:	29ff      	cmp	r1, #255	; 0xff
   b766c:	d8e4      	bhi.n	b7638 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b766e:	4620      	mov	r0, r4
   b7670:	f7ff ff36 	bl	b74e0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b7674:	2800      	cmp	r0, #0
   b7676:	d0df      	beq.n	b7638 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b7678:	1c69      	adds	r1, r5, #1
   b767a:	b2c9      	uxtb	r1, r1
   b767c:	4620      	mov	r0, r4
   b767e:	f7ff ffb4 	bl	b75ea <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b7682:	4639      	mov	r1, r7
   b7684:	4620      	mov	r0, r4
   b7686:	f7ff ffb0 	bl	b75ea <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b768a:	6861      	ldr	r1, [r4, #4]
   b768c:	462b      	mov	r3, r5
   b768e:	4642      	mov	r2, r8
   b7690:	e7e6      	b.n	b7660 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b7692 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b7692:	b430      	push	{r4, r5}
   b7694:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b7698:	b11a      	cbz	r2, b76a2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b769a:	9502      	str	r5, [sp, #8]
}
   b769c:	bc30      	pop	{r4, r5}
   b769e:	f7ff bfa8 	b.w	b75f2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b76a2:	6840      	ldr	r0, [r0, #4]
}
   b76a4:	bc30      	pop	{r4, r5}
   b76a6:	4770      	bx	lr

000b76a8 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b76a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b76aa:	2300      	movs	r3, #0
   b76ac:	e9c0 3300 	strd	r3, r3, [r0]
   b76b0:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b76b2:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b76b4:	9300      	str	r3, [sp, #0]
   b76b6:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b76b8:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b76bc:	4619      	mov	r1, r3
   b76be:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b76c2:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b76c4:	f7ff ffe5 	bl	b7692 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b76c8:	4620      	mov	r0, r4
   b76ca:	b004      	add	sp, #16
   b76cc:	bd10      	pop	{r4, pc}

000b76ce <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b76ce:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b76d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b76d2:	4604      	mov	r4, r0
   b76d4:	460d      	mov	r5, r1
   b76d6:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b76d8:	d914      	bls.n	b7704 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b76da:	4290      	cmp	r0, r2
   b76dc:	d213      	bcs.n	b7706 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b76de:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b76e2:	1a75      	subs	r5, r6, r1
   b76e4:	f1a1 0708 	sub.w	r7, r1, #8
   b76e8:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b76ea:	42b7      	cmp	r7, r6
   b76ec:	d018      	beq.n	b7720 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b76ee:	b11c      	cbz	r4, b76f8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b76f0:	4631      	mov	r1, r6
   b76f2:	4620      	mov	r0, r4
   b76f4:	f7ff fce1 	bl	b70ba <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b76f8:	1d30      	adds	r0, r6, #4
   b76fa:	f7fd fbd9 	bl	b4eb0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b76fe:	3e08      	subs	r6, #8
   b7700:	3c08      	subs	r4, #8
   b7702:	e7f2      	b.n	b76ea <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b7704:	d00c      	beq.n	b7720 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b7706:	42b5      	cmp	r5, r6
   b7708:	d00a      	beq.n	b7720 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b770a:	b11c      	cbz	r4, b7714 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b770c:	4629      	mov	r1, r5
   b770e:	4620      	mov	r0, r4
   b7710:	f7ff fcd3 	bl	b70ba <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7714:	1d28      	adds	r0, r5, #4
   b7716:	f7fd fbcb 	bl	b4eb0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b771a:	3508      	adds	r5, #8
   b771c:	3408      	adds	r4, #8
   b771e:	e7f2      	b.n	b7706 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b7720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7722 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7722:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7724:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b7726:	6846      	ldr	r6, [r0, #4]
   b7728:	4668      	mov	r0, sp
   b772a:	f7ff fcc6 	bl	b70ba <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b772e:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b7732:	429f      	cmp	r7, r3
   b7734:	db12      	blt.n	b775c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b7736:	3701      	adds	r7, #1
        if (n > 0) {
   b7738:	2f00      	cmp	r7, #0
   b773a:	dd29      	ble.n	b7790 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b773c:	00f8      	lsls	r0, r7, #3
   b773e:	f7fd f98b 	bl	b4a58 <malloc>
            if (!d) {
   b7742:	4605      	mov	r5, r0
   b7744:	b1f0      	cbz	r0, b7784 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b7746:	e9d4 1200 	ldrd	r1, r2, [r4]
   b774a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b774e:	f7ff ffbe 	bl	b76ce <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b7752:	6820      	ldr	r0, [r4, #0]
   b7754:	f7fd f988 	bl	b4a68 <free>
        data_ = d;
   b7758:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b775a:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b775c:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b775e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7760:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b7764:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7768:	4631      	mov	r1, r6
   b776a:	f106 0008 	add.w	r0, r6, #8
   b776e:	f7ff ffae 	bl	b76ce <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7772:	b11e      	cbz	r6, b777c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b7774:	4669      	mov	r1, sp
   b7776:	4630      	mov	r0, r6
   b7778:	f7ff fc9f 	bl	b70ba <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b777c:	6863      	ldr	r3, [r4, #4]
   b777e:	3301      	adds	r3, #1
   b7780:	6063      	str	r3, [r4, #4]
    return true;
   b7782:	2501      	movs	r5, #1
   b7784:	a801      	add	r0, sp, #4
   b7786:	f7fd fb93 	bl	b4eb0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b778a:	4628      	mov	r0, r5
   b778c:	b003      	add	sp, #12
   b778e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b7790:	2500      	movs	r5, #0
   b7792:	e7de      	b.n	b7752 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b7794 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b7794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b7796:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b779a:	4605      	mov	r5, r0
   b779c:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b779e:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b77a2:	42a6      	cmp	r6, r4
   b77a4:	d005      	beq.n	b77b2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b77a6:	4639      	mov	r1, r7
   b77a8:	4620      	mov	r0, r4
   b77aa:	f7ff faf0 	bl	b6d8e <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b77ae:	b108      	cbz	r0, b77b4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b77b0:	b914      	cbnz	r4, b77b8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b77b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b77b4:	3408      	adds	r4, #8
   b77b6:	e7f4      	b.n	b77a2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b77b8:	1d20      	adds	r0, r4, #4
   b77ba:	f7fd fb79 	bl	b4eb0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b77be:	e9d5 3200 	ldrd	r3, r2, [r5]
   b77c2:	f104 0108 	add.w	r1, r4, #8
   b77c6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b77ca:	4620      	mov	r0, r4
   b77cc:	f7ff ff7f 	bl	b76ce <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b77d0:	686b      	ldr	r3, [r5, #4]
   b77d2:	3b01      	subs	r3, #1
   b77d4:	606b      	str	r3, [r5, #4]
    return true;
   b77d6:	e7ec      	b.n	b77b2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>

000b77d8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b77d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b77dc:	4605      	mov	r5, r0
   b77de:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b77e0:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b77e2:	460c      	mov	r4, r1
        WiringBleLock lk;
   b77e4:	f7fe ff84 	bl	b66f0 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b77e8:	682e      	ldr	r6, [r5, #0]
   b77ea:	1ef3      	subs	r3, r6, #3
   b77ec:	2b0d      	cmp	r3, #13
   b77ee:	d83c      	bhi.n	b786a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b77f0:	e8df f013 	tbh	[pc, r3, lsl #1]
   b77f4:	0053000e 	.word	0x0053000e
   b77f8:	00d1003b 	.word	0x00d1003b
   b77fc:	003b003b 	.word	0x003b003b
   b7800:	003b003b 	.word	0x003b003b
   b7804:	009b003b 	.word	0x009b003b
   b7808:	009b009b 	.word	0x009b009b
   b780c:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   b7810:	a804      	add	r0, sp, #16
   b7812:	f7ff fa63 	bl	b6cdc <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b7816:	9b04      	ldr	r3, [sp, #16]
   b7818:	89aa      	ldrh	r2, [r5, #12]
   b781a:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b781c:	6869      	ldr	r1, [r5, #4]
   b781e:	9804      	ldr	r0, [sp, #16]
   b7820:	3108      	adds	r1, #8
   b7822:	3002      	adds	r0, #2
   b7824:	f7fe ffc6 	bl	b67b4 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b7828:	a904      	add	r1, sp, #16
   b782a:	a806      	add	r0, sp, #24
   b782c:	f7ff fc45 	bl	b70ba <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b7830:	a906      	add	r1, sp, #24
   b7832:	f104 0018 	add.w	r0, r4, #24
   b7836:	f7ff ff74 	bl	b7722 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b783a:	4605      	mov	r5, r0
   b783c:	a807      	add	r0, sp, #28
   b783e:	f7fd fb37 	bl	b4eb0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7842:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b7844:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b7846:	b9b5      	cbnz	r5, b7876 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   b7848:	4b5d      	ldr	r3, [pc, #372]	; (b79c0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b784a:	495e      	ldr	r1, [pc, #376]	; (b79c4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b784c:	9300      	str	r3, [sp, #0]
   b784e:	2032      	movs	r0, #50	; 0x32
   b7850:	462b      	mov	r3, r5
   b7852:	aa06      	add	r2, sp, #24
   b7854:	9507      	str	r5, [sp, #28]
   b7856:	f7fd f84b 	bl	b48f0 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b785a:	9b04      	ldr	r3, [sp, #16]
   b785c:	4629      	mov	r1, r5
   b785e:	8818      	ldrh	r0, [r3, #0]
   b7860:	f7fc ffd0 	bl	b4804 <hal_ble_gap_disconnect>
   b7864:	a805      	add	r0, sp, #20
   b7866:	f7fd fb23 	bl	b4eb0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b786a:	a803      	add	r0, sp, #12
   b786c:	f7fe ff4e 	bl	b670c <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b7870:	b00e      	add	sp, #56	; 0x38
   b7872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   b7876:	4a54      	ldr	r2, [pc, #336]	; (b79c8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b7878:	9200      	str	r2, [sp, #0]
   b787a:	2300      	movs	r3, #0
   b787c:	4951      	ldr	r1, [pc, #324]	; (b79c4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b787e:	9307      	str	r3, [sp, #28]
   b7880:	aa06      	add	r2, sp, #24
   b7882:	2001      	movs	r0, #1
   b7884:	f7fd f834 	bl	b48f0 <log_message>
                if (impl->connectedCallback_) {
   b7888:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b788a:	2b00      	cmp	r3, #0
   b788c:	d0ea      	beq.n	b7864 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   b788e:	a904      	add	r1, sp, #16
   b7890:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b7894:	f7ff fc82 	bl	b719c <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b7898:	e7e4      	b.n	b7864 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b789a:	89a9      	ldrh	r1, [r5, #12]
   b789c:	4620      	mov	r0, r4
   b789e:	f7ff f99c 	bl	b6bda <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b78a2:	4606      	mov	r6, r0
   b78a4:	2800      	cmp	r0, #0
   b78a6:	d0e0      	beq.n	b786a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b78a8:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b78aa:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b78ae:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b78b2:	8029      	strh	r1, [r5, #0]
   b78b4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b78b8:	429a      	cmp	r2, r3
   b78ba:	d003      	beq.n	b78c4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   b78bc:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b78c0:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b78c2:	e7f9      	b.n	b78b8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   b78c4:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b78c8:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b78cc:	45b8      	cmp	r8, r7
   b78ce:	d004      	beq.n	b78da <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   b78d0:	1d38      	adds	r0, r7, #4
   b78d2:	f7fd faed 	bl	b4eb0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b78d6:	3708      	adds	r7, #8
   b78d8:	e7f8      	b.n	b78cc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   b78da:	2300      	movs	r3, #0
   b78dc:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b78de:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b78e2:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b78e6:	45b8      	cmp	r8, r7
   b78e8:	d004      	beq.n	b78f4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b78ea:	1d38      	adds	r0, r7, #4
   b78ec:	f7fd fae0 	bl	b4eb0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b78f0:	3708      	adds	r7, #8
   b78f2:	e7f8      	b.n	b78e6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   b78f4:	2300      	movs	r3, #0
   b78f6:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b78f8:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b78fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b78fc:	b123      	cbz	r3, b7908 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   b78fe:	4631      	mov	r1, r6
   b7900:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b7904:	f7ff fc4a 	bl	b719c <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b7908:	2300      	movs	r3, #0
   b790a:	2220      	movs	r2, #32
   b790c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b7910:	4a2e      	ldr	r2, [pc, #184]	; (b79cc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   b7912:	9200      	str	r2, [sp, #0]
   b7914:	492b      	ldr	r1, [pc, #172]	; (b79c4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b7916:	aa06      	add	r2, sp, #24
   b7918:	2001      	movs	r0, #1
   b791a:	f7fc ffe9 	bl	b48f0 <log_message>
                    impl->peers_.removeOne(*peer);
   b791e:	4631      	mov	r1, r6
   b7920:	f104 0018 	add.w	r0, r4, #24
   b7924:	f7ff ff36 	bl	b7794 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b7928:	e79f      	b.n	b786a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b792a:	89a9      	ldrh	r1, [r5, #12]
   b792c:	4620      	mov	r0, r4
   b792e:	f7ff f954 	bl	b6bda <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b7932:	2800      	cmp	r0, #0
   b7934:	d099      	beq.n	b786a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b7936:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b7938:	2b00      	cmp	r3, #0
   b793a:	d096      	beq.n	b786a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b793c:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b793e:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b7940:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b7944:	d001      	beq.n	b794a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   b7946:	2e10      	cmp	r6, #16
   b7948:	d117      	bne.n	b797a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   b794a:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b794c:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b794e:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b7950:	2506      	movs	r5, #6
                        };
   b7952:	f88d 3015 	strb.w	r3, [sp, #21]
   b7956:	9104      	str	r1, [sp, #16]
   b7958:	f88d 2014 	strb.w	r2, [sp, #20]
   b795c:	9006      	str	r0, [sp, #24]
   b795e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b7962:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b7964:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b7968:	9508      	str	r5, [sp, #32]
   b796a:	e883 0003 	stmia.w	r3, {r0, r1}
   b796e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b7970:	a906      	add	r1, sp, #24
   b7972:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b7976:	4798      	blx	r3
   b7978:	e777      	b.n	b786a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b797a:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b797c:	bf01      	itttt	eq
   b797e:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b7980:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b7982:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b7986:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b7988:	bf0f      	iteee	eq
   b798a:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b798e:	461a      	movne	r2, r3
   b7990:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b7992:	461d      	movne	r5, r3
   b7994:	e7dd      	b.n	b7952 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b7996:	89a9      	ldrh	r1, [r5, #12]
   b7998:	4620      	mov	r0, r4
   b799a:	f7ff f91e 	bl	b6bda <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b799e:	4601      	mov	r1, r0
   b79a0:	2800      	cmp	r0, #0
   b79a2:	f43f af62 	beq.w	b786a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b79a6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b79a8:	2b00      	cmp	r3, #0
   b79aa:	f43f af5e 	beq.w	b786a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b79ae:	686b      	ldr	r3, [r5, #4]
   b79b0:	9306      	str	r3, [sp, #24]
   b79b2:	aa06      	add	r2, sp, #24
   b79b4:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b79b6:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b79ba:	4798      	blx	r3
   b79bc:	e755      	b.n	b786a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b79be:	bf00      	nop
   b79c0:	000b9687 	.word	0x000b9687
   b79c4:	000b95eb 	.word	0x000b95eb
   b79c8:	000b96ad 	.word	0x000b96ad
   b79cc:	000b96ca 	.word	0x000b96ca

000b79d0 <_ZNK8particle13BlePeerDevice10disconnectEv>:
int BlePeerDevice::disconnect() const {
   b79d0:	b513      	push	{r0, r1, r4, lr}
   b79d2:	4604      	mov	r4, r0
    CHECK_TRUE(connected(), SYSTEM_ERROR_INVALID_STATE);
   b79d4:	f7ff f9a4 	bl	b6d20 <_ZNK8particle13BlePeerDevice9connectedEv>
   b79d8:	b1d0      	cbz	r0, b7a10 <_ZNK8particle13BlePeerDevice10disconnectEv+0x40>
    CHECK(hal_ble_gap_disconnect(impl()->connHandle(), nullptr));
   b79da:	6823      	ldr	r3, [r4, #0]
   b79dc:	2100      	movs	r1, #0
   b79de:	8818      	ldrh	r0, [r3, #0]
   b79e0:	f7fc ff10 	bl	b4804 <hal_ble_gap_disconnect>
   b79e4:	2800      	cmp	r0, #0
   b79e6:	db11      	blt.n	b7a0c <_ZNK8particle13BlePeerDevice10disconnectEv+0x3c>
        WiringBleLock lk;
   b79e8:	a801      	add	r0, sp, #4
   b79ea:	f7fe fe81 	bl	b66f0 <_ZN8particle3ble13WiringBleLockC1Ev>
        BleLocalDevice::getInstance().impl()->peers().removeOne(*this);
   b79ee:	f7ff fa25 	bl	b6e3c <_ZN8particle14BleLocalDevice11getInstanceEv>
        return peers_;
   b79f2:	6800      	ldr	r0, [r0, #0]
        BleLocalDevice::getInstance().impl()->peers().removeOne(*this);
   b79f4:	4621      	mov	r1, r4
   b79f6:	3018      	adds	r0, #24
   b79f8:	f7ff fecc 	bl	b7794 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
      { return _M_ptr; }
   b79fc:	6823      	ldr	r3, [r4, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b79fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b7a02:	801a      	strh	r2, [r3, #0]
        WiringBleLock lk;
   b7a04:	a801      	add	r0, sp, #4
   b7a06:	f7fe fe81 	bl	b670c <_ZN8particle3ble13WiringBleLockD1Ev>
    return SYSTEM_ERROR_NONE;
   b7a0a:	2000      	movs	r0, #0
}
   b7a0c:	b002      	add	sp, #8
   b7a0e:	bd10      	pop	{r4, pc}
    CHECK_TRUE(connected(), SYSTEM_ERROR_INVALID_STATE);
   b7a10:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b7a14:	e7fa      	b.n	b7a0c <_ZNK8particle13BlePeerDevice10disconnectEv+0x3c>

000b7a16 <_ZNK8particle14BleLocalDevice10disconnectERKNS_13BlePeerDeviceE>:
    }
    return SYSTEM_ERROR_NOT_FOUND;
}

int BleLocalDevice::disconnect(const BlePeerDevice& peer) const {
    return peer.disconnect();
   b7a16:	4608      	mov	r0, r1
   b7a18:	f7ff bfda 	b.w	b79d0 <_ZNK8particle13BlePeerDevice10disconnectEv>

000b7a1c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b7a1c:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b7a1e:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b7a20:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b7a22:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b7a24:	dd05      	ble.n	b7a32 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
    return ::realloc(ptr, size);
   b7a26:	2114      	movs	r1, #20
   b7a28:	4369      	muls	r1, r5
   b7a2a:	f7fd f825 	bl	b4a78 <realloc>
            if (!d) {
   b7a2e:	b918      	cbnz	r0, b7a38 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1c>
    }
   b7a30:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b7a32:	f7fd f819 	bl	b4a68 <free>
        T* d = nullptr;
   b7a36:	2000      	movs	r0, #0
        data_ = d;
   b7a38:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b7a3a:	60a5      	str	r5, [r4, #8]
        return true;
   b7a3c:	2001      	movs	r0, #1
   b7a3e:	e7f7      	b.n	b7a30 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x14>

000b7a40 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b7a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        capacity_(0) {
   b7a44:	2400      	movs	r4, #0
   b7a46:	e9c0 4400 	strd	r4, r4, [r0]
   b7a4a:	6084      	str	r4, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b7a4c:	4688      	mov	r8, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b7a4e:	6849      	ldr	r1, [r1, #4]
   b7a50:	42a1      	cmp	r1, r4
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b7a52:	4607      	mov	r7, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b7a54:	dd1a      	ble.n	b7a8c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   b7a56:	f7ff ffe1 	bl	b7a1c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b7a5a:	b1b8      	cbz	r0, b7a8c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b7a5c:	e9d8 9300 	ldrd	r9, r3, [r8]
   b7a60:	f04f 0c14 	mov.w	ip, #20
   b7a64:	f8d7 e000 	ldr.w	lr, [r7]
   b7a68:	fb0c 9c03 	mla	ip, ip, r3, r9
        for (; it != end; ++it, ++dest) {
   b7a6c:	eb09 0504 	add.w	r5, r9, r4
   b7a70:	45ac      	cmp	ip, r5
   b7a72:	d008      	beq.n	b7a86 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x46>
            new(dest) T(*it);
   b7a74:	eb1e 0604 	adds.w	r6, lr, r4
   b7a78:	bf1f      	itttt	ne
   b7a7a:	cd0f      	ldmiane	r5!, {r0, r1, r2, r3}
   b7a7c:	c60f      	stmiane	r6!, {r0, r1, r2, r3}
   b7a7e:	682b      	ldrne	r3, [r5, #0]
   b7a80:	6033      	strne	r3, [r6, #0]
        for (; it != end; ++it, ++dest) {
   b7a82:	3414      	adds	r4, #20
   b7a84:	e7f2      	b.n	b7a6c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x2c>
        size_ = vector.size_;
   b7a86:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b7a8a:	607b      	str	r3, [r7, #4]
}
   b7a8c:	4638      	mov	r0, r7
   b7a8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b7a92 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   b7a92:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return insert(i, vector.data_, vector.size_);
   b7a96:	e9d1 8700 	ldrd	r8, r7, [r1]
    return insert(size_, vector);
   b7a9a:	6845      	ldr	r5, [r0, #4]
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7a9c:	6883      	ldr	r3, [r0, #8]
   b7a9e:	19e9      	adds	r1, r5, r7
   b7aa0:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   b7aa2:	4604      	mov	r4, r0
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7aa4:	dc17      	bgt.n	b7ad6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x44>
    T* const p = data_ + i;
   b7aa6:	2314      	movs	r3, #20
   b7aa8:	6826      	ldr	r6, [r4, #0]
    move(p + n, p, data_ + size_);
   b7aaa:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7aac:	435d      	muls	r5, r3
    move(p + n, p, data_ + size_);
   b7aae:	fb03 f907 	mul.w	r9, r3, r7
   b7ab2:	435a      	muls	r2, r3
    T* const p = data_ + i;
   b7ab4:	442e      	add	r6, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7ab6:	1b52      	subs	r2, r2, r5
   b7ab8:	4631      	mov	r1, r6
   b7aba:	eb06 0009 	add.w	r0, r6, r9
   b7abe:	f001 fa1d 	bl	b8efc <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b7ac2:	464a      	mov	r2, r9
   b7ac4:	4641      	mov	r1, r8
   b7ac6:	4630      	mov	r0, r6
   b7ac8:	f001 fa0a 	bl	b8ee0 <memcpy>
    size_ += n;
   b7acc:	6863      	ldr	r3, [r4, #4]
   b7ace:	443b      	add	r3, r7
   b7ad0:	6063      	str	r3, [r4, #4]
}
   b7ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7ad6:	f7ff ffa1 	bl	b7a1c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b7ada:	2800      	cmp	r0, #0
   b7adc:	d1e3      	bne.n	b7aa6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x14>
   b7ade:	e7f8      	b.n	b7ad2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x40>

000b7ae0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b7ae0:	b082      	sub	sp, #8
   b7ae2:	b570      	push	{r4, r5, r6, lr}
   b7ae4:	460c      	mov	r4, r1
   b7ae6:	a904      	add	r1, sp, #16
   b7ae8:	e881 000c 	stmia.w	r1, {r2, r3}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7aec:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b7af0:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b7af2:	4605      	mov	r5, r0
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7af4:	da17      	bge.n	b7b26 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x46>
    T* const p = data_ + i;
   b7af6:	2314      	movs	r3, #20
   b7af8:	fb03 f104 	mul.w	r1, r3, r4
    move(p + 1, p, data_ + size_);
   b7afc:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   b7afe:	682c      	ldr	r4, [r5, #0]
    move(p + 1, p, data_ + size_);
   b7b00:	435a      	muls	r2, r3
    T* const p = data_ + i;
   b7b02:	440c      	add	r4, r1
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7b04:	1a52      	subs	r2, r2, r1
   b7b06:	18e0      	adds	r0, r4, r3
   b7b08:	4621      	mov	r1, r4
    new(p) T(std::move(value));
   b7b0a:	ae04      	add	r6, sp, #16
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7b0c:	f001 f9f6 	bl	b8efc <memmove>
    new(p) T(std::move(value));
   b7b10:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b7b12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7b14:	6833      	ldr	r3, [r6, #0]
   b7b16:	6023      	str	r3, [r4, #0]
    ++size_;
   b7b18:	686b      	ldr	r3, [r5, #4]
   b7b1a:	3301      	adds	r3, #1
   b7b1c:	606b      	str	r3, [r5, #4]
}
   b7b1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b7b22:	b002      	add	sp, #8
   b7b24:	4770      	bx	lr
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7b26:	3101      	adds	r1, #1
   b7b28:	f7ff ff78 	bl	b7a1c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b7b2c:	2800      	cmp	r0, #0
   b7b2e:	d1e2      	bne.n	b7af6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x16>
   b7b30:	e7f5      	b.n	b7b1e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x3e>

000b7b32 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>:
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   b7b32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        capacity_(0) {
   b7b36:	2400      	movs	r4, #0
   b7b38:	b093      	sub	sp, #76	; 0x4c
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b7b3a:	1e93      	subs	r3, r2, #2
   b7b3c:	e9c0 4400 	strd	r4, r4, [r0]
   b7b40:	b2db      	uxtb	r3, r3
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   b7b42:	4605      	mov	r5, r0
   b7b44:	460f      	mov	r7, r1
   b7b46:	4690      	mov	r8, r2
   b7b48:	6084      	str	r4, [r0, #8]
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b7b4a:	9305      	str	r3, [sp, #20]
    return size_;
   b7b4c:	6879      	ldr	r1, [r7, #4]
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   b7b4e:	428c      	cmp	r4, r1
   b7b50:	da72      	bge.n	b7c38 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
    return data_[i];
   b7b52:	6838      	ldr	r0, [r7, #0]
   b7b54:	ab07      	add	r3, sp, #28
   b7b56:	4642      	mov	r2, r8
   b7b58:	1b09      	subs	r1, r1, r4
   b7b5a:	4420      	add	r0, r4
   b7b5c:	f7fe fcfa 	bl	b6554 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
        if (adsLen > 0) {
   b7b60:	4606      	mov	r6, r0
   b7b62:	2800      	cmp	r0, #0
   b7b64:	d068      	beq.n	b7c38 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b7b66:	9b05      	ldr	r3, [sp, #20]
   b7b68:	2b01      	cmp	r3, #1
   b7b6a:	d82f      	bhi.n	b7bcc <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x9a>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b7b6c:	f1a0 0b02 	sub.w	fp, r0, #2
   b7b70:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
   b7b74:	f04f 0900 	mov.w	r9, #0
    return insert(size_, std::move(value));
   b7b78:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b7b7c:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b7b7e:	45cb      	cmp	fp, r9
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b7b80:	4423      	add	r3, r4
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b7b82:	d055      	beq.n	b7c30 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
    return data_[i];
   b7b84:	683a      	ldr	r2, [r7, #0]
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b7b86:	eb03 0349 	add.w	r3, r3, r9, lsl #1
   b7b8a:	4413      	add	r3, r2
   b7b8c:	a808      	add	r0, sp, #32
   b7b8e:	78d9      	ldrb	r1, [r3, #3]
   b7b90:	789b      	ldrb	r3, [r3, #2]
   b7b92:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   b7b96:	f7fe fef6 	bl	b6986 <_ZN8particle7BleUuidC1Et>
                    uuids.append(uuid);
   b7b9a:	f10d 0e20 	add.w	lr, sp, #32
   b7b9e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b7ba2:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b7ba6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b7baa:	f8de 3000 	ldr.w	r3, [lr]
   b7bae:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   b7bb2:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   b7bb6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   b7bba:	ab0d      	add	r3, sp, #52	; 0x34
   b7bbc:	cb0c      	ldmia	r3, {r2, r3}
   b7bbe:	6869      	ldr	r1, [r5, #4]
   b7bc0:	4628      	mov	r0, r5
   b7bc2:	f7ff ff8d 	bl	b7ae0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b7bc6:	f109 0901 	add.w	r9, r9, #1
   b7bca:	e7d7      	b.n	b7b7c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x4a>
            } else if (type == BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE) {
   b7bcc:	f1a8 0306 	sub.w	r3, r8, #6
   b7bd0:	2b01      	cmp	r3, #1
   b7bd2:	d82d      	bhi.n	b7c30 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b7bd4:	f1a0 0b02 	sub.w	fp, r0, #2
   b7bd8:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
   b7bdc:	f04f 0900 	mov.w	r9, #0
   b7be0:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
   b7be4:	45cb      	cmp	fp, r9
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   b7be6:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b7be8:	d022      	beq.n	b7c30 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   b7bea:	3302      	adds	r3, #2
    return data_[i];
   b7bec:	6839      	ldr	r1, [r7, #0]
   b7bee:	4423      	add	r3, r4
   b7bf0:	eb03 1309 	add.w	r3, r3, r9, lsl #4
   b7bf4:	2201      	movs	r2, #1
   b7bf6:	4419      	add	r1, r3
   b7bf8:	a808      	add	r0, sp, #32
   b7bfa:	f7fe fea5 	bl	b6948 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
                    uuids.append(uuid);
   b7bfe:	f10d 0e20 	add.w	lr, sp, #32
   b7c02:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b7c06:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b7c0a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b7c0e:	f8de 3000 	ldr.w	r3, [lr]
   b7c12:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   b7c16:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   b7c1a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   b7c1e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   b7c22:	6869      	ldr	r1, [r5, #4]
   b7c24:	4628      	mov	r0, r5
   b7c26:	f7ff ff5b 	bl	b7ae0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b7c2a:	f109 0901 	add.w	r9, r9, #1
   b7c2e:	e7d9      	b.n	b7be4 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xb2>
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   b7c30:	9b07      	ldr	r3, [sp, #28]
   b7c32:	441c      	add	r4, r3
   b7c34:	4434      	add	r4, r6
   b7c36:	e789      	b.n	b7b4c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x1a>
}
   b7c38:	4628      	mov	r0, r5
   b7c3a:	b013      	add	sp, #76	; 0x4c
   b7c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b7c40 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>:
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   b7c40:	b530      	push	{r4, r5, lr}
        capacity_(0) {
   b7c42:	2300      	movs	r3, #0
   b7c44:	b085      	sub	sp, #20
   b7c46:	e9c0 3300 	strd	r3, r3, [r0]
   b7c4a:	6083      	str	r3, [r0, #8]
   b7c4c:	4604      	mov	r4, r0
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b7c4e:	2202      	movs	r2, #2
   b7c50:	a801      	add	r0, sp, #4
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   b7c52:	460d      	mov	r5, r1
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b7c54:	f7ff ff6d 	bl	b7b32 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b7c58:	a901      	add	r1, sp, #4
   b7c5a:	4620      	mov	r0, r4
   b7c5c:	f7ff ff19 	bl	b7a92 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b7c60:	a801      	add	r0, sp, #4
   b7c62:	f7ff f994 	bl	b6f8e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b7c66:	2202      	movs	r2, #2
   b7c68:	4629      	mov	r1, r5
   b7c6a:	a801      	add	r0, sp, #4
   b7c6c:	f7ff ff61 	bl	b7b32 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b7c70:	a901      	add	r1, sp, #4
   b7c72:	4620      	mov	r0, r4
   b7c74:	f7ff ff0d 	bl	b7a92 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b7c78:	a801      	add	r0, sp, #4
   b7c7a:	f7ff f988 	bl	b6f8e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE));
   b7c7e:	2203      	movs	r2, #3
   b7c80:	4629      	mov	r1, r5
   b7c82:	a801      	add	r0, sp, #4
   b7c84:	f7ff ff55 	bl	b7b32 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b7c88:	a901      	add	r1, sp, #4
   b7c8a:	4620      	mov	r0, r4
   b7c8c:	f7ff ff01 	bl	b7a92 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b7c90:	a801      	add	r0, sp, #4
   b7c92:	f7ff f97c 	bl	b6f8e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE));
   b7c96:	2206      	movs	r2, #6
   b7c98:	4629      	mov	r1, r5
   b7c9a:	a801      	add	r0, sp, #4
   b7c9c:	f7ff ff49 	bl	b7b32 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b7ca0:	a901      	add	r1, sp, #4
   b7ca2:	4620      	mov	r0, r4
   b7ca4:	f7ff fef5 	bl	b7a92 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b7ca8:	a801      	add	r0, sp, #4
   b7caa:	f7ff f970 	bl	b6f8e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE));
   b7cae:	2207      	movs	r2, #7
   b7cb0:	4629      	mov	r1, r5
   b7cb2:	a801      	add	r0, sp, #4
   b7cb4:	f7ff ff3d 	bl	b7b32 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b7cb8:	a901      	add	r1, sp, #4
   b7cba:	4620      	mov	r0, r4
   b7cbc:	f7ff fee9 	bl	b7a92 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b7cc0:	a801      	add	r0, sp, #4
   b7cc2:	f7ff f964 	bl	b6f8e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   b7cc6:	4620      	mov	r0, r4
   b7cc8:	b005      	add	sp, #20
   b7cca:	bd30      	pop	{r4, r5, pc}

000b7ccc <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>:
    bool filterByServiceUUID(const BleScanResult& result) {
   b7ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7cd0:	b08b      	sub	sp, #44	; 0x2c
   b7cd2:	460c      	mov	r4, r1
        auto filterServiceUuids = filter_.serviceUUIDs();
   b7cd4:	f100 0144 	add.w	r1, r0, #68	; 0x44
   b7cd8:	a801      	add	r0, sp, #4
   b7cda:	f7ff feb1 	bl	b7a40 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>
        if (filterServiceUuids.size() > 0) {
   b7cde:	9b02      	ldr	r3, [sp, #8]
   b7ce0:	2b00      	cmp	r3, #0
   b7ce2:	dd4a      	ble.n	b7d7a <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xae>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   b7ce4:	f104 0114 	add.w	r1, r4, #20
   b7ce8:	a804      	add	r0, sp, #16
   b7cea:	f7ff ffa9 	bl	b7c40 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   b7cee:	f104 0108 	add.w	r1, r4, #8
   b7cf2:	a807      	add	r0, sp, #28
   b7cf4:	f7ff ffa4 	bl	b7c40 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return size_;
   b7cf8:	9d05      	ldr	r5, [sp, #20]
   b7cfa:	9e08      	ldr	r6, [sp, #32]
            if (srUuids.size() <= 0 && advUuids.size() <= 0) {
   b7cfc:	2d00      	cmp	r5, #0
   b7cfe:	dc01      	bgt.n	b7d04 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x38>
   b7d00:	2e00      	cmp	r6, #0
   b7d02:	dd38      	ble.n	b7d76 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
    return data_;
   b7d04:	9a01      	ldr	r2, [sp, #4]
    return data_ + size_;
   b7d06:	9f02      	ldr	r7, [sp, #8]
    return data_;
   b7d08:	f8dd 8010 	ldr.w	r8, [sp, #16]
   b7d0c:	f8dd 901c 	ldr.w	r9, [sp, #28]
    return data_ + size_;
   b7d10:	2314      	movs	r3, #20
   b7d12:	fb03 2707 	mla	r7, r3, r7, r2
    return data_ + size_;
   b7d16:	fb03 8505 	mla	r5, r3, r5, r8
   b7d1a:	fb03 9606 	mla	r6, r3, r6, r9
   b7d1e:	4692      	mov	sl, r2
            for (const auto& uuid : filterServiceUuids) {
   b7d20:	45ba      	cmp	sl, r7
   b7d22:	d028      	beq.n	b7d76 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
const T* spark::Vector<T, AllocatorT>::end() const {
   b7d24:	46c3      	mov	fp, r8
                for (const auto& found : srUuids) {
   b7d26:	45ab      	cmp	fp, r5
   b7d28:	d015      	beq.n	b7d56 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8a>
                    if (uuid == found) {
   b7d2a:	4659      	mov	r1, fp
   b7d2c:	4650      	mov	r0, sl
   b7d2e:	f7fe fe34 	bl	b699a <_ZNK8particle7BleUuideqERKS0_>
   b7d32:	f10b 0b14 	add.w	fp, fp, #20
   b7d36:	4604      	mov	r4, r0
   b7d38:	2800      	cmp	r0, #0
   b7d3a:	d0f4      	beq.n	b7d26 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x5a>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   b7d3c:	a807      	add	r0, sp, #28
   b7d3e:	f7ff f926 	bl	b6f8e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   b7d42:	a804      	add	r0, sp, #16
   b7d44:	f7ff f923 	bl	b6f8e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
        auto filterServiceUuids = filter_.serviceUUIDs();
   b7d48:	a801      	add	r0, sp, #4
   b7d4a:	f7ff f920 	bl	b6f8e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    }
   b7d4e:	4620      	mov	r0, r4
   b7d50:	b00b      	add	sp, #44	; 0x2c
   b7d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7d56:	46cb      	mov	fp, r9
                for (const auto& found : advUuids) {
   b7d58:	45b3      	cmp	fp, r6
   b7d5a:	d009      	beq.n	b7d70 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xa4>
                    if (uuid == found) {
   b7d5c:	4659      	mov	r1, fp
   b7d5e:	4650      	mov	r0, sl
   b7d60:	f7fe fe1b 	bl	b699a <_ZNK8particle7BleUuideqERKS0_>
   b7d64:	f10b 0b14 	add.w	fp, fp, #20
   b7d68:	4604      	mov	r4, r0
   b7d6a:	2800      	cmp	r0, #0
   b7d6c:	d0f4      	beq.n	b7d58 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8c>
   b7d6e:	e7e5      	b.n	b7d3c <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
            for (const auto& uuid : filterServiceUuids) {
   b7d70:	f10a 0a14 	add.w	sl, sl, #20
   b7d74:	e7d4      	b.n	b7d20 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x54>
                return false;
   b7d76:	2400      	movs	r4, #0
   b7d78:	e7e0      	b.n	b7d3c <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
        return true;
   b7d7a:	2401      	movs	r4, #1
   b7d7c:	e7e4      	b.n	b7d48 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x7c>

000b7d7e <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b7d7e:	b538      	push	{r3, r4, r5, lr}
   b7d80:	4605      	mov	r5, r0
   b7d82:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b7d84:	f7fd fac4 	bl	b5310 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7d88:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7d8a:	68a2      	ldr	r2, [r4, #8]
   b7d8c:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7d8e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7d90:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7d92:	68e2      	ldr	r2, [r4, #12]
   b7d94:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7d96:	60e3      	str	r3, [r4, #12]
      }
   b7d98:	bd38      	pop	{r3, r4, r5, pc}

000b7d9a <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>:
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   b7d9a:	b510      	push	{r4, lr}
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b7d9c:	6804      	ldr	r4, [r0, #0]
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   b7d9e:	b08a      	sub	sp, #40	; 0x28
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b7da0:	344c      	adds	r4, #76	; 0x4c
   b7da2:	b1b9      	cbz	r1, b7dd4 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x3a>
   b7da4:	e9cd 1200 	strd	r1, r2, [sp]
   b7da8:	a802      	add	r0, sp, #8
   b7daa:	4669      	mov	r1, sp
   b7dac:	f7ff f94e 	bl	b704c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b7db0:	2300      	movs	r3, #0
	__x.swap(*this);
   b7db2:	a906      	add	r1, sp, #24
   b7db4:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   b7db6:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   b7db8:	f7ff ffe1 	bl	b7d7e <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b7dbc:	4621      	mov	r1, r4
   b7dbe:	a806      	add	r0, sp, #24
   b7dc0:	f7ff ffdd 	bl	b7d7e <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b7dc4:	a806      	add	r0, sp, #24
   b7dc6:	f7fd f87b 	bl	b4ec0 <_ZNSt14_Function_baseD1Ev>
   b7dca:	a802      	add	r0, sp, #8
   b7dcc:	f7fd f878 	bl	b4ec0 <_ZNSt14_Function_baseD1Ev>
}
   b7dd0:	b00a      	add	sp, #40	; 0x28
   b7dd2:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   b7dd4:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   b7dd6:	e7eb      	b.n	b7db0 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x16>

000b7dd8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7dd8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7dda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7ddc:	4604      	mov	r4, r0
   b7dde:	460d      	mov	r5, r1
   b7de0:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7de2:	d914      	bls.n	b7e0e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7de4:	4290      	cmp	r0, r2
   b7de6:	d213      	bcs.n	b7e10 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7de8:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b7dec:	1a75      	subs	r5, r6, r1
   b7dee:	f1a1 0708 	sub.w	r7, r1, #8
   b7df2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7df4:	42b7      	cmp	r7, r6
   b7df6:	d018      	beq.n	b7e2a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b7df8:	b11c      	cbz	r4, b7e02 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b7dfa:	4631      	mov	r1, r6
   b7dfc:	4620      	mov	r0, r4
   b7dfe:	f7ff f952 	bl	b70a6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b7e02:	1d30      	adds	r0, r6, #4
   b7e04:	f7fd f854 	bl	b4eb0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b7e08:	3e08      	subs	r6, #8
   b7e0a:	3c08      	subs	r4, #8
   b7e0c:	e7f2      	b.n	b7df4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b7e0e:	d00c      	beq.n	b7e2a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b7e10:	42b5      	cmp	r5, r6
   b7e12:	d00a      	beq.n	b7e2a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7e14:	b11c      	cbz	r4, b7e1e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7e16:	4629      	mov	r1, r5
   b7e18:	4620      	mov	r0, r4
   b7e1a:	f7ff f944 	bl	b70a6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7e1e:	1d28      	adds	r0, r5, #4
   b7e20:	f7fd f846 	bl	b4eb0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b7e24:	3508      	adds	r5, #8
   b7e26:	3408      	adds	r4, #8
   b7e28:	e7f2      	b.n	b7e10 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b7e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7e2c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b7e2c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b7e2e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b7e30:	4605      	mov	r5, r0
        if (n > 0) {
   b7e32:	dd11      	ble.n	b7e58 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b7e34:	00f0      	lsls	r0, r6, #3
   b7e36:	f7fc fe0f 	bl	b4a58 <malloc>
            if (!d) {
   b7e3a:	4604      	mov	r4, r0
   b7e3c:	b158      	cbz	r0, b7e56 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b7e3e:	e9d5 1200 	ldrd	r1, r2, [r5]
   b7e42:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b7e46:	f7ff ffc7 	bl	b7dd8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b7e4a:	6828      	ldr	r0, [r5, #0]
   b7e4c:	f7fc fe0c 	bl	b4a68 <free>
        data_ = d;
   b7e50:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b7e52:	60ae      	str	r6, [r5, #8]
        return true;
   b7e54:	2001      	movs	r0, #1
    }
   b7e56:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b7e58:	2400      	movs	r4, #0
   b7e5a:	e7f6      	b.n	b7e4a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b7e5c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b7e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b7e60:	2300      	movs	r3, #0
   b7e62:	e9c0 3300 	strd	r3, r3, [r0]
   b7e66:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b7e68:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b7e6a:	6849      	ldr	r1, [r1, #4]
   b7e6c:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b7e6e:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b7e70:	dd13      	ble.n	b7e9a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   b7e72:	f7ff ffdb 	bl	b7e2c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b7e76:	b180      	cbz	r0, b7e9a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b7e78:	e9d5 6300 	ldrd	r6, r3, [r5]
   b7e7c:	6827      	ldr	r7, [r4, #0]
   b7e7e:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   b7e82:	45b0      	cmp	r8, r6
   b7e84:	d007      	beq.n	b7e96 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   b7e86:	b11f      	cbz	r7, b7e90 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   b7e88:	4631      	mov	r1, r6
   b7e8a:	4638      	mov	r0, r7
   b7e8c:	f7ff f90b 	bl	b70a6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        for (; it != end; ++it, ++dest) {
   b7e90:	3608      	adds	r6, #8
   b7e92:	3708      	adds	r7, #8
   b7e94:	e7f5      	b.n	b7e82 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   b7e96:	686b      	ldr	r3, [r5, #4]
   b7e98:	6063      	str	r3, [r4, #4]
}
   b7e9a:	4620      	mov	r0, r4
   b7e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7ea0 <_ZNK8particle13BlePeerDevice8servicesEv>:
Vector<BleService> BlePeerDevice::services() const {
   b7ea0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7ea2:	460d      	mov	r5, r1
   b7ea4:	4604      	mov	r4, r0
    WiringBleLock lk;
   b7ea6:	a801      	add	r0, sp, #4
   b7ea8:	f7fe fc22 	bl	b66f0 <_ZN8particle3ble13WiringBleLockC1Ev>
        return services_;
   b7eac:	6829      	ldr	r1, [r5, #0]
    return impl()->services();
   b7eae:	4620      	mov	r0, r4
   b7eb0:	310c      	adds	r1, #12
   b7eb2:	f7ff ffd3 	bl	b7e5c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
   b7eb6:	a801      	add	r0, sp, #4
   b7eb8:	f7fe fc28 	bl	b670c <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b7ebc:	4620      	mov	r0, r4
   b7ebe:	b003      	add	sp, #12
   b7ec0:	bd30      	pop	{r4, r5, pc}

000b7ec2 <_ZN8particle13BlePeerDevice19discoverAllServicesEv>:
Vector<BleService> BlePeerDevice::discoverAllServices() {
   b7ec2:	b538      	push	{r3, r4, r5, lr}
        return servicesDiscovered_;
   b7ec4:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   b7ec6:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleService> BlePeerDevice::discoverAllServices() {
   b7ec8:	4605      	mov	r5, r0
   b7eca:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
   b7ecc:	b933      	cbnz	r3, b7edc <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
   b7ece:	4608      	mov	r0, r1
   b7ed0:	f7fe fba2 	bl	b6618 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>
   b7ed4:	b910      	cbnz	r0, b7edc <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
      { return _M_ptr; }
   b7ed6:	6823      	ldr	r3, [r4, #0]
        servicesDiscovered_ = discovered;
   b7ed8:	2201      	movs	r2, #1
   b7eda:	729a      	strb	r2, [r3, #10]
    return services();
   b7edc:	4628      	mov	r0, r5
   b7ede:	4621      	mov	r1, r4
   b7ee0:	f7ff ffde 	bl	b7ea0 <_ZNK8particle13BlePeerDevice8servicesEv>
}
   b7ee4:	4628      	mov	r0, r5
   b7ee6:	bd38      	pop	{r3, r4, r5, pc}

000b7ee8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7ee8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7eea:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b7eec:	6845      	ldr	r5, [r0, #4]
   b7eee:	4668      	mov	r0, sp
   b7ef0:	f7ff f8d9 	bl	b70a6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7ef4:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b7ef8:	4299      	cmp	r1, r3
   b7efa:	da10      	bge.n	b7f1e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b7efc:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7efe:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7f00:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b7f04:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7f08:	4629      	mov	r1, r5
   b7f0a:	f105 0008 	add.w	r0, r5, #8
   b7f0e:	f7ff ff63 	bl	b7dd8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7f12:	b98d      	cbnz	r5, b7f38 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b7f14:	6863      	ldr	r3, [r4, #4]
   b7f16:	3301      	adds	r3, #1
   b7f18:	6063      	str	r3, [r4, #4]
    return true;
   b7f1a:	2601      	movs	r6, #1
   b7f1c:	e006      	b.n	b7f2c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7f1e:	3101      	adds	r1, #1
   b7f20:	4620      	mov	r0, r4
   b7f22:	f7ff ff83 	bl	b7e2c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b7f26:	4606      	mov	r6, r0
   b7f28:	2800      	cmp	r0, #0
   b7f2a:	d1e7      	bne.n	b7efc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
      ~__shared_ptr() = default;
   b7f2c:	a801      	add	r0, sp, #4
   b7f2e:	f7fc ffbf 	bl	b4eb0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7f32:	4630      	mov	r0, r6
   b7f34:	b002      	add	sp, #8
   b7f36:	bd70      	pop	{r4, r5, r6, pc}
   b7f38:	4669      	mov	r1, sp
   b7f3a:	4628      	mov	r0, r5
   b7f3c:	f7ff f8b3 	bl	b70a6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7f40:	e7e8      	b.n	b7f14 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>
	...

000b7f44 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv>:
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   b7f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                LOG(ERROR, "Failed to append discovered service.");
   b7f48:	f8df 90b8 	ldr.w	r9, [pc, #184]	; b8004 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc0>
   b7f4c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; b8008 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc4>
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   b7f50:	b093      	sub	sp, #76	; 0x4c
   b7f52:	4605      	mov	r5, r0
   b7f54:	4688      	mov	r8, r1
        for (size_t i = 0; i < event->count; i++) {
   b7f56:	2700      	movs	r7, #0
   b7f58:	682b      	ldr	r3, [r5, #0]
   b7f5a:	42bb      	cmp	r3, r7
   b7f5c:	d94e      	bls.n	b7ffc <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xb8>
            BleService service;
   b7f5e:	a803      	add	r0, sp, #12
   b7f60:	f7fe fea0 	bl	b6ca4 <_ZN8particle10BleServiceC1Ev>
      get() const noexcept
   b7f64:	261c      	movs	r6, #28
   b7f66:	686a      	ldr	r2, [r5, #4]
      { return _M_ptr; }
   b7f68:	9c03      	ldr	r4, [sp, #12]
        return uuid_;
   b7f6a:	437e      	muls	r6, r7
   b7f6c:	4432      	add	r2, r6
   b7f6e:	f10d 0c14 	add.w	ip, sp, #20
   b7f72:	1d13      	adds	r3, r2, #4
   b7f74:	46e3      	mov	fp, ip
   b7f76:	3214      	adds	r2, #20
   b7f78:	6818      	ldr	r0, [r3, #0]
   b7f7a:	6859      	ldr	r1, [r3, #4]
   b7f7c:	46e6      	mov	lr, ip
   b7f7e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   b7f82:	3308      	adds	r3, #8
   b7f84:	4293      	cmp	r3, r2
   b7f86:	46f4      	mov	ip, lr
   b7f88:	d1f6      	bne.n	b7f78 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x34>
   b7f8a:	6818      	ldr	r0, [r3, #0]
   b7f8c:	f8ce 0000 	str.w	r0, [lr]
        return *this = BleUuid(uuid);
   b7f90:	4659      	mov	r1, fp
   b7f92:	a80a      	add	r0, sp, #40	; 0x28
   b7f94:	f7fe fcb6 	bl	b6904 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   b7f98:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
   b7f9c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b7fa0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7fa2:	f8dc 3000 	ldr.w	r3, [ip]
   b7fa6:	6023      	str	r3, [r4, #0]
            service.impl()->startHandle() = event->services[i].start_handle;
   b7fa8:	686b      	ldr	r3, [r5, #4]
   b7faa:	9a03      	ldr	r2, [sp, #12]
   b7fac:	4433      	add	r3, r6
   b7fae:	a903      	add	r1, sp, #12
   b7fb0:	8b1b      	ldrh	r3, [r3, #24]
   b7fb2:	8293      	strh	r3, [r2, #20]
            service.impl()->endHandle() = event->services[i].end_handle;
   b7fb4:	686b      	ldr	r3, [r5, #4]
   b7fb6:	4433      	add	r3, r6
   b7fb8:	8b5b      	ldrh	r3, [r3, #26]
   b7fba:	82d3      	strh	r3, [r2, #22]
        return services_;
   b7fbc:	f8d8 0000 	ldr.w	r0, [r8]
   b7fc0:	f100 040c 	add.w	r4, r0, #12
   b7fc4:	a80a      	add	r0, sp, #40	; 0x28
   b7fc6:	f7ff f86e 	bl	b70a6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
            if (!peer->impl()->services().append(service)) {
   b7fca:	4620      	mov	r0, r4
   b7fcc:	a90a      	add	r1, sp, #40	; 0x28
   b7fce:	f7ff ff8b 	bl	b7ee8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b7fd2:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b7fd4:	a80b      	add	r0, sp, #44	; 0x2c
   b7fd6:	f7fc ff6b 	bl	b4eb0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7fda:	b954      	cbnz	r4, b7ff2 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xae>
                LOG(ERROR, "Failed to append discovered service.");
   b7fdc:	2320      	movs	r3, #32
   b7fde:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
   b7fe2:	f8cd 9000 	str.w	r9, [sp]
   b7fe6:	4623      	mov	r3, r4
   b7fe8:	aa0a      	add	r2, sp, #40	; 0x28
   b7fea:	4651      	mov	r1, sl
   b7fec:	2032      	movs	r0, #50	; 0x32
   b7fee:	f7fc fc7f 	bl	b48f0 <log_message>
   b7ff2:	a804      	add	r0, sp, #16
   b7ff4:	f7fc ff5c 	bl	b4eb0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   b7ff8:	3701      	adds	r7, #1
   b7ffa:	e7ad      	b.n	b7f58 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x14>
    }
   b7ffc:	b013      	add	sp, #76	; 0x4c
   b7ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8002:	bf00      	nop
   b8004:	000b96e9 	.word	0x000b96e9
   b8008:	000b95eb 	.word	0x000b95eb

000b800c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b800c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b800e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8010:	4604      	mov	r4, r0
   b8012:	460d      	mov	r5, r1
   b8014:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b8016:	d914      	bls.n	b8042 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b8018:	4290      	cmp	r0, r2
   b801a:	d213      	bcs.n	b8044 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b801c:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b8020:	1a75      	subs	r5, r6, r1
   b8022:	f1a1 0708 	sub.w	r7, r1, #8
   b8026:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8028:	42b7      	cmp	r7, r6
   b802a:	d018      	beq.n	b805e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b802c:	b11c      	cbz	r4, b8036 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b802e:	4631      	mov	r1, r6
   b8030:	4620      	mov	r0, r4
   b8032:	f7ff f82a 	bl	b708a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8036:	1d30      	adds	r0, r6, #4
   b8038:	f7fc ff3a 	bl	b4eb0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b803c:	3e08      	subs	r6, #8
   b803e:	3c08      	subs	r4, #8
   b8040:	e7f2      	b.n	b8028 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b8042:	d00c      	beq.n	b805e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b8044:	42b5      	cmp	r5, r6
   b8046:	d00a      	beq.n	b805e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b8048:	b11c      	cbz	r4, b8052 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b804a:	4629      	mov	r1, r5
   b804c:	4620      	mov	r0, r4
   b804e:	f7ff f81c 	bl	b708a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8052:	1d28      	adds	r0, r5, #4
   b8054:	f7fc ff2c 	bl	b4eb0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b8058:	3508      	adds	r5, #8
   b805a:	3408      	adds	r4, #8
   b805c:	e7f2      	b.n	b8044 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b805e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8060 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b8060:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b8062:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b8064:	4605      	mov	r5, r0
        if (n > 0) {
   b8066:	dd11      	ble.n	b808c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b8068:	00f0      	lsls	r0, r6, #3
   b806a:	f7fc fcf5 	bl	b4a58 <malloc>
            if (!d) {
   b806e:	4604      	mov	r4, r0
   b8070:	b158      	cbz	r0, b808a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b8072:	e9d5 1200 	ldrd	r1, r2, [r5]
   b8076:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b807a:	f7ff ffc7 	bl	b800c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b807e:	6828      	ldr	r0, [r5, #0]
   b8080:	f7fc fcf2 	bl	b4a68 <free>
        data_ = d;
   b8084:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b8086:	60ae      	str	r6, [r5, #8]
        return true;
   b8088:	2001      	movs	r0, #1
    }
   b808a:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b808c:	2400      	movs	r4, #0
   b808e:	e7f6      	b.n	b807e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b8090 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b8094:	2300      	movs	r3, #0
   b8096:	e9c0 3300 	strd	r3, r3, [r0]
   b809a:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b809c:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b809e:	6849      	ldr	r1, [r1, #4]
   b80a0:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b80a2:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b80a4:	dd13      	ble.n	b80ce <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   b80a6:	f7ff ffdb 	bl	b8060 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b80aa:	b180      	cbz	r0, b80ce <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b80ac:	e9d5 6300 	ldrd	r6, r3, [r5]
   b80b0:	6827      	ldr	r7, [r4, #0]
   b80b2:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   b80b6:	45b0      	cmp	r8, r6
   b80b8:	d007      	beq.n	b80ca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   b80ba:	b11f      	cbz	r7, b80c4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   b80bc:	4631      	mov	r1, r6
   b80be:	4638      	mov	r0, r7
   b80c0:	f7fe ffe3 	bl	b708a <_ZN8particle17BleCharacteristicC1ERKS0_>
        for (; it != end; ++it, ++dest) {
   b80c4:	3608      	adds	r6, #8
   b80c6:	3708      	adds	r7, #8
   b80c8:	e7f5      	b.n	b80b6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   b80ca:	686b      	ldr	r3, [r5, #4]
   b80cc:	6063      	str	r3, [r4, #4]
}
   b80ce:	4620      	mov	r0, r4
   b80d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b80d4 <_ZNK8particle13BlePeerDevice15characteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::characteristics() const {
   b80d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b80d6:	460d      	mov	r5, r1
   b80d8:	4604      	mov	r4, r0
    WiringBleLock lk;
   b80da:	a801      	add	r0, sp, #4
   b80dc:	f7fe fb08 	bl	b66f0 <_ZN8particle3ble13WiringBleLockC1Ev>
        return characteristics_;
   b80e0:	6829      	ldr	r1, [r5, #0]
    return impl()->characteristics();
   b80e2:	4620      	mov	r0, r4
   b80e4:	3118      	adds	r1, #24
   b80e6:	f7ff ffd3 	bl	b8090 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
   b80ea:	a801      	add	r0, sp, #4
   b80ec:	f7fe fb0e 	bl	b670c <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b80f0:	4620      	mov	r0, r4
   b80f2:	b003      	add	sp, #12
   b80f4:	bd30      	pop	{r4, r5, pc}

000b80f6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b80f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b80f8:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b80fa:	6845      	ldr	r5, [r0, #4]
   b80fc:	4668      	mov	r0, sp
   b80fe:	f7fe ffc4 	bl	b708a <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8102:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b8106:	4299      	cmp	r1, r3
   b8108:	da10      	bge.n	b812c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b810a:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b810c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b810e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b8112:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b8116:	4629      	mov	r1, r5
   b8118:	f105 0008 	add.w	r0, r5, #8
   b811c:	f7ff ff76 	bl	b800c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b8120:	b98d      	cbnz	r5, b8146 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b8122:	6863      	ldr	r3, [r4, #4]
   b8124:	3301      	adds	r3, #1
   b8126:	6063      	str	r3, [r4, #4]
    return true;
   b8128:	2601      	movs	r6, #1
   b812a:	e006      	b.n	b813a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b812c:	3101      	adds	r1, #1
   b812e:	4620      	mov	r0, r4
   b8130:	f7ff ff96 	bl	b8060 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b8134:	4606      	mov	r6, r0
   b8136:	2800      	cmp	r0, #0
   b8138:	d1e7      	bne.n	b810a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b813a:	a801      	add	r0, sp, #4
   b813c:	f7fc feb8 	bl	b4eb0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8140:	4630      	mov	r0, r6
   b8142:	b002      	add	sp, #8
   b8144:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b8146:	4669      	mov	r1, sp
   b8148:	4628      	mov	r0, r5
   b814a:	f7fe ff9e 	bl	b708a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b814e:	e7e8      	b.n	b8122 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b8150 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
   b8150:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8152:	b085      	sub	sp, #20
   b8154:	4605      	mov	r5, r0
    WiringBleLock lk;
   b8156:	a801      	add	r0, sp, #4
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
   b8158:	460c      	mov	r4, r1
   b815a:	4617      	mov	r7, r2
    WiringBleLock lk;
   b815c:	f7fe fac8 	bl	b66f0 <_ZN8particle3ble13WiringBleLockC1Ev>
        capacity_(0) {
   b8160:	2300      	movs	r3, #0
   b8162:	e9c5 3300 	strd	r3, r3, [r5]
   b8166:	60ab      	str	r3, [r5, #8]
      { return _M_ptr; }
   b8168:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
   b816a:	e9d3 4606 	ldrd	r4, r6, [r3, #24]
   b816e:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
    for (const auto& characteristic : impl()->characteristics()) {
   b8172:	42b4      	cmp	r4, r6
   b8174:	d011      	beq.n	b819a <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x4a>
        if (service.impl()->hasCharacteristic(characteristic)) {
   b8176:	6838      	ldr	r0, [r7, #0]
   b8178:	4621      	mov	r1, r4
   b817a:	f7fe fd19 	bl	b6bb0 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>
   b817e:	b150      	cbz	r0, b8196 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x46>
            characteristics.append(characteristic);
   b8180:	4621      	mov	r1, r4
   b8182:	a802      	add	r0, sp, #8
   b8184:	f7fe ff81 	bl	b708a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8188:	a902      	add	r1, sp, #8
   b818a:	4628      	mov	r0, r5
   b818c:	f7ff ffb3 	bl	b80f6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
      ~__shared_ptr() = default;
   b8190:	a803      	add	r0, sp, #12
   b8192:	f7fc fe8d 	bl	b4eb0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    for (const auto& characteristic : impl()->characteristics()) {
   b8196:	3408      	adds	r4, #8
   b8198:	e7eb      	b.n	b8172 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x22>
    WiringBleLock lk;
   b819a:	a801      	add	r0, sp, #4
   b819c:	f7fe fab6 	bl	b670c <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b81a0:	4628      	mov	r0, r5
   b81a2:	b005      	add	sp, #20
   b81a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b81a8 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
   b81a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return servicesDiscovered_;
   b81ac:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   b81ae:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
   b81b0:	b091      	sub	sp, #68	; 0x44
   b81b2:	4606      	mov	r6, r0
   b81b4:	460f      	mov	r7, r1
   b81b6:	4690      	mov	r8, r2
    if (!impl()->servicesDiscovered()) {
   b81b8:	b933      	cbnz	r3, b81c8 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x20>
        capacity_(0) {
   b81ba:	e9c0 3300 	strd	r3, r3, [r0]
   b81be:	6083      	str	r3, [r0, #8]
}
   b81c0:	4630      	mov	r0, r6
   b81c2:	b011      	add	sp, #68	; 0x44
   b81c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      { return _M_ptr; }
   b81c8:	6811      	ldr	r1, [r2, #0]
    if (!service.impl()->characteristicsDiscovered()) {
   b81ca:	7e0d      	ldrb	r5, [r1, #24]
   b81cc:	2d00      	cmp	r5, #0
   b81ce:	d158      	bne.n	b8282 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
        LOG(TRACE, "Start discovering characteristics of service: %s.", service.impl()->UUID().toString().c_str());
   b81d0:	2320      	movs	r3, #32
   b81d2:	462a      	mov	r2, r5
   b81d4:	a803      	add	r0, sp, #12
   b81d6:	e9cd 3508 	strd	r3, r5, [sp, #32]
   b81da:	f7fe fc5d 	bl	b6a98 <_ZNK8particle7BleUuid8toStringEb>
   b81de:	9b03      	ldr	r3, [sp, #12]
   b81e0:	9301      	str	r3, [sp, #4]
   b81e2:	4b2b      	ldr	r3, [pc, #172]	; (b8290 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xe8>)
   b81e4:	492b      	ldr	r1, [pc, #172]	; (b8294 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xec>)
   b81e6:	9300      	str	r3, [sp, #0]
   b81e8:	aa08      	add	r2, sp, #32
   b81ea:	462b      	mov	r3, r5
   b81ec:	2001      	movs	r0, #1
   b81ee:	f7fc fb7f 	bl	b48f0 <log_message>
   b81f2:	a803      	add	r0, sp, #12
   b81f4:	f000 fc04 	bl	b8a00 <_ZN6StringD1Ev>
        halService.size = sizeof(hal_ble_svc_t);
   b81f8:	231c      	movs	r3, #28
   b81fa:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
   b81fe:	f8d8 3000 	ldr.w	r3, [r8]
        halService.start_handle = service.impl()->startHandle();
   b8202:	8a9a      	ldrh	r2, [r3, #20]
   b8204:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
        halService.end_handle = service.impl()->endHandle();
   b8208:	8adb      	ldrh	r3, [r3, #22]
   b820a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
   b820e:	683b      	ldr	r3, [r7, #0]
        CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, peer.impl(), nullptr));
   b8210:	4a21      	ldr	r2, [pc, #132]	; (b8298 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xf0>)
   b8212:	8818      	ldrh	r0, [r3, #0]
   b8214:	9500      	str	r5, [sp, #0]
   b8216:	a908      	add	r1, sp, #32
   b8218:	f7fc fb08 	bl	b482c <hal_ble_gatt_client_discover_characteristics>
   b821c:	2800      	cmp	r0, #0
   b821e:	db30      	blt.n	b8282 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
   b8220:	683b      	ldr	r3, [r7, #0]
    return data_ + size_;
   b8222:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
   b8226:	eb04 09c3 	add.w	r9, r4, r3, lsl #3
   b822a:	3408      	adds	r4, #8
        for (auto& characteristic : peer.impl()->characteristics()) {
   b822c:	f1a4 0308 	sub.w	r3, r4, #8
   b8230:	4599      	cmp	r9, r3
   b8232:	d022      	beq.n	b827a <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xd2>
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
   b8234:	f854 3c08 	ldr.w	r3, [r4, #-8]
   b8238:	89db      	ldrh	r3, [r3, #14]
   b823a:	2b00      	cmp	r3, #0
   b823c:	d0f5      	beq.n	b822a <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                char desc[BLE_MAX_DESC_LEN] = {};
   b823e:	2210      	movs	r2, #16
   b8240:	2100      	movs	r1, #0
   b8242:	eb0d 0002 	add.w	r0, sp, r2
   b8246:	9503      	str	r5, [sp, #12]
   b8248:	f000 fe72 	bl	b8f30 <memset>
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
   b824c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   b8250:	89d9      	ldrh	r1, [r3, #14]
   b8252:	683b      	ldr	r3, [r7, #0]
   b8254:	aa03      	add	r2, sp, #12
   b8256:	8818      	ldrh	r0, [r3, #0]
   b8258:	9500      	str	r5, [sp, #0]
   b825a:	2313      	movs	r3, #19
   b825c:	f7fc faf0 	bl	b4840 <hal_ble_gatt_client_read>
                if (len > 0) {
   b8260:	2800      	cmp	r0, #0
   b8262:	d0e2      	beq.n	b822a <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                    desc[len] = '\0';
   b8264:	ab10      	add	r3, sp, #64	; 0x40
   b8266:	4418      	add	r0, r3
                    characteristic.impl()->description() = desc;
   b8268:	a903      	add	r1, sp, #12
                    desc[len] = '\0';
   b826a:	f800 5c34 	strb.w	r5, [r0, #-52]
        return description_;
   b826e:	f854 0c08 	ldr.w	r0, [r4, #-8]
                    characteristic.impl()->description() = desc;
   b8272:	303c      	adds	r0, #60	; 0x3c
   b8274:	f000 fc65 	bl	b8b42 <_ZN6StringaSEPKc>
        for (auto& characteristic : peer.impl()->characteristics()) {
   b8278:	e7d7      	b.n	b822a <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
   b827a:	f8d8 3000 	ldr.w	r3, [r8]
        characteristicsDiscovered_ = discovered;
   b827e:	2201      	movs	r2, #1
   b8280:	761a      	strb	r2, [r3, #24]
    return characteristics(service);
   b8282:	4642      	mov	r2, r8
   b8284:	4639      	mov	r1, r7
   b8286:	4630      	mov	r0, r6
   b8288:	f7ff ff62 	bl	b8150 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>
   b828c:	e798      	b.n	b81c0 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x18>
   b828e:	bf00      	nop
   b8290:	000b970e 	.word	0x000b970e
   b8294:	000b95eb 	.word	0x000b95eb
   b8298:	000b8441 	.word	0x000b8441

000b829c <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   b829c:	b5f0      	push	{r4, r5, r6, r7, lr}
        return servicesDiscovered_;
   b829e:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   b82a0:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   b82a2:	b085      	sub	sp, #20
   b82a4:	4606      	mov	r6, r0
   b82a6:	460d      	mov	r5, r1
    if (!impl()->servicesDiscovered()) {
   b82a8:	b92b      	cbnz	r3, b82b6 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x1a>
        discoverAllServices();
   b82aa:	a801      	add	r0, sp, #4
   b82ac:	f7ff fe09 	bl	b7ec2 <_ZN8particle13BlePeerDevice19discoverAllServicesEv>
   b82b0:	a801      	add	r0, sp, #4
   b82b2:	f7fe ff13 	bl	b70dc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   b82b6:	682b      	ldr	r3, [r5, #0]
   b82b8:	e9d3 4703 	ldrd	r4, r7, [r3, #12]
   b82bc:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
    for (const auto& service : impl()->services()) {
   b82c0:	42bc      	cmp	r4, r7
   b82c2:	d009      	beq.n	b82d8 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x3c>
        discoverCharacteristicsOfService(service);
   b82c4:	4622      	mov	r2, r4
   b82c6:	4629      	mov	r1, r5
   b82c8:	a801      	add	r0, sp, #4
   b82ca:	f7ff ff6d 	bl	b81a8 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>
   b82ce:	a801      	add	r0, sp, #4
   b82d0:	f7fe ff16 	bl	b7100 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
    for (const auto& service : impl()->services()) {
   b82d4:	3408      	adds	r4, #8
   b82d6:	e7f3      	b.n	b82c0 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x24>
    return characteristics();
   b82d8:	4630      	mov	r0, r6
   b82da:	4629      	mov	r1, r5
   b82dc:	f7ff fefa 	bl	b80d4 <_ZNK8particle13BlePeerDevice15characteristicsEv>
}
   b82e0:	4630      	mov	r0, r6
   b82e2:	b005      	add	sp, #20
   b82e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b82e8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>:
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   b82e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b82ec:	4605      	mov	r5, r0
   b82ee:	b093      	sub	sp, #76	; 0x4c
    return address_;
   b82f0:	6808      	ldr	r0, [r1, #0]
    connCfg.conn_params = params;
   b82f2:	9207      	str	r2, [sp, #28]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   b82f4:	460f      	mov	r7, r1
    return address_;
   b82f6:	6849      	ldr	r1, [r1, #4]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   b82f8:	4698      	mov	r8, r3
    return address_;
   b82fa:	ac0a      	add	r4, sp, #40	; 0x28
    connCfg.version = BLE_API_VERSION;
   b82fc:	4b41      	ldr	r3, [pc, #260]	; (b8404 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x11c>)
   b82fe:	9304      	str	r3, [sp, #16]
    return address_;
   b8300:	c403      	stmia	r4!, {r0, r1}
    connCfg.address = addr.halAddress();
   b8302:	ab05      	add	r3, sp, #20
    hal_ble_conn_cfg_t connCfg = {};
   b8304:	f04f 0900 	mov.w	r9, #0
    connCfg.address = addr.halAddress();
   b8308:	e883 0003 	stmia.w	r3, {r0, r1}
    hal_ble_conn_cfg_t connCfg = {};
   b830c:	e9cd 9908 	strd	r9, r9, [sp, #32]
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
   b8310:	f7fe fd94 	bl	b6e3c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b8314:	4b3c      	ldr	r3, [pc, #240]	; (b8408 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x120>)
   b8316:	9308      	str	r3, [sp, #32]
    connCfg.context = BleLocalDevice::getInstance().impl();
   b8318:	f7fe fd90 	bl	b6e3c <_ZN8particle14BleLocalDevice11getInstanceEv>
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   b831c:	6829      	ldr	r1, [r5, #0]
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b831e:	6803      	ldr	r3, [r0, #0]
    connCfg.context = BleLocalDevice::getInstance().impl();
   b8320:	9309      	str	r3, [sp, #36]	; 0x24
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   b8322:	464a      	mov	r2, r9
   b8324:	a804      	add	r0, sp, #16
   b8326:	f7fc fa95 	bl	b4854 <hal_ble_gap_connect>
    connCfg.address = addr.halAddress();
   b832a:	ae0a      	add	r6, sp, #40	; 0x28
    if (ret != SYSTEM_ERROR_NONE) {
   b832c:	4604      	mov	r4, r0
   b832e:	b138      	cbz	r0, b8340 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x58>
   b8330:	682b      	ldr	r3, [r5, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b8332:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b8336:	801a      	strh	r2, [r3, #0]
}
   b8338:	4620      	mov	r0, r4
   b833a:	b013      	add	sp, #76	; 0x4c
   b833c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bind(addr);
   b8340:	4639      	mov	r1, r7
   b8342:	4628      	mov	r0, r5
   b8344:	f7fe fcfe 	bl	b6d44 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>
        WiringBleLock lk;
   b8348:	a803      	add	r0, sp, #12
   b834a:	f7fe f9d1 	bl	b66f0 <_ZN8particle3ble13WiringBleLockC1Ev>
        if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   b834e:	f7fe fd75 	bl	b6e3c <_ZN8particle14BleLocalDevice11getInstanceEv>
        return peers_;
   b8352:	6807      	ldr	r7, [r0, #0]
   b8354:	4629      	mov	r1, r5
   b8356:	3718      	adds	r7, #24
   b8358:	4630      	mov	r0, r6
   b835a:	f7fe feae 	bl	b70ba <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   b835e:	4631      	mov	r1, r6
   b8360:	4638      	mov	r0, r7
   b8362:	f7ff f9de 	bl	b7722 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b8366:	4607      	mov	r7, r0
      ~__shared_ptr() = default;
   b8368:	a80b      	add	r0, sp, #44	; 0x2c
   b836a:	f7fc fda1 	bl	b4eb0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b836e:	f04f 0920 	mov.w	r9, #32
   b8372:	bb1f      	cbnz	r7, b83bc <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xd4>
            LOG(ERROR, "Cannot add new peer device.");
   b8374:	4632      	mov	r2, r6
   b8376:	4b25      	ldr	r3, [pc, #148]	; (b840c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x124>)
   b8378:	4e25      	ldr	r6, [pc, #148]	; (b8410 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x128>)
   b837a:	4926      	ldr	r1, [pc, #152]	; (b8414 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x12c>)
   b837c:	9300      	str	r3, [sp, #0]
   b837e:	2032      	movs	r0, #50	; 0x32
   b8380:	4623      	mov	r3, r4
   b8382:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
   b8386:	f7fc fab3 	bl	b48f0 <log_message>
   b838a:	6830      	ldr	r0, [r6, #0]
   b838c:	f7fc fa08 	bl	b47a0 <os_mutex_recursive_unlock>
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   b8390:	682b      	ldr	r3, [r5, #0]
        locked_ = false;
   b8392:	f88d 400c 	strb.w	r4, [sp, #12]
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   b8396:	4621      	mov	r1, r4
   b8398:	8818      	ldrh	r0, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
   b839a:	4c1f      	ldr	r4, [pc, #124]	; (b8418 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x130>)
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   b839c:	f7fc fa32 	bl	b4804 <hal_ble_gap_disconnect>
    void lock() { os_mutex_recursive_lock(handle_); }
   b83a0:	6830      	ldr	r0, [r6, #0]
   b83a2:	f7fc f9f5 	bl	b4790 <os_mutex_recursive_lock>
        locked_ = true;
   b83a6:	2301      	movs	r3, #1
   b83a8:	f88d 300c 	strb.w	r3, [sp, #12]
      { return _M_ptr; }
   b83ac:	682b      	ldr	r3, [r5, #0]
            impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b83ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b83b2:	801a      	strh	r2, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
   b83b4:	a803      	add	r0, sp, #12
   b83b6:	f7fe f9a9 	bl	b670c <_ZN8particle3ble13WiringBleLockD1Ev>
   b83ba:	e7bd      	b.n	b8338 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        WiringBleLock lk;
   b83bc:	a803      	add	r0, sp, #12
   b83be:	f7fe f9a5 	bl	b670c <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG(TRACE, "New peripheral is connected.");
   b83c2:	4b16      	ldr	r3, [pc, #88]	; (b841c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x134>)
   b83c4:	9300      	str	r3, [sp, #0]
   b83c6:	4913      	ldr	r1, [pc, #76]	; (b8414 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x12c>)
   b83c8:	4623      	mov	r3, r4
   b83ca:	4632      	mov	r2, r6
   b83cc:	2001      	movs	r0, #1
   b83ce:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
   b83d2:	f7fc fa8d 	bl	b48f0 <log_message>
    if (automatic) {
   b83d6:	f1b8 0f00 	cmp.w	r8, #0
   b83da:	d0ad      	beq.n	b8338 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   b83dc:	4629      	mov	r1, r5
   b83de:	4630      	mov	r0, r6
   b83e0:	f7ff ff5c 	bl	b829c <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>
   b83e4:	e9dd 530a 	ldrd	r5, r3, [sp, #40]	; 0x28
   b83e8:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (auto& characteristic : characteristics) {
   b83ec:	42bd      	cmp	r5, r7
   b83ee:	d005      	beq.n	b83fc <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x114>
            characteristic.subscribe(true);
   b83f0:	4628      	mov	r0, r5
   b83f2:	2101      	movs	r1, #1
   b83f4:	f7fe fc1c 	bl	b6c30 <_ZNK8particle17BleCharacteristic9subscribeEb>
        for (auto& characteristic : characteristics) {
   b83f8:	3508      	adds	r5, #8
   b83fa:	e7f7      	b.n	b83ec <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x104>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   b83fc:	4630      	mov	r0, r6
   b83fe:	f7fe fe7f 	bl	b7100 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b8402:	e799      	b.n	b8338 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
   b8404:	00180003 	.word	0x00180003
   b8408:	000b77d9 	.word	0x000b77d9
   b840c:	000b9740 	.word	0x000b9740
   b8410:	2003e720 	.word	0x2003e720
   b8414:	000b95eb 	.word	0x000b95eb
   b8418:	fffffefc 	.word	0xfffffefc
   b841c:	000b975c 	.word	0x000b975c

000b8420 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>:
BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
   b8420:	b513      	push	{r0, r1, r4, lr}
   b8422:	4604      	mov	r4, r0
   b8424:	e9cd 3200 	strd	r3, r2, [sp]
    BlePeerDevice peer;
   b8428:	f7fe fc58 	bl	b6cdc <_ZN8particle13BlePeerDeviceC1Ev>
    peer.connect(addr, params, automatic);
   b842c:	9b00      	ldr	r3, [sp, #0]
   b842e:	9901      	ldr	r1, [sp, #4]
   b8430:	2200      	movs	r2, #0
   b8432:	4620      	mov	r0, r4
   b8434:	f7ff ff58 	bl	b82e8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>
}
   b8438:	4620      	mov	r0, r4
   b843a:	b002      	add	sp, #8
   b843c:	bd10      	pop	{r4, pc}
	...

000b8440 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv>:
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   b8440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        LOG(TRACE, "Characteristic discovered.");
   b8444:	2320      	movs	r3, #32
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   b8446:	b095      	sub	sp, #84	; 0x54
        LOG(TRACE, "Characteristic discovered.");
   b8448:	2600      	movs	r6, #0
   b844a:	e9cd 360c 	strd	r3, r6, [sp, #48]	; 0x30
   b844e:	4b66      	ldr	r3, [pc, #408]	; (b85e8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a8>)
   b8450:	9300      	str	r3, [sp, #0]
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   b8452:	4605      	mov	r5, r0
   b8454:	460f      	mov	r7, r1
        LOG(TRACE, "Characteristic discovered.");
   b8456:	4633      	mov	r3, r6
   b8458:	4964      	ldr	r1, [pc, #400]	; (b85ec <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>)
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
   b845a:	f8df 9194 	ldr.w	r9, [pc, #404]	; b85f0 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b0>
   b845e:	f8df 818c 	ldr.w	r8, [pc, #396]	; b85ec <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>
                    LOG(ERROR, "Failed to append discovered characteristic.");
   b8462:	f8df a190 	ldr.w	sl, [pc, #400]	; b85f4 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b4>
        LOG(TRACE, "Characteristic discovered.");
   b8466:	aa0c      	add	r2, sp, #48	; 0x30
   b8468:	2001      	movs	r0, #1
   b846a:	f7fc fa41 	bl	b48f0 <log_message>
        for (size_t i = 0; i < event->count; i++) {
   b846e:	682b      	ldr	r3, [r5, #0]
   b8470:	42b3      	cmp	r3, r6
   b8472:	f240 80b5 	bls.w	b85e0 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a0>
            BleCharacteristic characteristic;
   b8476:	a803      	add	r0, sp, #12
   b8478:	f7fe fbc0 	bl	b6bfc <_ZN8particle17BleCharacteristicC1Ev>
            BleService service;
   b847c:	a805      	add	r0, sp, #20
   b847e:	f7fe fc11 	bl	b6ca4 <_ZN8particle10BleServiceC1Ev>
      get() const noexcept
   b8482:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   b8486:	686b      	ldr	r3, [r5, #4]
      { return _M_ptr; }
   b8488:	9a03      	ldr	r2, [sp, #12]
        return attrHandles_;
   b848a:	fb0b fb06 	mul.w	fp, fp, r6
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   b848e:	445b      	add	r3, fp
        this->size = halHandles.size;
   b8490:	8bd9      	ldrh	r1, [r3, #30]
   b8492:	8111      	strh	r1, [r2, #8]
        this->decl_handle = halHandles.decl_handle;
   b8494:	8c19      	ldrh	r1, [r3, #32]
   b8496:	8151      	strh	r1, [r2, #10]
        this->value_handle = halHandles.value_handle;
   b8498:	8c59      	ldrh	r1, [r3, #34]	; 0x22
   b849a:	8191      	strh	r1, [r2, #12]
        this->user_desc_handle = halHandles.user_desc_handle;
   b849c:	8c98      	ldrh	r0, [r3, #36]	; 0x24
   b849e:	81d0      	strh	r0, [r2, #14]
        this->cccd_handle = halHandles.cccd_handle;
   b84a0:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
   b84a2:	8210      	strh	r0, [r2, #16]
        this->sccd_handle = halHandles.sccd_handle;
   b84a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   b84a6:	8253      	strh	r3, [r2, #18]
   b84a8:	e9d7 3203 	ldrd	r3, r2, [r7, #12]
   b84ac:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (const auto& svc : services_) {
   b84b0:	429a      	cmp	r2, r3
   b84b2:	d07d      	beq.n	b85b0 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x170>
   b84b4:	6818      	ldr	r0, [r3, #0]
            if (handles.value_handle <= svc.impl()->endHandle() && handles.value_handle >= svc.impl()->startHandle()) {
   b84b6:	8ac4      	ldrh	r4, [r0, #22]
   b84b8:	428c      	cmp	r4, r1
   b84ba:	d377      	bcc.n	b85ac <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
   b84bc:	8a84      	ldrh	r4, [r0, #20]
   b84be:	428c      	cmp	r4, r1
   b84c0:	d874      	bhi.n	b85ac <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b84c2:	6859      	ldr	r1, [r3, #4]
   b84c4:	9005      	str	r0, [sp, #20]
   b84c6:	a806      	add	r0, sp, #24
   b84c8:	f7fe f8ec 	bl	b66a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
                characteristic.impl()->svcUUID() = service.impl()->UUID();
   b84cc:	f8dd c014 	ldr.w	ip, [sp, #20]
      { return _M_ptr; }
   b84d0:	f8dd e00c 	ldr.w	lr, [sp, #12]
   b84d4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b84d8:	f10e 0428 	add.w	r4, lr, #40	; 0x28
   b84dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b84de:	f8dc 3000 	ldr.w	r3, [ip]
   b84e2:	6023      	str	r3, [r4, #0]
                characteristic.impl()->connHandle() = event->conn_handle;
   b84e4:	892b      	ldrh	r3, [r5, #8]
   b84e6:	f8ae 3002 	strh.w	r3, [lr, #2]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   b84ea:	686b      	ldr	r3, [r5, #4]
   b84ec:	9c03      	ldr	r4, [sp, #12]
   b84ee:	445b      	add	r3, fp
   b84f0:	7e5b      	ldrb	r3, [r3, #25]
   b84f2:	f013 0f02 	tst.w	r3, #2
   b84f6:	d16e      	bne.n	b85d6 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x196>
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE_WO_RESP) {
   b84f8:	686b      	ldr	r3, [r5, #4]
   b84fa:	445b      	add	r3, fp
   b84fc:	7e5b      	ldrb	r3, [r3, #25]
   b84fe:	0758      	lsls	r0, r3, #29
    return EnumFlags<T>(value_ | flags.value_);
}

template<typename T>
inline particle::EnumFlags<T>& particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::operator|=(const EnumFlags<T>& flags) {
    value_ |= flags.value_;
   b8500:	bf42      	ittt	mi
   b8502:	7923      	ldrbmi	r3, [r4, #4]
   b8504:	f043 0304 	orrmi.w	r3, r3, #4
   b8508:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE) {
   b850a:	686b      	ldr	r3, [r5, #4]
   b850c:	445b      	add	r3, fp
   b850e:	7e5b      	ldrb	r3, [r3, #25]
   b8510:	0719      	lsls	r1, r3, #28
   b8512:	bf42      	ittt	mi
   b8514:	7923      	ldrbmi	r3, [r4, #4]
   b8516:	f043 0308 	orrmi.w	r3, r3, #8
   b851a:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_NOTIFY) {
   b851c:	686b      	ldr	r3, [r5, #4]
   b851e:	445b      	add	r3, fp
   b8520:	7e5b      	ldrb	r3, [r3, #25]
   b8522:	06da      	lsls	r2, r3, #27
   b8524:	bf42      	ittt	mi
   b8526:	7923      	ldrbmi	r3, [r4, #4]
   b8528:	f043 0310 	orrmi.w	r3, r3, #16
   b852c:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
   b852e:	686b      	ldr	r3, [r5, #4]
   b8530:	445b      	add	r3, fp
   b8532:	aa07      	add	r2, sp, #28
   b8534:	7e5b      	ldrb	r3, [r3, #25]
   b8536:	069b      	lsls	r3, r3, #26
   b8538:	bf42      	ittt	mi
   b853a:	7923      	ldrbmi	r3, [r4, #4]
   b853c:	f043 0320 	orrmi.w	r3, r3, #32
   b8540:	7123      	strbmi	r3, [r4, #4]
        return charUuid_;
   b8542:	686b      	ldr	r3, [r5, #4]
   b8544:	449b      	add	fp, r3
   b8546:	f10b 0304 	add.w	r3, fp, #4
   b854a:	4696      	mov	lr, r2
   b854c:	f10b 0b14 	add.w	fp, fp, #20
   b8550:	6818      	ldr	r0, [r3, #0]
   b8552:	6859      	ldr	r1, [r3, #4]
   b8554:	4694      	mov	ip, r2
   b8556:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b855a:	3308      	adds	r3, #8
   b855c:	455b      	cmp	r3, fp
   b855e:	4662      	mov	r2, ip
   b8560:	d1f6      	bne.n	b8550 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x110>
   b8562:	6818      	ldr	r0, [r3, #0]
   b8564:	f8cc 0000 	str.w	r0, [ip]
        return *this = BleUuid(uuid);
   b8568:	4671      	mov	r1, lr
   b856a:	a80c      	add	r0, sp, #48	; 0x30
   b856c:	f7fe f9ca 	bl	b6904 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   b8570:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
   b8574:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b8578:	3414      	adds	r4, #20
   b857a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b857c:	f8dc 3000 	ldr.w	r3, [ip]
   b8580:	6023      	str	r3, [r4, #0]
                if (!peerImpl->characteristics().append(characteristic)) {
   b8582:	a903      	add	r1, sp, #12
   b8584:	a80c      	add	r0, sp, #48	; 0x30
   b8586:	f7fe fd80 	bl	b708a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b858a:	a90c      	add	r1, sp, #48	; 0x30
   b858c:	f107 0018 	add.w	r0, r7, #24
   b8590:	f7ff fdb1 	bl	b80f6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b8594:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b8596:	a80d      	add	r0, sp, #52	; 0x34
   b8598:	f7fc fc8a 	bl	b4eb0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b859c:	b99c      	cbnz	r4, b85c6 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x186>
                    LOG(ERROR, "Failed to append discovered characteristic.");
   b859e:	2320      	movs	r3, #32
   b85a0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
   b85a4:	f8cd a000 	str.w	sl, [sp]
   b85a8:	4623      	mov	r3, r4
   b85aa:	e007      	b.n	b85bc <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x17c>
        for (const auto& svc : services_) {
   b85ac:	3308      	adds	r3, #8
   b85ae:	e77f      	b.n	b84b0 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x70>
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
   b85b0:	2420      	movs	r4, #32
   b85b2:	2300      	movs	r3, #0
   b85b4:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
   b85b8:	f8cd 9000 	str.w	r9, [sp]
                    LOG(ERROR, "Failed to append discovered characteristic.");
   b85bc:	aa0c      	add	r2, sp, #48	; 0x30
   b85be:	4641      	mov	r1, r8
   b85c0:	2032      	movs	r0, #50	; 0x32
   b85c2:	f7fc f995 	bl	b48f0 <log_message>
   b85c6:	a806      	add	r0, sp, #24
   b85c8:	f7fc fc72 	bl	b4eb0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b85cc:	a804      	add	r0, sp, #16
   b85ce:	f7fc fc6f 	bl	b4eb0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   b85d2:	3601      	adds	r6, #1
   b85d4:	e74b      	b.n	b846e <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x2e>
   b85d6:	7923      	ldrb	r3, [r4, #4]
   b85d8:	f043 0302 	orr.w	r3, r3, #2
   b85dc:	7123      	strb	r3, [r4, #4]
   b85de:	e78b      	b.n	b84f8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0xb8>
    }
   b85e0:	b015      	add	sp, #84	; 0x54
   b85e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b85e6:	bf00      	nop
   b85e8:	000b9779 	.word	0x000b9779
   b85ec:	000b95eb 	.word	0x000b95eb
   b85f0:	000b9794 	.word	0x000b9794
   b85f4:	000b97c3 	.word	0x000b97c3

000b85f8 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b85f8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b85fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b85fc:	4604      	mov	r4, r0
   b85fe:	460d      	mov	r5, r1
   b8600:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b8602:	d914      	bls.n	b862e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b8604:	4290      	cmp	r0, r2
   b8606:	d213      	bcs.n	b8630 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b8608:	f1a2 0624 	sub.w	r6, r2, #36	; 0x24
            dest += end - p - 1;
   b860c:	1a75      	subs	r5, r6, r1
   b860e:	f1a1 0724 	sub.w	r7, r1, #36	; 0x24
   b8612:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8614:	42b7      	cmp	r7, r6
   b8616:	d018      	beq.n	b864a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b8618:	b11c      	cbz	r4, b8622 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b861a:	4631      	mov	r1, r6
   b861c:	4620      	mov	r0, r4
   b861e:	f7fe ff68 	bl	b74f2 <_ZN8particle13BleScanResultC1EOS0_>
                end->~T();
   b8622:	4630      	mov	r0, r6
   b8624:	f7fe fc74 	bl	b6f10 <_ZN8particle13BleScanResultD1Ev>
            for (; end != p; --end, --dest) {
   b8628:	3e24      	subs	r6, #36	; 0x24
   b862a:	3c24      	subs	r4, #36	; 0x24
   b862c:	e7f2      	b.n	b8614 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b862e:	d00c      	beq.n	b864a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b8630:	42b5      	cmp	r5, r6
   b8632:	d00a      	beq.n	b864a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b8634:	b11c      	cbz	r4, b863e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b8636:	4629      	mov	r1, r5
   b8638:	4620      	mov	r0, r4
   b863a:	f7fe ff5a 	bl	b74f2 <_ZN8particle13BleScanResultC1EOS0_>
                p->~T();
   b863e:	4628      	mov	r0, r5
   b8640:	f7fe fc66 	bl	b6f10 <_ZN8particle13BleScanResultD1Ev>
            for (; p != end; ++p, ++dest) {
   b8644:	3524      	adds	r5, #36	; 0x24
   b8646:	3424      	adds	r4, #36	; 0x24
   b8648:	e7f2      	b.n	b8630 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b864a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b864c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b864c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n > 0) {
   b864e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b8650:	4605      	mov	r5, r0
        if (n > 0) {
   b8652:	dd13      	ble.n	b867c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b8654:	2724      	movs	r7, #36	; 0x24
    return ::malloc(size);
   b8656:	fb07 f006 	mul.w	r0, r7, r6
   b865a:	f7fc f9fd 	bl	b4a58 <malloc>
            if (!d) {
   b865e:	4604      	mov	r4, r0
   b8660:	b158      	cbz	r0, b867a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2e>
            move(d, data_, data_ + size_);
   b8662:	e9d5 1200 	ldrd	r1, r2, [r5]
   b8666:	fb07 1202 	mla	r2, r7, r2, r1
   b866a:	f7ff ffc5 	bl	b85f8 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b866e:	6828      	ldr	r0, [r5, #0]
   b8670:	f7fc f9fa 	bl	b4a68 <free>
        data_ = d;
   b8674:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b8676:	60ae      	str	r6, [r5, #8]
        return true;
   b8678:	2001      	movs	r0, #1
    }
   b867a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        T* d = nullptr;
   b867c:	2400      	movs	r4, #0
   b867e:	e7f6      	b.n	b866e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>

000b8680 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   b8680:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8684:	b09d      	sub	sp, #116	; 0x74
            : rssi_(BLE_RSSI_INVALID) {
   b8686:	ad01      	add	r5, sp, #4
   b8688:	4606      	mov	r6, r0
   b868a:	4628      	mov	r0, r5
   b868c:	460c      	mov	r4, r1
   b868e:	f7fe f8b2 	bl	b67f6 <_ZN8particle10BleAddressC1Ev>
   b8692:	a803      	add	r0, sp, #12
   b8694:	f7ff f808 	bl	b76a8 <_ZN8particle18BleAdvertisingDataC1Ev>
   b8698:	a806      	add	r0, sp, #24
   b869a:	f7ff f805 	bl	b76a8 <_ZN8particle18BleAdvertisingDataC1Ev>
    address_ = addr;
   b869e:	6930      	ldr	r0, [r6, #16]
   b86a0:	6971      	ldr	r1, [r6, #20]
        scanResponse_.set(buf, len);
   b86a2:	89f2      	ldrh	r2, [r6, #14]
   b86a4:	ab13      	add	r3, sp, #76	; 0x4c
   b86a6:	c303      	stmia	r3!, {r0, r1}
    address_ = addr.address_;
   b86a8:	e885 0003 	stmia.w	r5, {r0, r1}
        rssi_ = value;
   b86ac:	7833      	ldrb	r3, [r6, #0]
        scanResponse_.set(buf, len);
   b86ae:	68b1      	ldr	r1, [r6, #8]
        rssi_ = value;
   b86b0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        scanResponse_.set(buf, len);
   b86b4:	a806      	add	r0, sp, #24
   b86b6:	f7fe ff6b 	bl	b7590 <_ZN8particle18BleAdvertisingData3setEPKhj>
        advertisingData_.set(buf, len);
   b86ba:	89b2      	ldrh	r2, [r6, #12]
   b86bc:	6871      	ldr	r1, [r6, #4]
   b86be:	a803      	add	r0, sp, #12
   b86c0:	f7fe ff66 	bl	b7590 <_ZN8particle18BleAdvertisingData3setEPKhj>
        return minRssi_;
   b86c4:	f994 3068 	ldrsb.w	r3, [r4, #104]	; 0x68
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   b86c8:	2b7f      	cmp	r3, #127	; 0x7f
    address_ = addr.address_;
   b86ca:	af13      	add	r7, sp, #76	; 0x4c
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   b86cc:	d003      	beq.n	b86d6 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x56>
   b86ce:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   b86d2:	429a      	cmp	r2, r3
   b86d4:	db5c      	blt.n	b8790 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        return maxRssi_;
   b86d6:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() > filterRssi) {
   b86da:	2b7f      	cmp	r3, #127	; 0x7f
   b86dc:	d003      	beq.n	b86e6 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x66>
   b86de:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   b86e2:	429a      	cmp	r2, r3
   b86e4:	dc54      	bgt.n	b8790 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filerAddresses = filter_.addresses();
   b86e6:	f104 0150 	add.w	r1, r4, #80	; 0x50
   b86ea:	4638      	mov	r0, r7
   b86ec:	f7fe fdf6 	bl	b72dc <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>
    return size_;
   b86f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
        if (filerAddresses.size() > 0) {
   b86f2:	2b00      	cmp	r3, #0
   b86f4:	dd52      	ble.n	b879c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x11c>
    return data_;
   b86f6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    return data_ + size_;
   b86f8:	eb06 09c3 	add.w	r9, r6, r3, lsl #3
            for (const auto& address : filerAddresses) {
   b86fc:	45b1      	cmp	r9, r6
   b86fe:	d050      	beq.n	b87a2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x122>
                if (address == result.address()) {
   b8700:	4630      	mov	r0, r6
   b8702:	4629      	mov	r1, r5
   b8704:	f7fe f863 	bl	b67ce <_ZNK8particle10BleAddresseqERKS0_>
   b8708:	3608      	adds	r6, #8
   b870a:	4680      	mov	r8, r0
   b870c:	2800      	cmp	r0, #0
   b870e:	d0f5      	beq.n	b86fc <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x7c>
    ::free(ptr);
   b8710:	9813      	ldr	r0, [sp, #76]	; 0x4c
   b8712:	f7fc f9a9 	bl	b4a68 <free>
        if (!delegator->filterByRssi(result) ||
   b8716:	f1b8 0f00 	cmp.w	r8, #0
   b871a:	d039      	beq.n	b8790 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByDeviceName(result) ||
   b871c:	4629      	mov	r1, r5
   b871e:	4620      	mov	r0, r4
   b8720:	f7fe fd9f 	bl	b7262 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>
              !delegator->filterByAddress(result) ||
   b8724:	b3a0      	cbz	r0, b8790 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByServiceUUID(result) ||
   b8726:	4629      	mov	r1, r5
   b8728:	4620      	mov	r0, r4
   b872a:	f7ff facf 	bl	b7ccc <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>
              !delegator->filterByDeviceName(result) ||
   b872e:	4606      	mov	r6, r0
   b8730:	b370      	cbz	r0, b8790 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filterAppearances = filter_.appearances();
   b8732:	f104 015c 	add.w	r1, r4, #92	; 0x5c
   b8736:	4638      	mov	r0, r7
   b8738:	f7fe fe1b 	bl	b7372 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterAppearances.size() > 0) {
   b873c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b873e:	2b00      	cmp	r3, #0
   b8740:	dd12      	ble.n	b8768 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
            ble_sig_appearance_t srAppearance = result.scanResponse().appearance();
   b8742:	a806      	add	r0, sp, #24
   b8744:	f7fe fa08 	bl	b6b58 <_ZNK8particle18BleAdvertisingData10appearanceEv>
   b8748:	4680      	mov	r8, r0
            ble_sig_appearance_t advAppearance = result.advertisingData().appearance();
   b874a:	a803      	add	r0, sp, #12
   b874c:	f7fe fa04 	bl	b6b58 <_ZNK8particle18BleAdvertisingData10appearanceEv>
    return data_ + size_;
   b8750:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
   b8754:	eb03 0242 	add.w	r2, r3, r2, lsl #1
            for (const auto& appearance : filterAppearances) {
   b8758:	429a      	cmp	r2, r3
   b875a:	d025      	beq.n	b87a8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x128>
                if (appearance == srAppearance || appearance == advAppearance) {
   b875c:	f833 1b02 	ldrh.w	r1, [r3], #2
   b8760:	4588      	cmp	r8, r1
   b8762:	d001      	beq.n	b8768 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
   b8764:	4288      	cmp	r0, r1
   b8766:	d1f7      	bne.n	b8758 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd8>
    ::free(ptr);
   b8768:	9813      	ldr	r0, [sp, #76]	; 0x4c
   b876a:	f7fc f97d 	bl	b4a68 <free>
              !delegator->filterByServiceUUID(result) ||
   b876e:	b17e      	cbz	r6, b8790 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByCustomData(result)) {
   b8770:	4629      	mov	r1, r5
   b8772:	4620      	mov	r0, r4
   b8774:	f7fe fe32 	bl	b73dc <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>
              !delegator->filterByAppearance(result) ||
   b8778:	b150      	cbz	r0, b8790 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        if (delegator->scanResultCallback_) {
   b877a:	6a23      	ldr	r3, [r4, #32]
   b877c:	b1b3      	cbz	r3, b87ac <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x12c>
            delegator->foundCount_++;
   b877e:	6963      	ldr	r3, [r4, #20]
   b8780:	9513      	str	r5, [sp, #76]	; 0x4c
   b8782:	3301      	adds	r3, #1
   b8784:	6163      	str	r3, [r4, #20]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8786:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b8788:	4639      	mov	r1, r7
   b878a:	f104 0018 	add.w	r0, r4, #24
   b878e:	4798      	blx	r3
            return;
   b8790:	4628      	mov	r0, r5
   b8792:	f7fe fbbd 	bl	b6f10 <_ZN8particle13BleScanResultD1Ev>
    }
   b8796:	b01d      	add	sp, #116	; 0x74
   b8798:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return true;
   b879c:	f04f 0801 	mov.w	r8, #1
   b87a0:	e7b6      	b.n	b8710 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   b87a2:	f04f 0800 	mov.w	r8, #0
   b87a6:	e7b3      	b.n	b8710 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   b87a8:	2600      	movs	r6, #0
   b87aa:	e7dd      	b.n	b8768 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
        } else if (delegator->scanResultCallbackRef_) {
   b87ac:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
   b87b0:	f1b8 0f00 	cmp.w	r8, #0
   b87b4:	d007      	beq.n	b87c6 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x146>
            delegator->foundCount_++;
   b87b6:	6963      	ldr	r3, [r4, #20]
   b87b8:	3301      	adds	r3, #1
   b87ba:	6163      	str	r3, [r4, #20]
   b87bc:	4629      	mov	r1, r5
   b87be:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b87c0:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b87c4:	e7e3      	b.n	b878e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x10e>
        if (delegator->resultsPtr_) {
   b87c6:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   b87ca:	f1bc 0f00 	cmp.w	ip, #0
   b87ce:	d025      	beq.n	b881c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x19c>
            delegator->foundCount_++;
   b87d0:	6963      	ldr	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   b87d2:	6922      	ldr	r2, [r4, #16]
            delegator->foundCount_++;
   b87d4:	3301      	adds	r3, #1
            if (delegator->foundCount_ <= delegator->targetCount_) {
   b87d6:	4293      	cmp	r3, r2
            delegator->foundCount_++;
   b87d8:	6163      	str	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   b87da:	d8d9      	bhi.n	b8790 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   b87dc:	2224      	movs	r2, #36	; 0x24
   b87de:	4353      	muls	r3, r2
    address_ = addr.address_;
   b87e0:	462a      	mov	r2, r5
   b87e2:	ca03      	ldmia	r2!, {r0, r1}
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   b87e4:	3b24      	subs	r3, #36	; 0x24
   b87e6:	eb0c 0603 	add.w	r6, ip, r3
    address_ = addr.address_;
   b87ea:	f84c 0003 	str.w	r0, [ip, r3]
   b87ee:	6071      	str	r1, [r6, #4]
class BleScanResult {
   b87f0:	f106 0008 	add.w	r0, r6, #8
   b87f4:	a903      	add	r1, sp, #12
   b87f6:	f7fe fe93 	bl	b7520 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   b87fa:	a906      	add	r1, sp, #24
   b87fc:	f106 0014 	add.w	r0, r6, #20
   b8800:	f7fe fe8e 	bl	b7520 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   b8804:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
   b8808:	f886 3020 	strb.w	r3, [r6, #32]
                if (delegator->foundCount_ >= delegator->targetCount_) {
   b880c:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   b8810:	429a      	cmp	r2, r3
   b8812:	d3bd      	bcc.n	b8790 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                    hal_ble_gap_stop_scan(nullptr);
   b8814:	4640      	mov	r0, r8
   b8816:	f7fb ffeb 	bl	b47f0 <hal_ble_gap_stop_scan>
   b881a:	e7b9      	b.n	b8790 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    address_ = addr.address_;
   b881c:	e895 0003 	ldmia.w	r5, {r0, r1}
   b8820:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   b8824:	e888 0003 	stmia.w	r8, {r0, r1}
class BleAdvertisingData {
   b8828:	a903      	add	r1, sp, #12
   b882a:	a80c      	add	r0, sp, #48	; 0x30
   b882c:	f7fc fc52 	bl	b50d4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   b8830:	a906      	add	r1, sp, #24
   b8832:	a80f      	add	r0, sp, #60	; 0x3c
   b8834:	f7fc fc4e 	bl	b50d4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   b8838:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b883c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    return insert(size_, std::move(value));
   b8840:	4641      	mov	r1, r8
   b8842:	4638      	mov	r0, r7
   b8844:	6866      	ldr	r6, [r4, #4]
   b8846:	f7fe fe54 	bl	b74f2 <_ZN8particle13BleScanResultC1EOS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b884a:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b884e:	4299      	cmp	r1, r3
   b8850:	da10      	bge.n	b8874 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1f4>
    T* const p = data_ + i;
   b8852:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b8854:	6861      	ldr	r1, [r4, #4]
    T* const p = data_ + i;
   b8856:	2224      	movs	r2, #36	; 0x24
   b8858:	fb02 3606 	mla	r6, r2, r6, r3
    move(p + 1, p, data_ + size_);
   b885c:	f106 0024 	add.w	r0, r6, #36	; 0x24
   b8860:	fb02 3201 	mla	r2, r2, r1, r3
   b8864:	4631      	mov	r1, r6
   b8866:	f7ff fec7 	bl	b85f8 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b886a:	b986      	cbnz	r6, b888e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x20e>
    ++size_;
   b886c:	6863      	ldr	r3, [r4, #4]
   b886e:	3301      	adds	r3, #1
   b8870:	6063      	str	r3, [r4, #4]
    return true;
   b8872:	e005      	b.n	b8880 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x200>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8874:	3101      	adds	r1, #1
   b8876:	4620      	mov	r0, r4
   b8878:	f7ff fee8 	bl	b864c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b887c:	2800      	cmp	r0, #0
   b887e:	d1e8      	bne.n	b8852 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1d2>
    return insert(size_, std::move(value));
   b8880:	4638      	mov	r0, r7
   b8882:	f7fe fb45 	bl	b6f10 <_ZN8particle13BleScanResultD1Ev>
        delegator->resultsVector_.append(result);
   b8886:	4640      	mov	r0, r8
   b8888:	f7fe fb42 	bl	b6f10 <_ZN8particle13BleScanResultD1Ev>
   b888c:	e780      	b.n	b8790 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    new(p) T(std::move(value));
   b888e:	4639      	mov	r1, r7
   b8890:	4630      	mov	r0, r6
   b8892:	f7fe fe2e 	bl	b74f2 <_ZN8particle13BleScanResultC1EOS0_>
   b8896:	e7e9      	b.n	b886c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1ec>

000b8898 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b8898:	4802      	ldr	r0, [pc, #8]	; (b88a4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b889a:	2300      	movs	r3, #0
   b889c:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b889e:	f7fb bf67 	b.w	b4770 <os_mutex_recursive_create>
   b88a2:	bf00      	nop
   b88a4:	2003e720 	.word	0x2003e720

000b88a8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b88a8:	4770      	bx	lr

000b88aa <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b88aa:	7441      	strb	r1, [r0, #17]
}
   b88ac:	4770      	bx	lr

000b88ae <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b88ae:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b88b0:	7c00      	ldrb	r0, [r0, #16]
   b88b2:	f7fb ff3d 	bl	b4730 <hal_usart_available_data_for_write>
}
   b88b6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b88ba:	bd08      	pop	{r3, pc}

000b88bc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b88bc:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b88be:	7c00      	ldrb	r0, [r0, #16]
   b88c0:	f7fb ff16 	bl	b46f0 <hal_usart_available>
}
   b88c4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b88c8:	bd08      	pop	{r3, pc}

000b88ca <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b88ca:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b88cc:	7c00      	ldrb	r0, [r0, #16]
   b88ce:	f7fb ff1f 	bl	b4710 <hal_usart_peek>
}
   b88d2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b88d6:	bd08      	pop	{r3, pc}

000b88d8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b88d8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b88da:	7c00      	ldrb	r0, [r0, #16]
   b88dc:	f7fb ff10 	bl	b4700 <hal_usart_read>
}
   b88e0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b88e4:	bd08      	pop	{r3, pc}

000b88e6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b88e6:	7c00      	ldrb	r0, [r0, #16]
   b88e8:	f7fb bf1a 	b.w	b4720 <hal_usart_flush>

000b88ec <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b88ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b88ee:	7c45      	ldrb	r5, [r0, #17]
{
   b88f0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b88f2:	b12d      	cbz	r5, b8900 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b88f4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b88f6:	b003      	add	sp, #12
   b88f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b88fc:	f7fb bef0 	b.w	b46e0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8900:	7c00      	ldrb	r0, [r0, #16]
   b8902:	9101      	str	r1, [sp, #4]
   b8904:	f7fb ff14 	bl	b4730 <hal_usart_available_data_for_write>
   b8908:	2800      	cmp	r0, #0
   b890a:	9901      	ldr	r1, [sp, #4]
   b890c:	dcf2      	bgt.n	b88f4 <_ZN11USARTSerial5writeEh+0x8>
}
   b890e:	4628      	mov	r0, r5
   b8910:	b003      	add	sp, #12
   b8912:	bd30      	pop	{r4, r5, pc}

000b8914 <_ZN11USARTSerialD0Ev>:
   b8914:	b510      	push	{r4, lr}
   b8916:	2114      	movs	r1, #20
   b8918:	4604      	mov	r4, r0
   b891a:	f7fb fbbe 	bl	b409a <_ZdlPvj>
   b891e:	4620      	mov	r0, r4
   b8920:	bd10      	pop	{r4, pc}
	...

000b8924 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b8924:	b510      	push	{r4, lr}
   b8926:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b892a:	4604      	mov	r4, r0
   b892c:	4608      	mov	r0, r1
   b892e:	4611      	mov	r1, r2
   b8930:	2200      	movs	r2, #0
   b8932:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b8936:	4b04      	ldr	r3, [pc, #16]	; (b8948 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b8938:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b893a:	2301      	movs	r3, #1
  _serial = serial;
   b893c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b893e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b8940:	f7fb ff06 	bl	b4750 <hal_usart_init_ex>
}
   b8944:	4620      	mov	r0, r4
   b8946:	bd10      	pop	{r4, pc}
   b8948:	000b9864 	.word	0x000b9864

000b894c <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b894c:	7c00      	ldrb	r0, [r0, #16]
   b894e:	2300      	movs	r3, #0
   b8950:	f7fb bef6 	b.w	b4740 <hal_usart_begin_config>

000b8954 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b8954:	2200      	movs	r2, #0
   b8956:	f7ff bff9 	b.w	b894c <_ZN11USARTSerial5beginEmm>

000b895a <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   b895a:	7c00      	ldrb	r0, [r0, #16]
   b895c:	f7fb beb8 	b.w	b46d0 <hal_usart_end>

000b8960 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b8960:	4b05      	ldr	r3, [pc, #20]	; (b8978 <_GLOBAL__sub_I_System+0x18>)
   b8962:	2202      	movs	r2, #2
   b8964:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b8966:	4b05      	ldr	r3, [pc, #20]	; (b897c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b8968:	4a05      	ldr	r2, [pc, #20]	; (b8980 <_GLOBAL__sub_I_System+0x20>)
   b896a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b896c:	2000      	movs	r0, #0
   b896e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b8972:	f7fc b845 	b.w	b4a00 <set_system_mode>
   b8976:	bf00      	nop
   b8978:	2003e734 	.word	0x2003e734
   b897c:	2003e728 	.word	0x2003e728
   b8980:	ffff0000 	.word	0xffff0000

000b8984 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b8984:	2200      	movs	r2, #0
   b8986:	6840      	ldr	r0, [r0, #4]
   b8988:	4611      	mov	r1, r2
   b898a:	f7fc b811 	b.w	b49b0 <network_listening>

000b898e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b898e:	2200      	movs	r2, #0
   b8990:	6840      	ldr	r0, [r0, #4]
   b8992:	4611      	mov	r1, r2
   b8994:	f7fc b81c 	b.w	b49d0 <network_get_listen_timeout>

000b8998 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b8998:	6840      	ldr	r0, [r0, #4]
   b899a:	2200      	movs	r2, #0
   b899c:	f7fc b810 	b.w	b49c0 <network_set_listen_timeout>

000b89a0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b89a0:	6840      	ldr	r0, [r0, #4]
   b89a2:	2200      	movs	r2, #0
   b89a4:	f081 0101 	eor.w	r1, r1, #1
   b89a8:	f7fb bffa 	b.w	b49a0 <network_listen>

000b89ac <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b89ac:	2300      	movs	r3, #0
   b89ae:	6840      	ldr	r0, [r0, #4]
   b89b0:	461a      	mov	r2, r3
   b89b2:	4619      	mov	r1, r3
   b89b4:	f7fb bfec 	b.w	b4990 <network_off>

000b89b8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b89b8:	2300      	movs	r3, #0
   b89ba:	6840      	ldr	r0, [r0, #4]
   b89bc:	461a      	mov	r2, r3
   b89be:	4619      	mov	r1, r3
   b89c0:	f7fb bfde 	b.w	b4980 <network_on>

000b89c4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b89c4:	2200      	movs	r2, #0
   b89c6:	6840      	ldr	r0, [r0, #4]
   b89c8:	4611      	mov	r1, r2
   b89ca:	f7fb bfd1 	b.w	b4970 <network_ready>

000b89ce <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b89ce:	2200      	movs	r2, #0
   b89d0:	6840      	ldr	r0, [r0, #4]
   b89d2:	4611      	mov	r1, r2
   b89d4:	f7fb bfbc 	b.w	b4950 <network_connecting>

000b89d8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b89d8:	6840      	ldr	r0, [r0, #4]
   b89da:	2200      	movs	r2, #0
   b89dc:	2102      	movs	r1, #2
   b89de:	f7fb bfbf 	b.w	b4960 <network_disconnect>

000b89e2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b89e2:	2300      	movs	r3, #0
   b89e4:	6840      	ldr	r0, [r0, #4]
   b89e6:	461a      	mov	r2, r3
   b89e8:	f7fb bfaa 	b.w	b4940 <network_connect>

000b89ec <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b89ec:	4b02      	ldr	r3, [pc, #8]	; (b89f8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b89ee:	2203      	movs	r2, #3
   b89f0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b89f2:	4a02      	ldr	r2, [pc, #8]	; (b89fc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b89f4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b89f6:	4770      	bx	lr
   b89f8:	2003e738 	.word	0x2003e738
   b89fc:	000b9894 	.word	0x000b9894

000b8a00 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b8a00:	b510      	push	{r4, lr}
   b8a02:	4604      	mov	r4, r0
{
	free(buffer);
   b8a04:	6800      	ldr	r0, [r0, #0]
   b8a06:	f7fc f82f 	bl	b4a68 <free>
}
   b8a0a:	4620      	mov	r0, r4
   b8a0c:	bd10      	pop	{r4, pc}

000b8a0e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b8a0e:	b510      	push	{r4, lr}
   b8a10:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b8a12:	6800      	ldr	r0, [r0, #0]
   b8a14:	b108      	cbz	r0, b8a1a <_ZN6String10invalidateEv+0xc>
   b8a16:	f7fc f827 	bl	b4a68 <free>
	buffer = NULL;
   b8a1a:	2300      	movs	r3, #0
	capacity = len = 0;
   b8a1c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b8a20:	6023      	str	r3, [r4, #0]
}
   b8a22:	bd10      	pop	{r4, pc}

000b8a24 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b8a24:	b538      	push	{r3, r4, r5, lr}
   b8a26:	4604      	mov	r4, r0
   b8a28:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b8a2a:	6800      	ldr	r0, [r0, #0]
   b8a2c:	3101      	adds	r1, #1
   b8a2e:	f7fc f823 	bl	b4a78 <realloc>
	if (newbuffer) {
   b8a32:	b110      	cbz	r0, b8a3a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b8a34:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b8a38:	2001      	movs	r0, #1
	}
	return 0;
}
   b8a3a:	bd38      	pop	{r3, r4, r5, pc}

000b8a3c <_ZN6String7reserveEj>:
{
   b8a3c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b8a3e:	6803      	ldr	r3, [r0, #0]
{
   b8a40:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b8a42:	b123      	cbz	r3, b8a4e <_ZN6String7reserveEj+0x12>
   b8a44:	6843      	ldr	r3, [r0, #4]
   b8a46:	428b      	cmp	r3, r1
   b8a48:	d301      	bcc.n	b8a4e <_ZN6String7reserveEj+0x12>
   b8a4a:	2001      	movs	r0, #1
}
   b8a4c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b8a4e:	4620      	mov	r0, r4
   b8a50:	f7ff ffe8 	bl	b8a24 <_ZN6String12changeBufferEj>
   b8a54:	2800      	cmp	r0, #0
   b8a56:	d0f9      	beq.n	b8a4c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b8a58:	68a3      	ldr	r3, [r4, #8]
   b8a5a:	2b00      	cmp	r3, #0
   b8a5c:	d1f5      	bne.n	b8a4a <_ZN6String7reserveEj+0xe>
   b8a5e:	6822      	ldr	r2, [r4, #0]
   b8a60:	7013      	strb	r3, [r2, #0]
   b8a62:	e7f2      	b.n	b8a4a <_ZN6String7reserveEj+0xe>

000b8a64 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b8a64:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8a66:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b8a68:	4611      	mov	r1, r2
   b8a6a:	9201      	str	r2, [sp, #4]
{
   b8a6c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b8a6e:	f7ff ffe5 	bl	b8a3c <_ZN6String7reserveEj>
   b8a72:	9a01      	ldr	r2, [sp, #4]
   b8a74:	b928      	cbnz	r0, b8a82 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b8a76:	4620      	mov	r0, r4
   b8a78:	f7ff ffc9 	bl	b8a0e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b8a7c:	4620      	mov	r0, r4
   b8a7e:	b003      	add	sp, #12
   b8a80:	bd30      	pop	{r4, r5, pc}
	len = length;
   b8a82:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b8a84:	4629      	mov	r1, r5
   b8a86:	6820      	ldr	r0, [r4, #0]
   b8a88:	f000 fa2a 	bl	b8ee0 <memcpy>
	buffer[len] = 0;
   b8a8c:	6822      	ldr	r2, [r4, #0]
   b8a8e:	68a3      	ldr	r3, [r4, #8]
   b8a90:	2100      	movs	r1, #0
   b8a92:	54d1      	strb	r1, [r2, r3]
	return *this;
   b8a94:	e7f2      	b.n	b8a7c <_ZN6String4copyEPKcj+0x18>

000b8a96 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b8a96:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b8a98:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b8a9a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b8a9e:	4604      	mov	r4, r0
	len = 0;
   b8aa0:	6083      	str	r3, [r0, #8]
	flags = 0;
   b8aa2:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b8aa4:	b141      	cbz	r1, b8ab8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b8aa6:	4608      	mov	r0, r1
   b8aa8:	9101      	str	r1, [sp, #4]
   b8aaa:	f000 faa0 	bl	b8fee <strlen>
   b8aae:	9901      	ldr	r1, [sp, #4]
   b8ab0:	4602      	mov	r2, r0
   b8ab2:	4620      	mov	r0, r4
   b8ab4:	f7ff ffd6 	bl	b8a64 <_ZN6String4copyEPKcj>
}
   b8ab8:	4620      	mov	r0, r4
   b8aba:	b002      	add	sp, #8
   b8abc:	bd10      	pop	{r4, pc}

000b8abe <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b8abe:	b538      	push	{r3, r4, r5, lr}
   b8ac0:	4605      	mov	r5, r0
	if (buffer) {
   b8ac2:	6800      	ldr	r0, [r0, #0]
{
   b8ac4:	460c      	mov	r4, r1
	if (buffer) {
   b8ac6:	b168      	cbz	r0, b8ae4 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b8ac8:	686a      	ldr	r2, [r5, #4]
   b8aca:	688b      	ldr	r3, [r1, #8]
   b8acc:	429a      	cmp	r2, r3
   b8ace:	d307      	bcc.n	b8ae0 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b8ad0:	6809      	ldr	r1, [r1, #0]
   b8ad2:	f000 fa84 	bl	b8fde <strcpy>
			len = rhs.len;
   b8ad6:	68a3      	ldr	r3, [r4, #8]
   b8ad8:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b8ada:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b8adc:	60a3      	str	r3, [r4, #8]
}
   b8ade:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b8ae0:	f7fb ffc2 	bl	b4a68 <free>
	buffer = rhs.buffer;
   b8ae4:	6823      	ldr	r3, [r4, #0]
   b8ae6:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b8ae8:	6863      	ldr	r3, [r4, #4]
   b8aea:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b8aec:	68a3      	ldr	r3, [r4, #8]
   b8aee:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b8af0:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b8af2:	e9c4 3300 	strd	r3, r3, [r4]
   b8af6:	e7f1      	b.n	b8adc <_ZN6String4moveERS_+0x1e>

000b8af8 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b8af8:	b510      	push	{r4, lr}
	buffer = NULL;
   b8afa:	2300      	movs	r3, #0
	capacity = 0;
   b8afc:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b8b00:	4604      	mov	r4, r0
	len = 0;
   b8b02:	6083      	str	r3, [r0, #8]
	flags = 0;
   b8b04:	7303      	strb	r3, [r0, #12]
	move(rval);
   b8b06:	f7ff ffda 	bl	b8abe <_ZN6String4moveERS_>
}
   b8b0a:	4620      	mov	r0, r4
   b8b0c:	bd10      	pop	{r4, pc}

000b8b0e <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b8b0e:	4288      	cmp	r0, r1
{
   b8b10:	b510      	push	{r4, lr}
   b8b12:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b8b14:	d005      	beq.n	b8b22 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b8b16:	680b      	ldr	r3, [r1, #0]
   b8b18:	b12b      	cbz	r3, b8b26 <_ZN6StringaSERKS_+0x18>
   b8b1a:	688a      	ldr	r2, [r1, #8]
   b8b1c:	4619      	mov	r1, r3
   b8b1e:	f7ff ffa1 	bl	b8a64 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b8b22:	4620      	mov	r0, r4
   b8b24:	bd10      	pop	{r4, pc}
	else invalidate();
   b8b26:	f7ff ff72 	bl	b8a0e <_ZN6String10invalidateEv>
   b8b2a:	e7fa      	b.n	b8b22 <_ZN6StringaSERKS_+0x14>

000b8b2c <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b8b2c:	b510      	push	{r4, lr}
	buffer = NULL;
   b8b2e:	2300      	movs	r3, #0
String::String(const String &value)
   b8b30:	4604      	mov	r4, r0
	capacity = 0;
   b8b32:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b8b36:	6083      	str	r3, [r0, #8]
	flags = 0;
   b8b38:	7303      	strb	r3, [r0, #12]
	*this = value;
   b8b3a:	f7ff ffe8 	bl	b8b0e <_ZN6StringaSERKS_>
}
   b8b3e:	4620      	mov	r0, r4
   b8b40:	bd10      	pop	{r4, pc}

000b8b42 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b8b42:	b513      	push	{r0, r1, r4, lr}
   b8b44:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b8b46:	b159      	cbz	r1, b8b60 <_ZN6StringaSEPKc+0x1e>
   b8b48:	4608      	mov	r0, r1
   b8b4a:	9101      	str	r1, [sp, #4]
   b8b4c:	f000 fa4f 	bl	b8fee <strlen>
   b8b50:	9901      	ldr	r1, [sp, #4]
   b8b52:	4602      	mov	r2, r0
   b8b54:	4620      	mov	r0, r4
   b8b56:	f7ff ff85 	bl	b8a64 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b8b5a:	4620      	mov	r0, r4
   b8b5c:	b002      	add	sp, #8
   b8b5e:	bd10      	pop	{r4, pc}
	else invalidate();
   b8b60:	f7ff ff55 	bl	b8a0e <_ZN6String10invalidateEv>
   b8b64:	e7f9      	b.n	b8b5a <_ZN6StringaSEPKc+0x18>

000b8b66 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b8b66:	b570      	push	{r4, r5, r6, lr}
   b8b68:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b8b6a:	460e      	mov	r6, r1
   b8b6c:	b909      	cbnz	r1, b8b72 <_ZN6String6concatEPKcj+0xc>
   b8b6e:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b8b70:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b8b72:	b16a      	cbz	r2, b8b90 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b8b74:	6884      	ldr	r4, [r0, #8]
   b8b76:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b8b78:	4621      	mov	r1, r4
   b8b7a:	f7ff ff5f 	bl	b8a3c <_ZN6String7reserveEj>
   b8b7e:	2800      	cmp	r0, #0
   b8b80:	d0f5      	beq.n	b8b6e <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b8b82:	6828      	ldr	r0, [r5, #0]
   b8b84:	68ab      	ldr	r3, [r5, #8]
   b8b86:	4631      	mov	r1, r6
   b8b88:	4418      	add	r0, r3
   b8b8a:	f000 fa28 	bl	b8fde <strcpy>
	len = newlen;
   b8b8e:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b8b90:	2001      	movs	r0, #1
   b8b92:	e7ed      	b.n	b8b70 <_ZN6String6concatEPKcj+0xa>

000b8b94 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b8b94:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b8b96:	2300      	movs	r3, #0
	buf[0] = c;
   b8b98:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b8b9c:	2201      	movs	r2, #1
   b8b9e:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b8ba0:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b8ba4:	f7ff ffdf 	bl	b8b66 <_ZN6String6concatEPKcj>
}
   b8ba8:	b003      	add	sp, #12
   b8baa:	f85d fb04 	ldr.w	pc, [sp], #4

000b8bae <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   b8bae:	6802      	ldr	r2, [r0, #0]
{
   b8bb0:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
   b8bb2:	6809      	ldr	r1, [r1, #0]
   b8bb4:	b162      	cbz	r2, b8bd0 <_ZNK6String9compareToERKS_+0x22>
   b8bb6:	b941      	cbnz	r1, b8bca <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   b8bb8:	6880      	ldr	r0, [r0, #8]
   b8bba:	b160      	cbz	r0, b8bd6 <_ZNK6String9compareToERKS_+0x28>
   b8bbc:	7810      	ldrb	r0, [r2, #0]
   b8bbe:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b8bc0:	6898      	ldr	r0, [r3, #8]
   b8bc2:	b140      	cbz	r0, b8bd6 <_ZNK6String9compareToERKS_+0x28>
   b8bc4:	7809      	ldrb	r1, [r1, #0]
   b8bc6:	4248      	negs	r0, r1
   b8bc8:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   b8bca:	4610      	mov	r0, r2
   b8bcc:	f000 b9fd 	b.w	b8fca <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b8bd0:	2900      	cmp	r1, #0
   b8bd2:	d1f5      	bne.n	b8bc0 <_ZNK6String9compareToERKS_+0x12>
		return 0;
   b8bd4:	4608      	mov	r0, r1
}
   b8bd6:	4770      	bx	lr

000b8bd8 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   b8bd8:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   b8bda:	6882      	ldr	r2, [r0, #8]
   b8bdc:	688b      	ldr	r3, [r1, #8]
   b8bde:	429a      	cmp	r2, r3
   b8be0:	d105      	bne.n	b8bee <_ZNK6String6equalsERKS_+0x16>
   b8be2:	f7ff ffe4 	bl	b8bae <_ZNK6String9compareToERKS_>
   b8be6:	fab0 f080 	clz	r0, r0
   b8bea:	0940      	lsrs	r0, r0, #5
}
   b8bec:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   b8bee:	2000      	movs	r0, #0
   b8bf0:	e7fc      	b.n	b8bec <_ZNK6String6equalsERKS_+0x14>

000b8bf2 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8bf2:	4770      	bx	lr

000b8bf4 <_Z20acquireSerial1Bufferv>:
{
   b8bf4:	b538      	push	{r3, r4, r5, lr}
   b8bf6:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b8bf8:	2514      	movs	r5, #20
   b8bfa:	462a      	mov	r2, r5
   b8bfc:	2100      	movs	r1, #0
   b8bfe:	f000 f997 	bl	b8f30 <memset>
   b8c02:	8025      	strh	r5, [r4, #0]
   b8c04:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8c06:	4907      	ldr	r1, [pc, #28]	; (b8c24 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b8c08:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8c0a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b8c0c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8c0e:	f000 f831 	bl	b8c74 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8c12:	4904      	ldr	r1, [pc, #16]	; (b8c24 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b8c14:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8c16:	4628      	mov	r0, r5
   b8c18:	f000 f82c 	bl	b8c74 <_ZnajRKSt9nothrow_t>
    };
   b8c1c:	60e0      	str	r0, [r4, #12]
}
   b8c1e:	4620      	mov	r0, r4
   b8c20:	bd38      	pop	{r3, r4, r5, pc}
   b8c22:	bf00      	nop
   b8c24:	000b98c8 	.word	0x000b98c8

000b8c28 <_Z22__fetch_global_Serial1v>:
{
   b8c28:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8c2a:	4d0e      	ldr	r5, [pc, #56]	; (b8c64 <_Z22__fetch_global_Serial1v+0x3c>)
   b8c2c:	7829      	ldrb	r1, [r5, #0]
   b8c2e:	f3bf 8f5b 	dmb	ish
   b8c32:	f011 0401 	ands.w	r4, r1, #1
{
   b8c36:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8c38:	d111      	bne.n	b8c5e <_Z22__fetch_global_Serial1v+0x36>
   b8c3a:	4628      	mov	r0, r5
   b8c3c:	f7fb fa3c 	bl	b40b8 <__cxa_guard_acquire>
   b8c40:	b168      	cbz	r0, b8c5e <_Z22__fetch_global_Serial1v+0x36>
   b8c42:	a801      	add	r0, sp, #4
   b8c44:	f7ff ffd6 	bl	b8bf4 <_Z20acquireSerial1Bufferv>
   b8c48:	aa01      	add	r2, sp, #4
   b8c4a:	4621      	mov	r1, r4
   b8c4c:	4806      	ldr	r0, [pc, #24]	; (b8c68 <_Z22__fetch_global_Serial1v+0x40>)
   b8c4e:	f7ff fe69 	bl	b8924 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b8c52:	4628      	mov	r0, r5
   b8c54:	f7fb fa35 	bl	b40c2 <__cxa_guard_release>
   b8c58:	4804      	ldr	r0, [pc, #16]	; (b8c6c <_Z22__fetch_global_Serial1v+0x44>)
   b8c5a:	f000 f923 	bl	b8ea4 <atexit>
    return serial1;
}
   b8c5e:	4802      	ldr	r0, [pc, #8]	; (b8c68 <_Z22__fetch_global_Serial1v+0x40>)
   b8c60:	b007      	add	sp, #28
   b8c62:	bd30      	pop	{r4, r5, pc}
   b8c64:	2003e744 	.word	0x2003e744
   b8c68:	2003e748 	.word	0x2003e748
   b8c6c:	000b8bf3 	.word	0x000b8bf3

000b8c70 <_ZnwjRKSt9nothrow_t>:
   b8c70:	f7fb ba0f 	b.w	b4092 <_Znwj>

000b8c74 <_ZnajRKSt9nothrow_t>:
   b8c74:	f7fb ba0f 	b.w	b4096 <_Znaj>

000b8c78 <_ZSt25__throw_bad_function_callv>:
   b8c78:	b508      	push	{r3, lr}
   b8c7a:	f7fb ff0d 	bl	b4a98 <abort>
	...

000b8c80 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b8c80:	4901      	ldr	r1, [pc, #4]	; (b8c88 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b8c82:	f000 b8f9 	b.w	b8e78 <_ZNKSt9type_infoeqERKS_>
   b8c86:	bf00      	nop
   b8c88:	000b98e4 	.word	0x000b98e4

000b8c8c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b8c8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b8c8e:	2400      	movs	r4, #0
   b8c90:	2310      	movs	r3, #16
   b8c92:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b8c96:	6803      	ldr	r3, [r0, #0]
   b8c98:	4615      	mov	r5, r2
   b8c9a:	699e      	ldr	r6, [r3, #24]
   b8c9c:	6812      	ldr	r2, [r2, #0]
   b8c9e:	466b      	mov	r3, sp
   b8ca0:	e9cd 4400 	strd	r4, r4, [sp]
   b8ca4:	47b0      	blx	r6
   b8ca6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b8caa:	f003 0306 	and.w	r3, r3, #6
   b8cae:	2b06      	cmp	r3, #6
   b8cb0:	bf03      	ittte	eq
   b8cb2:	9b00      	ldreq	r3, [sp, #0]
   b8cb4:	602b      	streq	r3, [r5, #0]
   b8cb6:	2001      	moveq	r0, #1
   b8cb8:	4620      	movne	r0, r4
   b8cba:	b004      	add	sp, #16
   b8cbc:	bd70      	pop	{r4, r5, r6, pc}

000b8cbe <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b8cbe:	9800      	ldr	r0, [sp, #0]
   b8cc0:	4290      	cmp	r0, r2
   b8cc2:	bf14      	ite	ne
   b8cc4:	2001      	movne	r0, #1
   b8cc6:	2006      	moveq	r0, #6
   b8cc8:	4770      	bx	lr
	...

000b8ccc <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b8ccc:	b510      	push	{r4, lr}
   b8cce:	4b03      	ldr	r3, [pc, #12]	; (b8cdc <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b8cd0:	6003      	str	r3, [r0, #0]
   b8cd2:	4604      	mov	r4, r0
   b8cd4:	f000 f8cd 	bl	b8e72 <_ZNSt9type_infoD1Ev>
   b8cd8:	4620      	mov	r0, r4
   b8cda:	bd10      	pop	{r4, pc}
   b8cdc:	000b9924 	.word	0x000b9924

000b8ce0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b8ce0:	b510      	push	{r4, lr}
   b8ce2:	4604      	mov	r4, r0
   b8ce4:	f7ff fff2 	bl	b8ccc <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b8ce8:	4620      	mov	r0, r4
   b8cea:	2108      	movs	r1, #8
   b8cec:	f7fb f9d5 	bl	b409a <_ZdlPvj>
   b8cf0:	4620      	mov	r0, r4
   b8cf2:	bd10      	pop	{r4, pc}

000b8cf4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b8cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8cf8:	461f      	mov	r7, r3
   b8cfa:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b8cfe:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b8d02:	4598      	cmp	r8, r3
   b8d04:	4606      	mov	r6, r0
   b8d06:	4615      	mov	r5, r2
   b8d08:	d107      	bne.n	b8d1a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b8d0a:	9907      	ldr	r1, [sp, #28]
   b8d0c:	f000 f8b4 	bl	b8e78 <_ZNKSt9type_infoeqERKS_>
   b8d10:	b118      	cbz	r0, b8d1a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b8d12:	7165      	strb	r5, [r4, #5]
   b8d14:	2000      	movs	r0, #0
   b8d16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8d1a:	4639      	mov	r1, r7
   b8d1c:	4630      	mov	r0, r6
   b8d1e:	f000 f8ab 	bl	b8e78 <_ZNKSt9type_infoeqERKS_>
   b8d22:	2800      	cmp	r0, #0
   b8d24:	d0f6      	beq.n	b8d14 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b8d26:	2301      	movs	r3, #1
   b8d28:	f8c4 8000 	str.w	r8, [r4]
   b8d2c:	7125      	strb	r5, [r4, #4]
   b8d2e:	71a3      	strb	r3, [r4, #6]
   b8d30:	e7f0      	b.n	b8d14 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b8d32 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b8d32:	b538      	push	{r3, r4, r5, lr}
   b8d34:	4615      	mov	r5, r2
   b8d36:	461c      	mov	r4, r3
   b8d38:	f000 f89e 	bl	b8e78 <_ZNKSt9type_infoeqERKS_>
   b8d3c:	b120      	cbz	r0, b8d48 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b8d3e:	2308      	movs	r3, #8
   b8d40:	60e3      	str	r3, [r4, #12]
   b8d42:	2306      	movs	r3, #6
   b8d44:	6025      	str	r5, [r4, #0]
   b8d46:	7123      	strb	r3, [r4, #4]
   b8d48:	bd38      	pop	{r3, r4, r5, pc}

000b8d4a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b8d4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8d4c:	4605      	mov	r5, r0
   b8d4e:	460c      	mov	r4, r1
   b8d50:	9201      	str	r2, [sp, #4]
   b8d52:	461e      	mov	r6, r3
   b8d54:	f000 f890 	bl	b8e78 <_ZNKSt9type_infoeqERKS_>
   b8d58:	b950      	cbnz	r0, b8d70 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b8d5a:	2e03      	cmp	r6, #3
   b8d5c:	d808      	bhi.n	b8d70 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b8d5e:	6823      	ldr	r3, [r4, #0]
   b8d60:	9a01      	ldr	r2, [sp, #4]
   b8d62:	695b      	ldr	r3, [r3, #20]
   b8d64:	4629      	mov	r1, r5
   b8d66:	4620      	mov	r0, r4
   b8d68:	b002      	add	sp, #8
   b8d6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b8d6e:	4718      	bx	r3
   b8d70:	b002      	add	sp, #8
   b8d72:	bd70      	pop	{r4, r5, r6, pc}

000b8d74 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b8d74:	b510      	push	{r4, lr}
   b8d76:	4b03      	ldr	r3, [pc, #12]	; (b8d84 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b8d78:	6003      	str	r3, [r0, #0]
   b8d7a:	4604      	mov	r4, r0
   b8d7c:	f7ff ffa6 	bl	b8ccc <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b8d80:	4620      	mov	r0, r4
   b8d82:	bd10      	pop	{r4, pc}
   b8d84:	000b9984 	.word	0x000b9984

000b8d88 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b8d88:	b510      	push	{r4, lr}
   b8d8a:	4604      	mov	r4, r0
   b8d8c:	f7ff fff2 	bl	b8d74 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b8d90:	4620      	mov	r0, r4
   b8d92:	210c      	movs	r1, #12
   b8d94:	f7fb f981 	bl	b409a <_ZdlPvj>
   b8d98:	4620      	mov	r0, r4
   b8d9a:	bd10      	pop	{r4, pc}

000b8d9c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b8d9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b8d9e:	9f08      	ldr	r7, [sp, #32]
   b8da0:	4297      	cmp	r7, r2
   b8da2:	4605      	mov	r5, r0
   b8da4:	460e      	mov	r6, r1
   b8da6:	4614      	mov	r4, r2
   b8da8:	d00a      	beq.n	b8dc0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b8daa:	68a8      	ldr	r0, [r5, #8]
   b8dac:	6802      	ldr	r2, [r0, #0]
   b8dae:	9708      	str	r7, [sp, #32]
   b8db0:	6a15      	ldr	r5, [r2, #32]
   b8db2:	4631      	mov	r1, r6
   b8db4:	4622      	mov	r2, r4
   b8db6:	46ac      	mov	ip, r5
   b8db8:	b003      	add	sp, #12
   b8dba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b8dbe:	4760      	bx	ip
   b8dc0:	4619      	mov	r1, r3
   b8dc2:	9301      	str	r3, [sp, #4]
   b8dc4:	f000 f858 	bl	b8e78 <_ZNKSt9type_infoeqERKS_>
   b8dc8:	9b01      	ldr	r3, [sp, #4]
   b8dca:	2800      	cmp	r0, #0
   b8dcc:	d0ed      	beq.n	b8daa <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b8dce:	2006      	movs	r0, #6
   b8dd0:	b003      	add	sp, #12
   b8dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8dd4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b8dd4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8dd8:	460d      	mov	r5, r1
   b8dda:	4619      	mov	r1, r3
   b8ddc:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b8de0:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b8de4:	4681      	mov	r9, r0
   b8de6:	4617      	mov	r7, r2
   b8de8:	4698      	mov	r8, r3
   b8dea:	f000 f845 	bl	b8e78 <_ZNKSt9type_infoeqERKS_>
   b8dee:	b190      	cbz	r0, b8e16 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b8df0:	2d00      	cmp	r5, #0
   b8df2:	6034      	str	r4, [r6, #0]
   b8df4:	7137      	strb	r7, [r6, #4]
   b8df6:	db09      	blt.n	b8e0c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b8df8:	1961      	adds	r1, r4, r5
   b8dfa:	458a      	cmp	sl, r1
   b8dfc:	bf0c      	ite	eq
   b8dfe:	2106      	moveq	r1, #6
   b8e00:	2101      	movne	r1, #1
   b8e02:	71b1      	strb	r1, [r6, #6]
   b8e04:	2000      	movs	r0, #0
   b8e06:	b001      	add	sp, #4
   b8e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8e0c:	3502      	adds	r5, #2
   b8e0e:	d1f9      	bne.n	b8e04 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8e10:	2301      	movs	r3, #1
   b8e12:	71b3      	strb	r3, [r6, #6]
   b8e14:	e7f6      	b.n	b8e04 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8e16:	4554      	cmp	r4, sl
   b8e18:	d106      	bne.n	b8e28 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b8e1a:	4659      	mov	r1, fp
   b8e1c:	4648      	mov	r0, r9
   b8e1e:	f000 f82b 	bl	b8e78 <_ZNKSt9type_infoeqERKS_>
   b8e22:	b108      	cbz	r0, b8e28 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b8e24:	7177      	strb	r7, [r6, #5]
   b8e26:	e7ed      	b.n	b8e04 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8e28:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b8e2c:	6803      	ldr	r3, [r0, #0]
   b8e2e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b8e32:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b8e36:	69dc      	ldr	r4, [r3, #28]
   b8e38:	463a      	mov	r2, r7
   b8e3a:	4643      	mov	r3, r8
   b8e3c:	4629      	mov	r1, r5
   b8e3e:	46a4      	mov	ip, r4
   b8e40:	b001      	add	sp, #4
   b8e42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8e46:	4760      	bx	ip

000b8e48 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b8e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8e4c:	4607      	mov	r7, r0
   b8e4e:	460c      	mov	r4, r1
   b8e50:	4615      	mov	r5, r2
   b8e52:	461e      	mov	r6, r3
   b8e54:	f7ff ff6d 	bl	b8d32 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b8e58:	b948      	cbnz	r0, b8e6e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b8e5a:	68b8      	ldr	r0, [r7, #8]
   b8e5c:	6803      	ldr	r3, [r0, #0]
   b8e5e:	699f      	ldr	r7, [r3, #24]
   b8e60:	462a      	mov	r2, r5
   b8e62:	4633      	mov	r3, r6
   b8e64:	4621      	mov	r1, r4
   b8e66:	46bc      	mov	ip, r7
   b8e68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b8e6c:	4760      	bx	ip
   b8e6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b8e72 <_ZNSt9type_infoD1Ev>:
   b8e72:	4770      	bx	lr

000b8e74 <_ZNKSt9type_info14__is_pointer_pEv>:
   b8e74:	2000      	movs	r0, #0
   b8e76:	4770      	bx	lr

000b8e78 <_ZNKSt9type_infoeqERKS_>:
   b8e78:	4281      	cmp	r1, r0
   b8e7a:	b508      	push	{r3, lr}
   b8e7c:	d00e      	beq.n	b8e9c <_ZNKSt9type_infoeqERKS_+0x24>
   b8e7e:	6840      	ldr	r0, [r0, #4]
   b8e80:	7803      	ldrb	r3, [r0, #0]
   b8e82:	2b2a      	cmp	r3, #42	; 0x2a
   b8e84:	d00c      	beq.n	b8ea0 <_ZNKSt9type_infoeqERKS_+0x28>
   b8e86:	6849      	ldr	r1, [r1, #4]
   b8e88:	780b      	ldrb	r3, [r1, #0]
   b8e8a:	2b2a      	cmp	r3, #42	; 0x2a
   b8e8c:	bf08      	it	eq
   b8e8e:	3101      	addeq	r1, #1
   b8e90:	f000 f89b 	bl	b8fca <strcmp>
   b8e94:	fab0 f080 	clz	r0, r0
   b8e98:	0940      	lsrs	r0, r0, #5
   b8e9a:	bd08      	pop	{r3, pc}
   b8e9c:	2001      	movs	r0, #1
   b8e9e:	e7fc      	b.n	b8e9a <_ZNKSt9type_infoeqERKS_+0x22>
   b8ea0:	2000      	movs	r0, #0
   b8ea2:	e7fa      	b.n	b8e9a <_ZNKSt9type_infoeqERKS_+0x22>

000b8ea4 <atexit>:
   b8ea4:	2300      	movs	r3, #0
   b8ea6:	4601      	mov	r1, r0
   b8ea8:	461a      	mov	r2, r3
   b8eaa:	4618      	mov	r0, r3
   b8eac:	f000 b97a 	b.w	b91a4 <__register_exitproc>

000b8eb0 <isprint>:
   b8eb0:	4b02      	ldr	r3, [pc, #8]	; (b8ebc <isprint+0xc>)
   b8eb2:	4418      	add	r0, r3
   b8eb4:	7840      	ldrb	r0, [r0, #1]
   b8eb6:	f000 0097 	and.w	r0, r0, #151	; 0x97
   b8eba:	4770      	bx	lr
   b8ebc:	000b9a51 	.word	0x000b9a51

000b8ec0 <memcmp>:
   b8ec0:	b510      	push	{r4, lr}
   b8ec2:	3901      	subs	r1, #1
   b8ec4:	4402      	add	r2, r0
   b8ec6:	4290      	cmp	r0, r2
   b8ec8:	d101      	bne.n	b8ece <memcmp+0xe>
   b8eca:	2000      	movs	r0, #0
   b8ecc:	e005      	b.n	b8eda <memcmp+0x1a>
   b8ece:	7803      	ldrb	r3, [r0, #0]
   b8ed0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b8ed4:	42a3      	cmp	r3, r4
   b8ed6:	d001      	beq.n	b8edc <memcmp+0x1c>
   b8ed8:	1b18      	subs	r0, r3, r4
   b8eda:	bd10      	pop	{r4, pc}
   b8edc:	3001      	adds	r0, #1
   b8ede:	e7f2      	b.n	b8ec6 <memcmp+0x6>

000b8ee0 <memcpy>:
   b8ee0:	440a      	add	r2, r1
   b8ee2:	4291      	cmp	r1, r2
   b8ee4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b8ee8:	d100      	bne.n	b8eec <memcpy+0xc>
   b8eea:	4770      	bx	lr
   b8eec:	b510      	push	{r4, lr}
   b8eee:	f811 4b01 	ldrb.w	r4, [r1], #1
   b8ef2:	f803 4f01 	strb.w	r4, [r3, #1]!
   b8ef6:	4291      	cmp	r1, r2
   b8ef8:	d1f9      	bne.n	b8eee <memcpy+0xe>
   b8efa:	bd10      	pop	{r4, pc}

000b8efc <memmove>:
   b8efc:	4288      	cmp	r0, r1
   b8efe:	b510      	push	{r4, lr}
   b8f00:	eb01 0402 	add.w	r4, r1, r2
   b8f04:	d902      	bls.n	b8f0c <memmove+0x10>
   b8f06:	4284      	cmp	r4, r0
   b8f08:	4623      	mov	r3, r4
   b8f0a:	d807      	bhi.n	b8f1c <memmove+0x20>
   b8f0c:	1e43      	subs	r3, r0, #1
   b8f0e:	42a1      	cmp	r1, r4
   b8f10:	d008      	beq.n	b8f24 <memmove+0x28>
   b8f12:	f811 2b01 	ldrb.w	r2, [r1], #1
   b8f16:	f803 2f01 	strb.w	r2, [r3, #1]!
   b8f1a:	e7f8      	b.n	b8f0e <memmove+0x12>
   b8f1c:	4402      	add	r2, r0
   b8f1e:	4601      	mov	r1, r0
   b8f20:	428a      	cmp	r2, r1
   b8f22:	d100      	bne.n	b8f26 <memmove+0x2a>
   b8f24:	bd10      	pop	{r4, pc}
   b8f26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b8f2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b8f2e:	e7f7      	b.n	b8f20 <memmove+0x24>

000b8f30 <memset>:
   b8f30:	4402      	add	r2, r0
   b8f32:	4603      	mov	r3, r0
   b8f34:	4293      	cmp	r3, r2
   b8f36:	d100      	bne.n	b8f3a <memset+0xa>
   b8f38:	4770      	bx	lr
   b8f3a:	f803 1b01 	strb.w	r1, [r3], #1
   b8f3e:	e7f9      	b.n	b8f34 <memset+0x4>

000b8f40 <srand>:
   b8f40:	b538      	push	{r3, r4, r5, lr}
   b8f42:	4b10      	ldr	r3, [pc, #64]	; (b8f84 <srand+0x44>)
   b8f44:	681d      	ldr	r5, [r3, #0]
   b8f46:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8f48:	4604      	mov	r4, r0
   b8f4a:	b9b3      	cbnz	r3, b8f7a <srand+0x3a>
   b8f4c:	2018      	movs	r0, #24
   b8f4e:	f7fb fd83 	bl	b4a58 <malloc>
   b8f52:	4602      	mov	r2, r0
   b8f54:	63a8      	str	r0, [r5, #56]	; 0x38
   b8f56:	b920      	cbnz	r0, b8f62 <srand+0x22>
   b8f58:	4b0b      	ldr	r3, [pc, #44]	; (b8f88 <srand+0x48>)
   b8f5a:	480c      	ldr	r0, [pc, #48]	; (b8f8c <srand+0x4c>)
   b8f5c:	2142      	movs	r1, #66	; 0x42
   b8f5e:	f7fb fdab 	bl	b4ab8 <__assert_func>
   b8f62:	490b      	ldr	r1, [pc, #44]	; (b8f90 <srand+0x50>)
   b8f64:	4b0b      	ldr	r3, [pc, #44]	; (b8f94 <srand+0x54>)
   b8f66:	e9c0 1300 	strd	r1, r3, [r0]
   b8f6a:	4b0b      	ldr	r3, [pc, #44]	; (b8f98 <srand+0x58>)
   b8f6c:	6083      	str	r3, [r0, #8]
   b8f6e:	230b      	movs	r3, #11
   b8f70:	8183      	strh	r3, [r0, #12]
   b8f72:	2100      	movs	r1, #0
   b8f74:	2001      	movs	r0, #1
   b8f76:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b8f7a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8f7c:	2200      	movs	r2, #0
   b8f7e:	611c      	str	r4, [r3, #16]
   b8f80:	615a      	str	r2, [r3, #20]
   b8f82:	bd38      	pop	{r3, r4, r5, pc}
   b8f84:	2003e61c 	.word	0x2003e61c
   b8f88:	000b99bd 	.word	0x000b99bd
   b8f8c:	000b99d4 	.word	0x000b99d4
   b8f90:	abcd330e 	.word	0xabcd330e
   b8f94:	e66d1234 	.word	0xe66d1234
   b8f98:	0005deec 	.word	0x0005deec

000b8f9c <strchr>:
   b8f9c:	b2c9      	uxtb	r1, r1
   b8f9e:	4603      	mov	r3, r0
   b8fa0:	f810 2b01 	ldrb.w	r2, [r0], #1
   b8fa4:	b11a      	cbz	r2, b8fae <strchr+0x12>
   b8fa6:	428a      	cmp	r2, r1
   b8fa8:	d1f9      	bne.n	b8f9e <strchr+0x2>
   b8faa:	4618      	mov	r0, r3
   b8fac:	4770      	bx	lr
   b8fae:	2900      	cmp	r1, #0
   b8fb0:	bf18      	it	ne
   b8fb2:	2300      	movne	r3, #0
   b8fb4:	e7f9      	b.n	b8faa <strchr+0xe>

000b8fb6 <strchrnul>:
   b8fb6:	b510      	push	{r4, lr}
   b8fb8:	4604      	mov	r4, r0
   b8fba:	f7ff ffef 	bl	b8f9c <strchr>
   b8fbe:	b918      	cbnz	r0, b8fc8 <strchrnul+0x12>
   b8fc0:	4620      	mov	r0, r4
   b8fc2:	f000 f814 	bl	b8fee <strlen>
   b8fc6:	4420      	add	r0, r4
   b8fc8:	bd10      	pop	{r4, pc}

000b8fca <strcmp>:
   b8fca:	f810 2b01 	ldrb.w	r2, [r0], #1
   b8fce:	f811 3b01 	ldrb.w	r3, [r1], #1
   b8fd2:	2a01      	cmp	r2, #1
   b8fd4:	bf28      	it	cs
   b8fd6:	429a      	cmpcs	r2, r3
   b8fd8:	d0f7      	beq.n	b8fca <strcmp>
   b8fda:	1ad0      	subs	r0, r2, r3
   b8fdc:	4770      	bx	lr

000b8fde <strcpy>:
   b8fde:	4603      	mov	r3, r0
   b8fe0:	f811 2b01 	ldrb.w	r2, [r1], #1
   b8fe4:	f803 2b01 	strb.w	r2, [r3], #1
   b8fe8:	2a00      	cmp	r2, #0
   b8fea:	d1f9      	bne.n	b8fe0 <strcpy+0x2>
   b8fec:	4770      	bx	lr

000b8fee <strlen>:
   b8fee:	4603      	mov	r3, r0
   b8ff0:	f813 2b01 	ldrb.w	r2, [r3], #1
   b8ff4:	2a00      	cmp	r2, #0
   b8ff6:	d1fb      	bne.n	b8ff0 <strlen+0x2>
   b8ff8:	1a18      	subs	r0, r3, r0
   b8ffa:	3801      	subs	r0, #1
   b8ffc:	4770      	bx	lr

000b8ffe <strncmp>:
   b8ffe:	b510      	push	{r4, lr}
   b9000:	b17a      	cbz	r2, b9022 <strncmp+0x24>
   b9002:	4603      	mov	r3, r0
   b9004:	3901      	subs	r1, #1
   b9006:	1884      	adds	r4, r0, r2
   b9008:	f813 0b01 	ldrb.w	r0, [r3], #1
   b900c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b9010:	4290      	cmp	r0, r2
   b9012:	d101      	bne.n	b9018 <strncmp+0x1a>
   b9014:	42a3      	cmp	r3, r4
   b9016:	d101      	bne.n	b901c <strncmp+0x1e>
   b9018:	1a80      	subs	r0, r0, r2
   b901a:	bd10      	pop	{r4, pc}
   b901c:	2800      	cmp	r0, #0
   b901e:	d1f3      	bne.n	b9008 <strncmp+0xa>
   b9020:	e7fa      	b.n	b9018 <strncmp+0x1a>
   b9022:	4610      	mov	r0, r2
   b9024:	e7f9      	b.n	b901a <strncmp+0x1c>

000b9026 <strncpy>:
   b9026:	b510      	push	{r4, lr}
   b9028:	3901      	subs	r1, #1
   b902a:	4603      	mov	r3, r0
   b902c:	b132      	cbz	r2, b903c <strncpy+0x16>
   b902e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b9032:	f803 4b01 	strb.w	r4, [r3], #1
   b9036:	3a01      	subs	r2, #1
   b9038:	2c00      	cmp	r4, #0
   b903a:	d1f7      	bne.n	b902c <strncpy+0x6>
   b903c:	441a      	add	r2, r3
   b903e:	2100      	movs	r1, #0
   b9040:	4293      	cmp	r3, r2
   b9042:	d100      	bne.n	b9046 <strncpy+0x20>
   b9044:	bd10      	pop	{r4, pc}
   b9046:	f803 1b01 	strb.w	r1, [r3], #1
   b904a:	e7f9      	b.n	b9040 <strncpy+0x1a>

000b904c <strnlen>:
   b904c:	b510      	push	{r4, lr}
   b904e:	4602      	mov	r2, r0
   b9050:	4401      	add	r1, r0
   b9052:	428a      	cmp	r2, r1
   b9054:	4613      	mov	r3, r2
   b9056:	d003      	beq.n	b9060 <strnlen+0x14>
   b9058:	781c      	ldrb	r4, [r3, #0]
   b905a:	3201      	adds	r2, #1
   b905c:	2c00      	cmp	r4, #0
   b905e:	d1f8      	bne.n	b9052 <strnlen+0x6>
   b9060:	1a18      	subs	r0, r3, r0
   b9062:	bd10      	pop	{r4, pc}

000b9064 <strrchr>:
   b9064:	b538      	push	{r3, r4, r5, lr}
   b9066:	4603      	mov	r3, r0
   b9068:	460c      	mov	r4, r1
   b906a:	b969      	cbnz	r1, b9088 <strrchr+0x24>
   b906c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b9070:	f7ff bf94 	b.w	b8f9c <strchr>
   b9074:	1c43      	adds	r3, r0, #1
   b9076:	4605      	mov	r5, r0
   b9078:	4621      	mov	r1, r4
   b907a:	4618      	mov	r0, r3
   b907c:	f7ff ff8e 	bl	b8f9c <strchr>
   b9080:	2800      	cmp	r0, #0
   b9082:	d1f7      	bne.n	b9074 <strrchr+0x10>
   b9084:	4628      	mov	r0, r5
   b9086:	bd38      	pop	{r3, r4, r5, pc}
   b9088:	2500      	movs	r5, #0
   b908a:	e7f5      	b.n	b9078 <strrchr+0x14>

000b908c <_strtol_l.constprop.0>:
   b908c:	2b01      	cmp	r3, #1
   b908e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9092:	d001      	beq.n	b9098 <_strtol_l.constprop.0+0xc>
   b9094:	2b24      	cmp	r3, #36	; 0x24
   b9096:	d906      	bls.n	b90a6 <_strtol_l.constprop.0+0x1a>
   b9098:	f7fb fd06 	bl	b4aa8 <__errno>
   b909c:	2316      	movs	r3, #22
   b909e:	6003      	str	r3, [r0, #0]
   b90a0:	2000      	movs	r0, #0
   b90a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b90a6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b918c <_strtol_l.constprop.0+0x100>
   b90aa:	460d      	mov	r5, r1
   b90ac:	462e      	mov	r6, r5
   b90ae:	f815 4b01 	ldrb.w	r4, [r5], #1
   b90b2:	f814 700c 	ldrb.w	r7, [r4, ip]
   b90b6:	f017 0708 	ands.w	r7, r7, #8
   b90ba:	d1f7      	bne.n	b90ac <_strtol_l.constprop.0+0x20>
   b90bc:	2c2d      	cmp	r4, #45	; 0x2d
   b90be:	d132      	bne.n	b9126 <_strtol_l.constprop.0+0x9a>
   b90c0:	782c      	ldrb	r4, [r5, #0]
   b90c2:	2701      	movs	r7, #1
   b90c4:	1cb5      	adds	r5, r6, #2
   b90c6:	2b00      	cmp	r3, #0
   b90c8:	d05b      	beq.n	b9182 <_strtol_l.constprop.0+0xf6>
   b90ca:	2b10      	cmp	r3, #16
   b90cc:	d109      	bne.n	b90e2 <_strtol_l.constprop.0+0x56>
   b90ce:	2c30      	cmp	r4, #48	; 0x30
   b90d0:	d107      	bne.n	b90e2 <_strtol_l.constprop.0+0x56>
   b90d2:	782c      	ldrb	r4, [r5, #0]
   b90d4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b90d8:	2c58      	cmp	r4, #88	; 0x58
   b90da:	d14d      	bne.n	b9178 <_strtol_l.constprop.0+0xec>
   b90dc:	786c      	ldrb	r4, [r5, #1]
   b90de:	2310      	movs	r3, #16
   b90e0:	3502      	adds	r5, #2
   b90e2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b90e6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b90ea:	f04f 0c00 	mov.w	ip, #0
   b90ee:	fbb8 f9f3 	udiv	r9, r8, r3
   b90f2:	4666      	mov	r6, ip
   b90f4:	fb03 8a19 	mls	sl, r3, r9, r8
   b90f8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b90fc:	f1be 0f09 	cmp.w	lr, #9
   b9100:	d816      	bhi.n	b9130 <_strtol_l.constprop.0+0xa4>
   b9102:	4674      	mov	r4, lr
   b9104:	42a3      	cmp	r3, r4
   b9106:	dd24      	ble.n	b9152 <_strtol_l.constprop.0+0xc6>
   b9108:	f1bc 0f00 	cmp.w	ip, #0
   b910c:	db1e      	blt.n	b914c <_strtol_l.constprop.0+0xc0>
   b910e:	45b1      	cmp	r9, r6
   b9110:	d31c      	bcc.n	b914c <_strtol_l.constprop.0+0xc0>
   b9112:	d101      	bne.n	b9118 <_strtol_l.constprop.0+0x8c>
   b9114:	45a2      	cmp	sl, r4
   b9116:	db19      	blt.n	b914c <_strtol_l.constprop.0+0xc0>
   b9118:	fb06 4603 	mla	r6, r6, r3, r4
   b911c:	f04f 0c01 	mov.w	ip, #1
   b9120:	f815 4b01 	ldrb.w	r4, [r5], #1
   b9124:	e7e8      	b.n	b90f8 <_strtol_l.constprop.0+0x6c>
   b9126:	2c2b      	cmp	r4, #43	; 0x2b
   b9128:	bf04      	itt	eq
   b912a:	782c      	ldrbeq	r4, [r5, #0]
   b912c:	1cb5      	addeq	r5, r6, #2
   b912e:	e7ca      	b.n	b90c6 <_strtol_l.constprop.0+0x3a>
   b9130:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b9134:	f1be 0f19 	cmp.w	lr, #25
   b9138:	d801      	bhi.n	b913e <_strtol_l.constprop.0+0xb2>
   b913a:	3c37      	subs	r4, #55	; 0x37
   b913c:	e7e2      	b.n	b9104 <_strtol_l.constprop.0+0x78>
   b913e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b9142:	f1be 0f19 	cmp.w	lr, #25
   b9146:	d804      	bhi.n	b9152 <_strtol_l.constprop.0+0xc6>
   b9148:	3c57      	subs	r4, #87	; 0x57
   b914a:	e7db      	b.n	b9104 <_strtol_l.constprop.0+0x78>
   b914c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b9150:	e7e6      	b.n	b9120 <_strtol_l.constprop.0+0x94>
   b9152:	f1bc 0f00 	cmp.w	ip, #0
   b9156:	da05      	bge.n	b9164 <_strtol_l.constprop.0+0xd8>
   b9158:	2322      	movs	r3, #34	; 0x22
   b915a:	6003      	str	r3, [r0, #0]
   b915c:	4646      	mov	r6, r8
   b915e:	b942      	cbnz	r2, b9172 <_strtol_l.constprop.0+0xe6>
   b9160:	4630      	mov	r0, r6
   b9162:	e79e      	b.n	b90a2 <_strtol_l.constprop.0+0x16>
   b9164:	b107      	cbz	r7, b9168 <_strtol_l.constprop.0+0xdc>
   b9166:	4276      	negs	r6, r6
   b9168:	2a00      	cmp	r2, #0
   b916a:	d0f9      	beq.n	b9160 <_strtol_l.constprop.0+0xd4>
   b916c:	f1bc 0f00 	cmp.w	ip, #0
   b9170:	d000      	beq.n	b9174 <_strtol_l.constprop.0+0xe8>
   b9172:	1e69      	subs	r1, r5, #1
   b9174:	6011      	str	r1, [r2, #0]
   b9176:	e7f3      	b.n	b9160 <_strtol_l.constprop.0+0xd4>
   b9178:	2430      	movs	r4, #48	; 0x30
   b917a:	2b00      	cmp	r3, #0
   b917c:	d1b1      	bne.n	b90e2 <_strtol_l.constprop.0+0x56>
   b917e:	2308      	movs	r3, #8
   b9180:	e7af      	b.n	b90e2 <_strtol_l.constprop.0+0x56>
   b9182:	2c30      	cmp	r4, #48	; 0x30
   b9184:	d0a5      	beq.n	b90d2 <_strtol_l.constprop.0+0x46>
   b9186:	230a      	movs	r3, #10
   b9188:	e7ab      	b.n	b90e2 <_strtol_l.constprop.0+0x56>
   b918a:	bf00      	nop
   b918c:	000b9a52 	.word	0x000b9a52

000b9190 <strtol>:
   b9190:	4613      	mov	r3, r2
   b9192:	460a      	mov	r2, r1
   b9194:	4601      	mov	r1, r0
   b9196:	4802      	ldr	r0, [pc, #8]	; (b91a0 <strtol+0x10>)
   b9198:	6800      	ldr	r0, [r0, #0]
   b919a:	f7ff bf77 	b.w	b908c <_strtol_l.constprop.0>
   b919e:	bf00      	nop
   b91a0:	2003e61c 	.word	0x2003e61c

000b91a4 <__register_exitproc>:
   b91a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b91a8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b9264 <__register_exitproc+0xc0>
   b91ac:	4606      	mov	r6, r0
   b91ae:	f8d8 0000 	ldr.w	r0, [r8]
   b91b2:	461f      	mov	r7, r3
   b91b4:	460d      	mov	r5, r1
   b91b6:	4691      	mov	r9, r2
   b91b8:	f000 f856 	bl	b9268 <__retarget_lock_acquire_recursive>
   b91bc:	4b25      	ldr	r3, [pc, #148]	; (b9254 <__register_exitproc+0xb0>)
   b91be:	681c      	ldr	r4, [r3, #0]
   b91c0:	b934      	cbnz	r4, b91d0 <__register_exitproc+0x2c>
   b91c2:	4c25      	ldr	r4, [pc, #148]	; (b9258 <__register_exitproc+0xb4>)
   b91c4:	601c      	str	r4, [r3, #0]
   b91c6:	4b25      	ldr	r3, [pc, #148]	; (b925c <__register_exitproc+0xb8>)
   b91c8:	b113      	cbz	r3, b91d0 <__register_exitproc+0x2c>
   b91ca:	681b      	ldr	r3, [r3, #0]
   b91cc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b91d0:	6863      	ldr	r3, [r4, #4]
   b91d2:	2b1f      	cmp	r3, #31
   b91d4:	dd07      	ble.n	b91e6 <__register_exitproc+0x42>
   b91d6:	f8d8 0000 	ldr.w	r0, [r8]
   b91da:	f000 f847 	bl	b926c <__retarget_lock_release_recursive>
   b91de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b91e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b91e6:	b34e      	cbz	r6, b923c <__register_exitproc+0x98>
   b91e8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b91ec:	b988      	cbnz	r0, b9212 <__register_exitproc+0x6e>
   b91ee:	4b1c      	ldr	r3, [pc, #112]	; (b9260 <__register_exitproc+0xbc>)
   b91f0:	b923      	cbnz	r3, b91fc <__register_exitproc+0x58>
   b91f2:	f8d8 0000 	ldr.w	r0, [r8]
   b91f6:	f000 f838 	bl	b926a <__retarget_lock_release>
   b91fa:	e7f0      	b.n	b91de <__register_exitproc+0x3a>
   b91fc:	f44f 7084 	mov.w	r0, #264	; 0x108
   b9200:	f7fb fc2a 	bl	b4a58 <malloc>
   b9204:	2800      	cmp	r0, #0
   b9206:	d0f4      	beq.n	b91f2 <__register_exitproc+0x4e>
   b9208:	2300      	movs	r3, #0
   b920a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b920e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b9212:	6863      	ldr	r3, [r4, #4]
   b9214:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b9218:	2201      	movs	r2, #1
   b921a:	409a      	lsls	r2, r3
   b921c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b9220:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b9224:	4313      	orrs	r3, r2
   b9226:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b922a:	2e02      	cmp	r6, #2
   b922c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b9230:	bf02      	ittt	eq
   b9232:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b9236:	4313      	orreq	r3, r2
   b9238:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b923c:	6863      	ldr	r3, [r4, #4]
   b923e:	f8d8 0000 	ldr.w	r0, [r8]
   b9242:	1c5a      	adds	r2, r3, #1
   b9244:	3302      	adds	r3, #2
   b9246:	6062      	str	r2, [r4, #4]
   b9248:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b924c:	f000 f80e 	bl	b926c <__retarget_lock_release_recursive>
   b9250:	2000      	movs	r0, #0
   b9252:	e7c6      	b.n	b91e2 <__register_exitproc+0x3e>
   b9254:	2003e7e8 	.word	0x2003e7e8
   b9258:	2003e75c 	.word	0x2003e75c
   b925c:	00000000 	.word	0x00000000
   b9260:	000b4a59 	.word	0x000b4a59
   b9264:	2003e680 	.word	0x2003e680

000b9268 <__retarget_lock_acquire_recursive>:
   b9268:	4770      	bx	lr

000b926a <__retarget_lock_release>:
   b926a:	4770      	bx	lr

000b926c <__retarget_lock_release_recursive>:
   b926c:	4770      	bx	lr

000b926e <link_code_end>:
	...

000b9270 <dynalib_user>:
   b9270:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b9280:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b9290:	7620 7269 7574 6c61 6100 7070 6e00 7063      virtual.app.ncp
   b92a0:	7300 7379 6574 006d 656e 0074 6977 6972     .system.net.wiri
   b92b0:	676e 0a00 0a0a 0a0a 000a 205b 4f42 544f     ng........[ BOOT
   b92c0:	5d20 7220 6e75 696e 676e 5420 5345 5354      ] running TESTS
   b92d0:	2d00 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     .---------------
   b92e0:	2d2d 2d2d 2d2d 002d 4546 373a 3a44 3932     -------.FE:7D:29
   b92f0:	443a 3a38 4437 363a 0037 0000               :D8:7D:67...

000b92fc <_ZTVN5spark10LogHandlerE>:
	...
   b930c:	40a1 000b 40c9 000b                         .@...@..

000b9314 <_ZTVN5spark16SerialLogHandlerE>:
	...
   b931c:	40d5 000b 4109 000b 608d 000b 40cb 000b     .@...A...`...@..
   b932c:	205b 4c42 2045 205d 6373 6e61 696e 676e     [ BLE ] scanning
   b933c:	6620 726f 6420 7665 6369 7365 6420 7275      for devices dur
   b934c:	6e69 2067 6425 7320 6365 6e6f 7364 2e2e     ing %d seconds..
   b935c:	002e 205b 4c42 2045 205d 6564 6976 6563     ..[ BLE ] device
   b936c:	6620 756f 646e 2520 2073 202d 616e 656d      found %s - name
   b937c:	2520 2073 202d 616e 656d 2032 7325 5b00      %s - name2 %s.[
   b938c:	4220 454c 5d20 6320 6e6f 656e 7463 6465      BLE ] connected
   b939c:	7420 206f 4c42 2045 706f 6f74 6564 6d20      to BLE optode m
   b93ac:	6e69 2c69 6d20 6361 3d20 2520 0073 205b     ini, mac = %s.[ 
   b93bc:	4c42 2045 205d 6964 6373 6e6f 656e 7463     BLE ] disconnect
   b93cc:	6465 6f20 7470 646f 2065 696d 696e 202c     ed optode mini, 
   b93dc:	616d 2063 203d 7325 5b00 4220 454c 5d20     mac = %s.[ BLE ]
   b93ec:	6620 6961 656c 2064 6f63 6e6e 6365 6974      failed connecti
   b93fc:	676e 2520 0073 6425 2500 0075 2575 3430     ng %s.%d.%u.u%04
   b940c:	0078 0000                                   x...

000b9410 <_ZTVN5spark12NetworkClassE>:
	...
   b9418:	4ed3 000b 4edd 000b 4ee7 000b 4ef1 000b     .N...N...N...N..
   b9428:	4efb 000b 4f07 000b 4f13 000b 4f1b 000b     .N...O...O...O..
   b9438:	4f23 000b 4f2f 000b 4f37 000b 4f41 000b     #O../O..7O..AO..
   b9448:	4f4b 000b                                   KO..

000b944c <_ZTVN5spark9WiFiClassE>:
	...
   b9454:	5097 000b 508d 000b 5083 000b 5039 000b     .P...P...P..9P..
   b9464:	5077 000b 506b 000b 4f13 000b 4f1b 000b     wP..kP...O...O..
   b9474:	505f 000b 5057 000b 504d 000b 5043 000b     _P..WP..MP..CP..
   b9484:	4f4b 000b                                   KO..

000b9488 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000b9490 <_ZTV9USBSerial>:
	...
   b9498:	5115 000b 517d 000b 5153 000b 63a5 000b     .Q..}Q..SQ...c..
   b94a8:	5145 000b 5117 000b 5127 000b 5177 000b     EQ...Q..'Q..wQ..
   b94b8:	5137 000b 510f 000b                         7Q...Q..

000b94c0 <_ZTV9IPAddress>:
	...
   b94c8:	5231 000b 5221 000b 5223 000b 5925 252d     1R..!R..#R..%Y-%
   b94d8:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   b94e8:	7361 7463 6d69 0065 6162 6475 5300 7265     asctime.baud.Ser
   b94f8:	6169 006c 6553 6972 6c61 0031 534a 4e4f     ial.Serial1.JSON
   b9508:	7453 6572 6d61 6f4c 4867 6e61 6c64 7265     StreamLogHandler
   b9518:	2500 3130 7530 0020 205d 2c00 0020 2928     .%010u .] ., .()
   b9528:	203a 2000 005b 6f63 6564 3d20 0020 6925     : . [.code = .%i
   b9538:	6400 7465 6961 736c 3d20 0020 0a0d 6600     .details = ....f
   b9548:	6c00 006e 6e66 6300 646f 0065 6564 6174     .ln.fn.code.deta
   b9558:	6c69 0000                                   il..

000b955c <_ZTVN5spark16JSONStreamWriterE>:
	...
   b9564:	54b5 000b 54db 000b 5499 000b 4b07 000b     .T...T...T...K..

000b9574 <_ZTVN5spark16StreamLogHandlerE>:
	...
   b957c:	5935 000b 594d 000b 608d 000b 40cb 000b     5Y..MY...`...@..

000b958c <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   b9594:	5961 000b 5975 000b 6231 000b 54a1 000b     aY..uY..1b...T..

000b95a4 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   b95ac:	54b3 000b 54e9 000b 5ff1 000b 54a3 000b     .T...T..._...T..

000b95bc <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   b95c4:	54b1 000b 54f7 000b 5879 000b 5519 000b     .T...T..yX...U..
   b95d4:	7341 6573 7472 6f69 466e 6961 756c 6572     AssertionFailure
   b95e4:	6620 6c61 6573 7700 7269 6e69 2e67 6c62      false.wiring.bl
   b95f4:	0065 7453 7261 2074 6964 6373 766f 7265     e.Start discover
   b9604:	6e69 2067 6573 7672 6369 7365 002e 7341     ing services..As
   b9614:	6573 7472 6f69 466e 6961 756c 6572 6820     sertionFailure h
   b9624:	6c61 625f 656c 735f 6174 6b63 695f 696e     al_ble_stack_ini
   b9634:	2874 756e 6c6c 7470 2972 3d20 203d 5953     t(nullptr) == SY
   b9644:	5453 4d45 455f 5252 524f 4e5f 4e4f 0045     STEM_ERROR_NONE.
   b9654:	6550 7265 6420 7665 6369 2065 7369 6d20     Peer device is m
   b9664:	7369 6973 676e 0021 6146 6c69 6465 7420     issing!.Failed t
   b9674:	206f 6c61 6f6c 6163 6574 6d20 6d65 726f     o allocate memor
   b9684:	2179 4600 6961 656c 2064 6f74 6120 7070     y!.Failed to app
   b9694:	6e65 2064 6570 7265 4320 6e65 7274 6c61     end peer Central
   b96a4:	6420 7665 6369 2e65 4300 6e6f 656e 7463      device..Connect
   b96b4:	6465 6220 2079 6543 746e 6172 206c 6564     ed by Central de
   b96c4:	6976 6563 002e 6944 6373 6e6f 656e 7463     vice..Disconnect
   b96d4:	6465 6220 2079 6572 6f6d 6574 6420 7665     ed by remote dev
   b96e4:	6369 2e65 4600 6961 656c 2064 6f74 6120     ice..Failed to a
   b96f4:	7070 6e65 2064 6964 6373 766f 7265 6465     ppend discovered
   b9704:	7320 7265 6976 6563 002e 7453 7261 2074      service..Start 
   b9714:	6964 6373 766f 7265 6e69 2067 6863 7261     discovering char
   b9724:	6361 6574 6972 7473 6369 2073 666f 7320     acteristics of s
   b9734:	7265 6976 6563 203a 7325 002e 6143 6e6e     ervice: %s..Cann
   b9744:	746f 6120 6464 6e20 7765 7020 6565 2072     ot add new peer 
   b9754:	6564 6976 6563 002e 654e 2077 6570 6972     device..New peri
   b9764:	6870 7265 6c61 6920 2073 6f63 6e6e 6365     pheral is connec
   b9774:	6574 2e64 4300 6168 6172 7463 7265 7369     ted..Characteris
   b9784:	6974 2063 6964 6373 766f 7265 6465 002e     tic discovered..
   b9794:	6944 6373 766f 7265 6465 6320 6168 6172     Discovered chara
   b97a4:	7463 7265 7369 6974 2763 2073 6168 646e     cteristic's hand
   b97b4:	656c 6920 2073 6e69 6176 696c 2e64 4600     le is invalid..F
   b97c4:	6961 656c 2064 6f74 6120 7070 6e65 2064     ailed to append 
   b97d4:	6964 6373 766f 7265 6465 6320 6168 6172     discovered chara
   b97e4:	7463 7265 7369 6974 2e63 0000               cteristic...

000b97f0 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b97f8:	64b7 000b 6519 000b 668f 000b 6543 000b     .d...e...f..Ce..
   b9808:	64b9 000b                                   .d..

000b980c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b9814:	64b3 000b 6527 000b 64b5 000b 6549 000b     .d..'e...d..Ie..
   b9824:	64d9 000b                                   .d..

000b9828 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b9830:	64b1 000b 6535 000b 7125 000b 654f 000b     .d..5e..%q..Oe..
   b9840:	64f9 000b 0000 0000 0000 34fb 5f9b 0080     .d.........4._..
   b9850:	8000 1000 0000 0000 0000 0000               ............

000b985c <_ZTV11USARTSerial>:
	...
   b9864:	88a9 000b 8915 000b 88ed 000b 63a5 000b     .............c..
   b9874:	88bd 000b 88d9 000b 88cb 000b 88e7 000b     ................
   b9884:	88ab 000b 88af 000b                         ........

000b988c <_ZTVN5spark13EthernetClassE>:
	...
   b9894:	89e3 000b 89d9 000b 89cf 000b 89c5 000b     ................
   b98a4:	89b9 000b 89ad 000b 4f13 000b 4f1b 000b     .........O...O..
   b98b4:	89a1 000b 8999 000b 898f 000b 8985 000b     ................
   b98c4:	4f4b 000b                                   KO..

000b98c8 <_ZSt7nothrow>:
	...

000b98c9 <_ZTSSt19_Sp_make_shared_tag>:
   b98c9:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b98d9:	6572 5f64 6174 0067 0000                     red_tag....

000b98e4 <_ZTISt19_Sp_make_shared_tag>:
   b98e4:	9924 000b 98c9 000b                         $.......

000b98ec <_ZTIN10__cxxabiv117__class_type_infoE>:
   b98ec:	9984 000b 98f8 000b 99a8 000b               ............

000b98f8 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b98f8:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b9908:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b9918:	0045 0000                                   E...

000b991c <_ZTVN10__cxxabiv117__class_type_infoE>:
   b991c:	0000 0000 98ec 000b 8ccd 000b 8ce1 000b     ................
   b992c:	8e75 000b 8e75 000b 8d4b 000b 8c8d 000b     u...u...K.......
   b993c:	8d33 000b 8cf5 000b 8cbf 000b               3...........

000b9948 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b9948:	9984 000b 9954 000b 98ec 000b               ....T.......

000b9954 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b9954:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b9964:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b9974:	666e 456f 0000 0000                         nfoE....

000b997c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b997c:	0000 0000 9948 000b 8d75 000b 8d89 000b     ....H...u.......
   b998c:	8e75 000b 8e75 000b 8d4b 000b 8c8d 000b     u...u...K.......
   b999c:	8e49 000b 8dd5 000b 8d9d 000b               I...........

000b99a8 <_ZTISt9type_info>:
   b99a8:	9924 000b 99b0 000b                         $.......

000b99b0 <_ZTSSt9type_info>:
   b99b0:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b99c0:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b99d0:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   b99e0:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   b99f0:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   b9a00:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b9a10:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b9a20:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   b9a30:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b9a40:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b9a51 <_ctype_>:
   b9a51:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b9a61:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b9a71:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b9a81:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b9a91:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   b9aa1:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   b9ab1:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   b9ac1:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   b9ad1:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000b9b52 <link_const_variable_data_end>:
	...

000b9b54 <link_constructors_location>:
   b9b54:	000b4425 	.word	0x000b4425
   b9b58:	000b4635 	.word	0x000b4635
   b9b5c:	000b5025 	.word	0x000b5025
   b9b60:	000b50a1 	.word	0x000b50a1
   b9b64:	000b5471 	.word	0x000b5471
   b9b68:	000b5485 	.word	0x000b5485
   b9b6c:	000b607d 	.word	0x000b607d
   b9b70:	000b8899 	.word	0x000b8899
   b9b74:	000b8961 	.word	0x000b8961
   b9b78:	000b89ed 	.word	0x000b89ed

000b9b7c <link_constructors_end>:
   b9b7c:	00000000 	.word	0x00000000
